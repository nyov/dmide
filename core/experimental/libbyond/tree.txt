loading Darkside.dme
loading Macros.dms
loading The Base.dmp
loading Macros.dms
var [:0]
	const [:0]
		NORTH [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		SOUTH [:0]
			 [:0]
				= [:0]
					 (2) [:0]
		EAST [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		WEST [:0]
			 [:0]
				= [:0]
					 (8) [:0]
		NORTHEAST [:0]
			 [:0]
				= [:0]
					 (5) [:0]
		NORTHWEST [:0]
			 [:0]
				= [:0]
					 (9) [:0]
		SOUTHEAST [:0]
			 [:0]
				= [:0]
					 (6) [:0]
		SOUTHWEST [:0]
			 [:0]
				= [:0]
					 (10) [:0]
		UP [:0]
			 [:0]
				= [:0]
					 (16) [:0]
		DOWN [:0]
			 [:0]
				= [:0]
					 (32) [:0]
var [:0]
	const [:0]
		BLIND [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		SEE_MOBS [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		SEE_OBJS [:0]
			 [:0]
				= [:0]
					 (8) [:0]
		SEE_TURFS [:0]
			 [:0]
				= [:0]
					 (16) [:0]
		SEE_SELF [:0]
			 [:0]
				= [:0]
					 (32) [:0]
		SEE_INFRA [:0]
			 [:0]
				= [:0]
					 (64) [:0]
		SEE_PIXELS [:0]
			 [:0]
				= [:0]
					 (256) [:0]
var [:0]
	const [:0]
		MOB_PERSPECTIVE [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		EYE_PERSPECTIVE [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		EDGE_PERSPECTIVE [:0]
			 [:0]
				= [:0]
					 (2) [:0]
var [:0]
	const [:0]
		FLOAT_LAYER [:0]
			 [:0]
				= [:0]
					 (-1) [:0]
		AREA_LAYER [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		TURF_LAYER [:0]
			 [:0]
				= [:0]
					 (2) [:0]
		OBJ_LAYER [:0]
			 [:0]
				= [:0]
					 (3) [:0]
		MOB_LAYER [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		FLY_LAYER [:0]
			 [:0]
				= [:0]
					 (5) [:0]
var [:0]
	const [:0]
		TRUE [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		FALSE [:0]
			 [:0]
				= [:0]
					 (0) [:0]
var [:0]
	const [:0]
		MALE [:0]
			 [:0]
				= [:0]
					 ("male") [:0]
		FEMALE [:0]
			 [:0]
				= [:0]
					 ("female") [:0]
		NEUTER [:0]
			 [:0]
				= [:0]
					 ("neuter") [:0]
		PLURAL [:0]
			 [:0]
				= [:0]
					 ("plural") [:0]
var [:0]
	const [:0]
		MOUSE_INACTIVE_POINTER [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		MOUSE_ACTIVE_POINTER [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		MOUSE_DRAG_POINTER [:0]
			 [:0]
				= [:0]
					 (3) [:0]
		MOUSE_DROP_POINTER [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		MOUSE_ARROW_POINTER [:0]
			 [:0]
				= [:0]
					 (5) [:0]
		MOUSE_CROSSHAIRS_POINTER [:0]
			 [:0]
				= [:0]
					 (6) [:0]
		MOUSE_HAND_POINTER [:0]
			 [:0]
				= [:0]
					 (7) [:0]
var [:0]
	const [:0]
		MOUSE_LEFT_BUTTON [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		MOUSE_RIGHT_BUTTON [:0]
			 [:0]
				= [:0]
					 (2) [:0]
		MOUSE_MIDDLE_BUTTON [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		MOUSE_CTRL_KEY [:0]
			 [:0]
				= [:0]
					 (8) [:0]
		MOUSE_SHIFT_KEY [:0]
			 [:0]
				= [:0]
					 (16) [:0]
		MOUSE_ALT_KEY [:0]
			 [:0]
				= [:0]
					 (32) [:0]
var [:0]
	const [:0]
		MS_WINDOWS [:0]
			 [:0]
				= [:0]
					 ("MS Windows") [:0]
		UNIX [:0]
			 [:0]
				= [:0]
					 ("UNIX") [:0]
var [:0]
	const [:0]
		SOUND_MUTE [:0]
			 [:0]
				= [:0]
					 (1) [:0]
		SOUND_PAUSED [:0]
			 [:0]
				= [:0]
					 (2) [:0]
		SOUND_STREAM [:0]
			 [:0]
				= [:0]
					 (4) [:0]
		SOUND_UPDATE [:0]
			 [:0]
				= [:0]
					 (16) [:0]
sound [:0]
	var [:0]
		file [:0]
		repeat [:0]
		wait [:0]
		channel [:0]
		frequency [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		pan [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		volume [:0]
			 [:0]
				= [:0]
					 (100) [:0]
		priority [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		status [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		environment [:0]
			 [:0]
				= [:0]
					 (-1) [:0]
		echo [:0]
		x [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		y [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		z [:0]
			 [:0]
				= [:0]
					 (0) [:0]
		falloff [:0]
			 [:0]
				= [:0]
					 (1) [:0]
	= [:0]
		 (_dm_interface) [:0]
		 [:0]
			| [:0]
				 (1) [:0]
				 (32) [:0]
				 (512) [:0]
	New [:0]
		var [:0]
			.arg [:0]
				file [:0]
				repeat [:0]
				wait [:0]
				channel [:0]
				volume [:0]
					 [:0]
						= [:0]
							 (100) [:0]
		= [:0]
			 (src.file) [:0]
			 [:0]
				fcopy_rsc [:0]
					 (file) [:0]
		= [:0]
			 (src.repeat) [:0]
			 (repeat) [:0]
		= [:0]
			 (src.wait) [:0]
			 (wait) [:0]
		= [:0]
			 (src.channel) [:0]
			 (channel) [:0]
		= [:0]
			 (src.volume) [:0]
			 (volume) [:0]
		return [:0]
			.call (..) [:0]
	proc [:0]
		RscFile [:0]
			var [:0]
				.arg [:0]
			return (file) [:0]
	.. (/datum) [Darkside.dme:0]
icon [:0]
	= [:0]
		 (_dm_interface) [:0]
		 [:0]
			| [:0]
				 (1) [:0]
				 (256) [:0]
				 (512) [:0]
	var [:0]
		icon [:0]
	New [:0]
		var [:0]
			.arg [:0]
				icon [:0]
				icon_state [:0]
				dir [:0]
				frame [:0]
				moving [:0]
		= [:0]
			 (src.icon) [:0]
			 [:0]
				_dm_new_icon [:0]
					 (icon) [:0]
					 (icon_state) [:0]
					 (dir) [:0]
					 (frame) [:0]
					 (moving) [:0]
	proc [:0]
		Icon [:0]
			var [:0]
				.arg [:0]
			return (icon) [:0]
		RscFile [:0]
			var [:0]
				.arg [:0]
			return [:0]
				fcopy_rsc [:0]
					 (icon) [:0]
		IconStates [:0]
			var [:0]
				.arg [:0]
					mode [:0]
						 [:0]
							= [:0]
								 (0) [:0]
			return [:0]
				icon_states [:0]
					 (icon) [:0]
					 (mode) [:0]
		Turn [:0]
			var [:0]
				.arg [:0]
					angle [:0]
					antialias [:0]
			if [:0]
				 (antialias) [:0]
			 [:0]
				_dm_turn_icon [:0]
					 (icon) [:0]
					 (angle) [:0]
					 (1) [:0]
			else [:0]
				_dm_turn_icon [:0]
					 (icon) [:0]
					 (angle) [:0]
		Flip [:0]
			var [:0]
				.arg [:0]
					dir [:0]
			_dm_flip_icon [:0]
				 (icon) [:0]
				 (dir) [:0]
		Shift [:0]
			var [:0]
				.arg [:0]
					dir [:0]
					offset [:0]
					wrap [:0]
			_dm_shift_icon [:0]
				 (icon) [:0]
				 (dir) [:0]
				 (offset) [:0]
				 (wrap) [:0]
		SetIntensity [:0]
			var [:0]
				.arg [:0]
					r [:0]
					g [:0]
						 [:0]
							= [:0]
								 (-1) [:0]
					b [:0]
						 [:0]
							= [:0]
								 (-1) [:0]
			_dm_icon_intensity [:0]
				 (icon) [:0]
				 (r) [:0]
				 (g) [:0]
				 (b) [:0]
		Blend [:0]
			var [:0]
				.arg [:0]
					icon [:0]
					f [:0]
			_dm_icon_blend [:0]
				 (src.icon) [:0]
				 (icon) [:0]
				 (f) [:0]
		SwapColor [:0]
			var [:0]
				.arg [:0]
					o [:0]
					n [:0]
			_dm_icon_swap_color [:0]
				 (icon) [:0]
				 (o) [:0]
				 (n) [:0]
		DrawBox [:0]
			var [:0]
				.arg [:0]
					c [:0]
					x1 [:0]
					y1 [:0]
					x2 [:0]
					y2 [:0]
			_dm_icon_draw_box [:0]
				 (icon) [:0]
				 (c) [:0]
				 (x1) [:0]
				 (y1) [:0]
				 (x2) [:0]
				 (y2) [:0]
		Insert [:0]
			var [:0]
				.arg [:0]
					new_icon [:0]
					icon_state [:0]
					dir [:0]
					frame [:0]
					moving [:0]
					delay [:0]
			_dm_icon_insert [:0]
				 (icon) [:0]
				 (new_icon) [:0]
				 (icon_state) [:0]
				 (dir) [:0]
				 (frame) [:0]
				 (moving) [:0]
				 (delay) [:0]
		MapColors [:0]
			var [:0]
				.arg [:0]
					a [:0]
					b [:0]
					c [:0]
					d [:0]
					e [:0]
					f [:0]
					g [:0]
					h [:0]
					i [:0]
					j [:0]
						 [:0]
							= [:0]
								 (0) [:0]
					k [:0]
						 [:0]
							= [:0]
								 (0) [:0]
					l [:0]
						 [:0]
							= [:0]
								 (0) [:0]
			if [:0]
				 [:0]
					istext [:0]
						 (a) [:0]
			 [:0]
				if [:0]
					 [:0]
						! [:0]
							 (e) [:0]
				 [:0]
					_dm_icon_map_colors [:0]
						 (icon) [:0]
						 (a) [:0]
						 (b) [:0]
						 (c) [:0]
						 (d) [:0]
				else [:0]
					_dm_icon_map_colors [:0]
						 (icon) [:0]
						 (a) [:0]
						 (b) [:0]
						 (c) [:0]
						 (d) [:0]
						 (e) [:0]
			else [:0]
				if [:0]
					 [:0]
						<= [:0]
							 (args.len) [:0]
							 (12) [:0]
				 [:0]
					_dm_icon_map_colors [:0]
						 (icon) [:0]
						 (a) [:0]
						 (b) [:0]
						 (c) [:0]
						 (d) [:0]
						 (e) [:0]
						 (f) [:0]
						 (g) [:0]
						 (h) [:0]
						 (i) [:0]
						 (j) [:0]
						 (k) [:0]
						 (l) [:0]
				else [:0]
					_dm_icon_map_colors [:0]
						 (icon) [:0]
						 (a) [:0]
						 (b) [:0]
						 (c) [:0]
						 (d) [:0]
						 (e) [:0]
						 (f) [:0]
						 (g) [:0]
						 (h) [:0]
						 (i) [:0]
						 (j) [:0]
						 (k) [:0]
						 (l) [:0]
						 [:0]
							.index (args) [:0]
								 (13) [:0]
						 [:0]
							.index (args) [:0]
								 (14) [:0]
						 [:0]
							.index (args) [:0]
								 (15) [:0]
						 [:0]
							.index (args) [:0]
								 (16) [:0]
						 [:0]
							.index (args) [:0]
								 (17) [:0]
						 [:0]
							.index (args) [:0]
								 (18) [:0]
						 [:0]
							.index (args) [:0]
								 (19) [:0]
						 [:0]
							.index (args) [:0]
								 (20) [:0]
		Scale [:0]
			var [:0]
				.arg [:0]
					x [:0]
					y [:0]
			_dm_icon_scale [:0]
				 (icon) [:0]
				 (x) [:0]
				 (y) [:0]
		Crop [:0]
			var [:0]
				.arg [:0]
					x1 [:0]
					y1 [:0]
					x2 [:0]
					y2 [:0]
			_dm_icon_crop [:0]
				 (icon) [:0]
				 (x1) [:0]
				 (y1) [:0]
				 (x2) [:0]
				 (y2) [:0]
		GetPixel [:0]
			var [:0]
				.arg [:0]
					x [:0]
					y [:0]
					icon_state [:0]
					dir [:0]
					frame [:0]
					moving [:0]
			return [:0]
				_dm_icon_getpixel [:0]
					 (icon) [:0]
					 (x) [:0]
					 (y) [:0]
					 (icon_state) [:0]
					 (dir) [:0]
					 (frame) [:0]
					 (moving) [:0]
	.. (/datum) [Darkside.dme:0]
client [_macros.dm:1]
	var [_macros.dm:2]
		say_mode [_macros.dm:2]
			 [_macros.dm:2]
				= [_macros.dm:2]
					 (0) [_macros.dm:2]
	proc [_macros.dm:4]
		say_mode [_macros.dm:4]
			var [_macros.dm:5]
				.arg [_macros.dm:5]
			= [_macros.dm:5]
				 (say_mode) [_macros.dm:5]
				 [_macros.dm:5]
					! [_macros.dm:5]
						 (say_mode) [_macros.dm:5]
			if [_macros.dm:6]
				 (say_mode) [_macros.dm:6]
			 [_macros.dm:7]
				= [_macros.dm:7]
					 (command_text) [_macros.dm:7]
					 ("say \\\"") [_macros.dm:7]
			else [_macros.dm:8]
				= [_macros.dm:9]
					 (command_text) [_macros.dm:9]
					 (".alt ") [_macros.dm:9]
		Options [Options.dm:18]
			var [Options.dm:19]
				.arg [Options.dm:19]
			if [Options.dm:19]
				 (Started) [Options.dm:19]
			 [Options.dm:19]
				return [Options.dm:19]
			<< [Options.dm:20]
				 (src) [Options.dm:20]
				 [Options.dm:20]
					browse [Options.dm:20]
						 ("\n<HTML>\n<HEAD><TITLE>Options</TITLE></HEAD>\n\n<STYLE TYPE=\"text/css\">\ndiv.big {\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n}\n\ndiv.tabs {\n  font-size: 20px;\n  text-align: center;\n  text-decoration: none;\n}\n\ninput.button {\n  cursor: pointer;\n  width: 250px;\n  background-color: blue;\n  border-color: blue;\n  color: white;\n}\n</STYLE>\n\n<BODY BGCOLOR=black TEXT=white>\n<FORM>\n<DIV CLASS=big>Darkness Falls Options</DIV>\n<DIV CLASS=tabs>\n  Choose your game mode:<BR><BR>\n  <INPUT TYPE=submit CLASS=button NAME=mode VALUE=Slaughter><BR>\n  <INPUT TYPE=submit CLASS=button NAME=mode VALUE=Story><BR>\n</DIV>\n</FORM>\n\n</BODY>\n</HTML>") [Options.dm:57]
						 ("window=options&size=300x250&can_close=0") [Options.dm:57]
		AdvancedMonster [Options.dm:59]
			var [Options.dm:60]
				.arg [Options.dm:60]
					mon [Options.dm:59]
			var [Options.dm:60]
				mob [Options.dm:60]
					Monsters [Options.dm:60]
						M [Options.dm:60]
							 [Options.dm:60]
								= [Options.dm:60]
									new [Options.dm:60]
										 (mon) [Options.dm:60]
			<< [Options.dm:61]
				 (src) [Options.dm:61]
				 [Options.dm:61]
					browse [Options.dm:61]
						 [Options.dm:154]
							text ("\n<HTML>\n<HEAD><TITLE>Options</TITLE></HEAD>\n\n<STYLE TYPE=\"text/css\">\ndiv.big {\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n}\n\ndiv.tabs {\n  font-size: 20px;\n  text-align: center;\n  text-decoration: none;\n}\n\ndiv.content {\n  font-size: 15px;\n  text-align: left;\n  border: 1px solid blue;\n  height: 400;\n  width: 75%;\n  cursor: default;\n}\n\ndiv.invisible {\n  display: none;\n  width: 50%;\n  border: 1px solid blue;\n}\n\na {\n  color: blue;\n}\n\nspan.title {\n  font-size: 20px;\n  font-weight: bold;\n  text-decoration: underline;\n  text-align: center;\n}\n\ninput.button {\n  cursor: pointer;\n  color: white;\n  background-color: blue;\n  border-color: blue;\n}\ninput.radio {\n	cursor: pointer;\n}\ninput.text {\n  border: 1px solid blue;\n  background-color: blue;\n  color: white;\n}\n</STYLE>\n\n<SCRIPT TYPE=\"text/javascript\">\nfunction checkNum(ev,num,max) {\n  var ret=false;\n  var thenum=event.keyCode;\n  if(event.shiftKey){return false;}\n  if(thenum>47 && thenum<58){ret=true;}\n  if(thenum==8){ret=true;}\n  string=String.fromCharCode(thenum);\n  numb=parseInt(num+string);\n  if(numb > max){ret=false;}\n  return ret;\n}\n</SCRIPT>\n\n<BODY BGCOLOR=black TEXT=white>\n<FORM>\n<DIV CLASS=big>Darkness Falls Options</DIV>\n\n<DIV CLASS=tabs>Advanced Monster Options</DIV>\n<SPAN CLASS=title><CENTER>\[]</CENTER></SPAN><BR><BR>\n\n<FORM><INPUT TYPE=hidden NAME=options VALUE=advancedmonster><INPUT TYPE=hidden NAME=monster VALUE='\[]'>\n<TABLE>\n  <TR><TD>Health:</TD><TD><INPUT TYPE=text CLASS=text NAME=health onKeyDown=\"return checkNum(event,this.value,999);\" VALUE=\[]></TD></TR>\n  <TR><TD>Range:</TD><TD><INPUT TYPE=text CLASS=text NAME=range onKeyDown=\"return checkNum(event,this.value,9);\" VALUE=\[]></TD></TR\n  <TR><TD>Armor:</TD><TD><INPUT TYPE=text CLASS=text NAME=armor onKeyDown=\"return checkNum(event,this.value,999);\" VALUE=\[]></TD></TR>\n  <TR><TD>Damage:</TD><TD><INPUT TYPE=text CLASS=text NAME=damage onKeyDown=\"return checkNum(event,this.value,999);\" VALUE=\[]></TD></TR>\n  <TR><TD>Visibility in dark:</TD><TD><INPUT CLASS=text TYPE=text NAME=visibility onKeyDown=\"return checkNum(event,this.value,99);\" VALUE=\[]></TD></TR>\n  <TR><TD>Speed Delay:</TD><TD><INPUT TYPE=text CLASS=text NAME=speed onKeyDown=\"return checkNum(event,this.value,99);\" VALUE=\[]></TD></TR>\n</TABLE>\n<CENTER><INPUT TYPE=submit CLASS=button VALUE=Change> <INPUT TYPE=reset CLASS=button VALUE=Default></CENTER>\n</FORM>\n\n</BODY>\n</HTML>") [Options.dm:154]
								 [Options.dm:154]
									 (M.name) [Options.dm:154]
								 [Options.dm:154]
									 (mon) [Options.dm:154]
								 [Options.dm:154]
									 (M.HealthMax) [Options.dm:154]
								 [Options.dm:154]
									 (M.Range) [Options.dm:154]
								 [Options.dm:154]
									 (M.Armor) [Options.dm:154]
								 [Options.dm:154]
									 (M.HealthMax) [Options.dm:154]
								 [Options.dm:154]
									 (M.HealthMax) [Options.dm:154]
								 [Options.dm:154]
									 (M.Delay) [Options.dm:154]
						 ("window=advancedmonster&size=300x450") [Options.dm:154]
			del [Options.dm:155]
				 (M) [Options.dm:155]
		Slaughter_Options [Options.dm:157]
			var [Options.dm:158]
				.arg [Options.dm:158]
					Load [Options.dm:157]
						 [Options.dm:158]
							= [Options.dm:157]
								 (0) [Options.dm:157]
			= [Options.dm:158]
				 (GamePlay) [Options.dm:158]
				 ("Slaughter") [Options.dm:158]
			var [Options.dm:159]
				weapons [Options.dm:159]
					 [Options.dm:159]
						= [Options.dm:159]
							 ("") [Options.dm:159]
				count [Options.dm:159]
					 [Options.dm:159]
						= [Options.dm:159]
							 (0) [Options.dm:159]
				items [Options.dm:159]
					 [Options.dm:159]
						= [Options.dm:159]
							 ("") [Options.dm:159]
				monsters [Options.dm:159]
					 [Options.dm:159]
						= [Options.dm:159]
							 ("") [Options.dm:159]
			<< [Options.dm:160]
				 (src) [Options.dm:160]
				 [Options.dm:160]
					browse [Options.dm:160]
						 (null) [Options.dm:160]
						 ("window=options") [Options.dm:160]
			_block [Options.dm:162]
				var [Options.dm:162]
					i [Options.dm:162]
				for [Options.dm:162]
					 [Options.dm:162]
						in [Options.dm:162]
							 (i) [Options.dm:162]
							 [Options.dm:162]
								- [Options.dm:162]
									 [Options.dm:162]
										typesof [Options.dm:162]
											 (/obj/Items/Weapons) [Options.dm:162]
									 (/obj/Items/Weapons) [Options.dm:162]
				 [Options.dm:163]
					var [Options.dm:163]
						obj [Options.dm:163]
							Items [Options.dm:163]
								Weapons [Options.dm:163]
									I [Options.dm:163]
										 [Options.dm:163]
											= [Options.dm:163]
												new [Options.dm:163]
													 (i) [Options.dm:163]
					.post++ (count) [Options.dm:163]
					+= [Options.dm:164]
						 (weapons) [Options.dm:164]
						 [Options.dm:164]
							text ("<BR><B><A HREF=# onClick=\\\\\"return doit(\[],this);\\\\\">\[]</A><BR><DIV CLASS=invisible ID='\[]'><B>Allowed</B><BR><INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=1\[]>Yes <INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=0\[]>No<BR><BR><B>Cost</B><BR>$<INPUT TYPE=text CLASS=text NAME='cost-\[]' VALUE=\[] SIZE=6 onKeyDown='return checkNum(event,this.value,999999);'></DIV>") [Options.dm:164]
								 [Options.dm:164]
									 (count) [Options.dm:164]
								 [Options.dm:164]
									 (I.name) [Options.dm:164]
								 [Options.dm:164]
									 (count) [Options.dm:164]
								 [Options.dm:164]
									 (i) [Options.dm:164]
								 [Options.dm:164]
									? [Options.dm:164]
										 [Options.dm:164]
											in [Options.dm:164]
												 (i) [Options.dm:164]
												 (NoWeapons) [Options.dm:164]
										 ("") [Options.dm:164]
										 (" checked") [Options.dm:164]
								 [Options.dm:164]
									 (i) [Options.dm:164]
								 [Options.dm:164]
									? [Options.dm:164]
										 [Options.dm:164]
											in [Options.dm:164]
												 (i) [Options.dm:164]
												 (NoWeapons) [Options.dm:164]
										 (" checked") [Options.dm:164]
										 ("") [Options.dm:164]
								 [Options.dm:164]
									 (i) [Options.dm:164]
								 [Options.dm:164]
									? [Options.dm:164]
										 [Options.dm:164]
											in [Options.dm:164]
												 [Options.dm:164]
													text ("\[]") [Options.dm:164]
														 [Options.dm:164]
															 (i) [Options.dm:164]
												 (WeaponsCost) [Options.dm:164]
										 [Options.dm:164]
											text ("\[]") [Options.dm:164]
												 [Options.dm:164]
													.index (WeaponsCost) [Options.dm:164]
														 [Options.dm:164]
															text ("\[]") [Options.dm:164]
																 [Options.dm:164]
																	 (i) [Options.dm:164]
										 [Options.dm:164]
											text ("\[]") [Options.dm:164]
												 [Options.dm:164]
													 (I.Value) [Options.dm:164]
					= [Options.dm:165]
						 (I) [Options.dm:165]
						 (null) [Options.dm:165]
			= [Options.dm:167]
				 (count) [Options.dm:167]
				 (0) [Options.dm:167]
			_block [Options.dm:168]
				var [Options.dm:168]
					i [Options.dm:168]
				for [Options.dm:168]
					 [Options.dm:168]
						in [Options.dm:168]
							 (i) [Options.dm:168]
							 [Options.dm:168]
								- [Options.dm:168]
									 [Options.dm:168]
										typesof [Options.dm:168]
											 (/obj/Items/Items) [Options.dm:168]
									 (/obj/Items/Items) [Options.dm:168]
				 [Options.dm:169]
					var [Options.dm:169]
						obj [Options.dm:169]
							Items [Options.dm:169]
								Items [Options.dm:169]
									I [Options.dm:169]
										 [Options.dm:169]
											= [Options.dm:169]
												new [Options.dm:169]
													 (i) [Options.dm:169]
					.post++ (count) [Options.dm:169]
					+= [Options.dm:170]
						 (items) [Options.dm:170]
						 [Options.dm:170]
							text ("<BR><B><A HREF=# onClick=\\\\\"return doit(\[],this);\\\\\">\[]</A><BR><DIV CLASS=invisible ID='\[]'><B>Allowed</B><BR><INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=1\[]>Yes <INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=0\[]>No<BR><BR><B>Cost</B><BR>$<INPUT TYPE=text CLASS=text NAME='cost-\[]' VALUE=\[] SIZE=6 onKeyDown='return checkNum(event,this.value,999999);'></DIV>") [Options.dm:170]
								 [Options.dm:170]
									 (count) [Options.dm:170]
								 [Options.dm:170]
									 (I.name) [Options.dm:170]
								 [Options.dm:170]
									 (count) [Options.dm:170]
								 [Options.dm:170]
									 (i) [Options.dm:170]
								 [Options.dm:170]
									? [Options.dm:170]
										 [Options.dm:170]
											in [Options.dm:170]
												 (i) [Options.dm:170]
												 (NoWeapons) [Options.dm:170]
										 ("") [Options.dm:170]
										 (" checked") [Options.dm:170]
								 [Options.dm:170]
									 (i) [Options.dm:170]
								 [Options.dm:170]
									? [Options.dm:170]
										 [Options.dm:170]
											in [Options.dm:170]
												 (i) [Options.dm:170]
												 (NoWeapons) [Options.dm:170]
										 (" checked") [Options.dm:170]
										 ("") [Options.dm:170]
								 [Options.dm:170]
									 (i) [Options.dm:170]
								 [Options.dm:170]
									? [Options.dm:170]
										 [Options.dm:170]
											in [Options.dm:170]
												 [Options.dm:170]
													text ("\[]") [Options.dm:170]
														 [Options.dm:170]
															 (i) [Options.dm:170]
												 (WeaponsCost) [Options.dm:170]
										 [Options.dm:170]
											text ("\[]") [Options.dm:170]
												 [Options.dm:170]
													.index (WeaponsCost) [Options.dm:170]
														 [Options.dm:170]
															text ("\[]") [Options.dm:170]
																 [Options.dm:170]
																	 (i) [Options.dm:170]
										 [Options.dm:170]
											text ("\[]") [Options.dm:170]
												 [Options.dm:170]
													 (I.Value) [Options.dm:170]
			= [Options.dm:172]
				 (count) [Options.dm:172]
				 (0) [Options.dm:172]
			_block [Options.dm:173]
				var [Options.dm:173]
					i [Options.dm:173]
				for [Options.dm:173]
					 [Options.dm:173]
						in [Options.dm:173]
							 (i) [Options.dm:173]
							 [Options.dm:173]
								- [Options.dm:173]
									 [Options.dm:173]
										typesof [Options.dm:173]
											 (/mob/Monsters) [Options.dm:173]
									 (/mob/Monsters) [Options.dm:173]
				 [Options.dm:174]
					var [Options.dm:174]
						mob [Options.dm:174]
							Monsters [Options.dm:174]
								I [Options.dm:174]
									 [Options.dm:174]
										= [Options.dm:174]
											new [Options.dm:174]
												 (i) [Options.dm:174]
					.post++ (count) [Options.dm:174]
					+= [Options.dm:175]
						 (monsters) [Options.dm:175]
						 [Options.dm:175]
							text ("<BR><B><A HREF=# onClick=\\\\\"return doit(\[],this);\\\\\">\[]</A><BR><DIV CLASS=invisible ID='\[]'><B>Allowed</B><BR><INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=1\[]>Yes <INPUT TYPE=radio CLASS=radio NAME='\[]' VALUE=0\[]>No<BR><INPUT TYPE=button CLASS=button onClick=\\\\\"window.location=\\\\'?option=advancedmonster&monster=\[]\\\\';\\\\\" VALUE=\\\\'Advanced Options\\\\'></DIV>") [Options.dm:175]
								 [Options.dm:175]
									 (count) [Options.dm:175]
								 [Options.dm:175]
									 (I.name) [Options.dm:175]
								 [Options.dm:175]
									 (count) [Options.dm:175]
								 [Options.dm:175]
									 (i) [Options.dm:175]
								 [Options.dm:175]
									? [Options.dm:175]
										 [Options.dm:175]
											in [Options.dm:175]
												 (i) [Options.dm:175]
												 (NoMonsters) [Options.dm:175]
										 ("") [Options.dm:175]
										 (" checked") [Options.dm:175]
								 [Options.dm:175]
									 (i) [Options.dm:175]
								 [Options.dm:175]
									? [Options.dm:175]
										 [Options.dm:175]
											in [Options.dm:175]
												 (i) [Options.dm:175]
												 (NoMonsters) [Options.dm:175]
										 (" checked") [Options.dm:175]
										 ("") [Options.dm:175]
								 [Options.dm:175]
									 (i) [Options.dm:175]
			<< [Options.dm:177]
				 (src) [Options.dm:177]
				 [Options.dm:177]
					browse [Options.dm:177]
						 [Options.dm:275]
							text ("\n<HTML>\n<HEAD><TITLE>Options</TITLE></HEAD>\n\n<STYLE TYPE=\"text/css\">\ndiv.big {\n  font-size: 30px;\n  font-weight: bold;\n  text-align: center;\n}\n\ndiv.tabs {\n  font-size: 20px;\n  text-align: center;\n  text-decoration: none;\n}\n\ndiv.content {\n  font-size: 15px;\n  text-align: left;\n  border: 1px solid blue;\n  height: 400;\n  width: 75%;\n  cursor: default;\n}\n\ndiv.invisible {\n  display: none;\n  width: 50%;\n  border: 1px solid blue;\n}\n\na {\n  color: blue;\n}\n\nspan.title {\n  font-size: 20px;\n  font-weight: bold;\n  text-decoration: underline;\n}\n\ninput.button {\n  cursor: pointer;\n  color: white;\n  background-color: blue;\n  border-color: blue;\n}\ninput.radio {\n	cursor: pointer;\n}\ninput.text {\n  border: 1px solid blue;\n  background-color: blue;\n  color: white;\n}\n</STYLE>\n\n<SCRIPT TYPE=\"text/javascript\">\nvar general=\"<FORM><INPUT TYPE=hidden NAME=options VALUE=general><CENTER><SPAN CLASS=title>General</SPAN><BR><BR><B>Difficulty</B><BR><SELECT NAME=difficulty><OPTION VALUE=1\[]>Easy</OPTION><OPTION VALUE=2\[]>Normal</OPTION><OPTION VALUE=3\[]>Hard</OPTION><OPTION VALUE=4\[]>Extreme</OPTION><OPTION VALUE=\[]>Nightmare</OPTION></SELECT><BR><BR><B>Starting Credits</B><BR>$<INPUT TYPE=text CLASS=text NAME=credits VALUE=\[] SIZE=6 onKeyDown=\\\\'return checkNum(event,this.value,999999);\\\\'><BR><BR><B>PK Mode</B><BR><INPUT TYPE=radio CLASS=radio NAME=pk VALUE=1\[]>Yes <INPUT TYPE=radio CLASS=radio NAME=pk VALUE=0\[]>No<BR><BR><B>AutoAim Mode</B><BR><INPUT TYPE=radio CLASS=radio NAME=aa VALUE=1\[]>Yes <INPUT TYPE=radio CLASS=radio NAME=aa VALUE=0\[]>No<BR><BR><B>Max Enemies</B><BR><INPUT TYPE=text CLASS=text NAME=enemies VALUE=\[] SIZE=6 onKeyDown=\\\\'return checkNum(event,this.value,999);\\\\'><BR><BR><BR><INPUT TYPE=submit CLASS=button VALUE=Change> <INPUT TYPE=reset CLASS=button VALUE=Default>\";\nvar weapon=\"<FORM><INPUT TYPE=hidden NAME=options VALUE=weapon><CENTER><SPAN CLASS=title>Weapons</SPAN><BR>\[]<BR><BR><INPUT TYPE=submit CLASS=button VALUE=Change> <INPUT TYPE=reset CLASS=button VALUE=Default>\";\nvar item=\"<FORM><INPUT TYPE=hidden NAME=options VALUE=item><CENTER><SPAN CLASS=title>Items</SPAN><BR>\[]<BR><BR><INPUT TYPE=submit CLASS=button VALUE=Change> <INPUT TYPE=reset CLASS=button VALUE=Default>\";\nvar monster=\"<FORM><INPUT TYPE=hidden NAME=options VALUE=monster><CENTER><SPAN CLASS=title>Monsters</SPAN><BR>\[]<BR><BR><INPUT TYPE=submit CLASS=button VALUE=Change> <INPUT TYPE=reset CLASS=button VALUE=Default>\";\n\nfunction doit(num,e) {\n  var info=document.getElementById(num);\n  if(info.style.display==\"block\") {info.style.display=\"none\";}\n  else {info.style.display=\"block\";}\n}\n\nfunction change(n) {\n  var cont=document.getElementById(\"content\");\n  if(n==1){cont.innerHTML=weapon;}\n  else if(n==2){cont.innerHTML=item;}\n  else if(n==3){cont.innerHTML=monster;}\n  else {cont.innerHTML=general;}\n  return false;\n}\n\nfunction checkNum(ev,num,max) {\n  var ret=false;\n  var thenum=event.keyCode;\n  if(event.shiftKey){return false;}\n  if(thenum>47 && thenum<58){ret=true;}\n  if(thenum==8){ret=true;}\n  string=String.fromCharCode(thenum);\n  numb=parseInt(num+string);\n  if(numb > max){ret=false;}\n  return ret;\n}\n</SCRIPT>\n\n<BODY BGCOLOR=black TEXT=white onLoad=\"change(\[]);\">\n\n<DIV CLASS=big>Darkness Falls Options</DIV>\n<DIV CLASS=tabs><FONT FACE='Comic Sans MS'>Slaughter Mode</FONT FACE><BR><A HREF=# onClick=\"return change(0);\">General</A>, <A HREF=# onClick=\"return change(1);\">Weapons</A>, <A HREF=# onClick=\"return change(2);\">Items</A>, <A HREF=# onClick=\"return change(3);\">Monsters</A></DIV>\n<BR>\n<CENTER><DIV ID=content CLASS=content> </DIV></CENTER>\n") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 [Options.dm:275]
											== [Options.dm:275]
												 (Hardness) [Options.dm:275]
												 (1) [Options.dm:275]
										 (" selected") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 [Options.dm:275]
											== [Options.dm:275]
												 (Hardness) [Options.dm:275]
												 (2) [Options.dm:275]
										 (" selected") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 [Options.dm:275]
											== [Options.dm:275]
												 (Hardness) [Options.dm:275]
												 (3) [Options.dm:275]
										 (" selected") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 [Options.dm:275]
											== [Options.dm:275]
												 (Hardness) [Options.dm:275]
												 (4) [Options.dm:275]
										 (" selected") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 [Options.dm:275]
											== [Options.dm:275]
												 (Hardness) [Options.dm:275]
												 (5) [Options.dm:275]
										 (" selected") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									num2text [Options.dm:275]
										 (SCredit) [Options.dm:275]
										 (100) [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 (PKMode) [Options.dm:275]
										 (" checked") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 (PKMode) [Options.dm:275]
										 ("") [Options.dm:275]
										 (" checked") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 (AAAllowed) [Options.dm:275]
										 (" checked") [Options.dm:275]
										 ("") [Options.dm:275]
								 [Options.dm:275]
									? [Options.dm:275]
										 (AAAllowed) [Options.dm:275]
										 ("") [Options.dm:275]
										 (" checked") [Options.dm:275]
								 [Options.dm:275]
									num2text [Options.dm:275]
										 (MobMax) [Options.dm:275]
										 (15) [Options.dm:275]
								 [Options.dm:275]
									 (weapons) [Options.dm:275]
								 [Options.dm:275]
									 (items) [Options.dm:275]
								 [Options.dm:275]
									 (monsters) [Options.dm:275]
								 [Options.dm:275]
									 (Load) [Options.dm:275]
						 ("window=options&size=500x650&can_close=0&can_resize=0") [Options.dm:275]
	verb [_macros.dm:11]
		callCommand [_macros.dm:12]
			var [_macros.dm:13]
				.arg [_macros.dm:13]
					com [_macros.dm:12]
						 [_macros.dm:13]
							as [_macros.dm:12]
								 (4) [_macros.dm:12]
			set [_macros.dm:13]
				= [_macros.dm:13]
					 (hidden) [_macros.dm:13]
					 (1) [_macros.dm:13]
			var [_macros.dm:14]
				mob [_macros.dm:14]
					Player [_macros.dm:14]
						P [_macros.dm:14]
							 [_macros.dm:14]
								= [_macros.dm:14]
									 (mob) [_macros.dm:14]
			switch [_macros.dm:15]
				 (com) [_macros.dm:15]
			 [_macros.dm:16]
				if [_macros.dm:16]
					 ("north") [_macros.dm:16]
				 [_macros.dm:16]
					.call (North) [_macros.dm:16]
				if [_macros.dm:17]
					 ("south") [_macros.dm:17]
				 [_macros.dm:17]
					.call (South) [_macros.dm:17]
				if [_macros.dm:18]
					 ("east") [_macros.dm:18]
				 [_macros.dm:18]
					.call (East) [_macros.dm:18]
				if [_macros.dm:19]
					 ("west") [_macros.dm:19]
				 [_macros.dm:19]
					.call (West) [_macros.dm:19]
				if [_macros.dm:20]
					 ("northeast") [_macros.dm:20]
				 [_macros.dm:20]
					.call (Northeast) [_macros.dm:20]
				if [_macros.dm:21]
					 ("northwest") [_macros.dm:21]
				 [_macros.dm:21]
					.call (Northwest) [_macros.dm:21]
				if [_macros.dm:22]
					 ("southeast") [_macros.dm:22]
				 [_macros.dm:22]
					.call (Southeast) [_macros.dm:22]
				if [_macros.dm:23]
					 ("southwest") [_macros.dm:23]
				 [_macros.dm:23]
					.call (Southwest) [_macros.dm:23]
				if [_macros.dm:25]
					 ("/") [_macros.dm:25]
				 [_macros.dm:25]
					.call (P.ScrollRight) [_macros.dm:25]
				if [_macros.dm:26]
					 ("-") [_macros.dm:26]
				 [_macros.dm:26]
					.call (P.InvMode) [_macros.dm:26]
				if [_macros.dm:27]
					 ("space") [_macros.dm:27]
				 [_macros.dm:27]
					.call (say_mode) [_macros.dm:27]
				if [_macros.dm:28]
					 ("+") [_macros.dm:28]
				 [_macros.dm:28]
					.call (P.Light) [_macros.dm:28]
				if [_macros.dm:29]
					 (">") [_macros.dm:29]
				 [_macros.dm:29]
					.call (P.Drop) [_macros.dm:29]
		MapTest [_macros.dm:31]
			var [_macros.dm:32]
				.arg [_macros.dm:32]
					X [_macros.dm:31]
						 [_macros.dm:32]
							as [_macros.dm:31]
								 (8) [_macros.dm:31]
			set [_macros.dm:32]
				= [_macros.dm:32]
					 (hidden) [_macros.dm:32]
					 (1) [_macros.dm:32]
			= [_macros.dm:33]
				 (Map) [_macros.dm:33]
				 (X) [_macros.dm:33]
			_block [_macros.dm:34]
				var [_macros.dm:34]
					mob [_macros.dm:34]
						Player [_macros.dm:34]
							I [_macros.dm:34]
				for [_macros.dm:34]
					 [_macros.dm:34]
						in [_macros.dm:34]
							 (I) [_macros.dm:34]
							 (world) [_macros.dm:34]
				 [_macros.dm:35]
					if [_macros.dm:35]
						 [_macros.dm:35]
							> [_macros.dm:35]
								 (I.Health) [_macros.dm:35]
								 (0) [_macros.dm:35]
					 [_macros.dm:36]
						.call (I.Move) [_macros.dm:36]
							 [_macros.dm:36]
								locate [_macros.dm:36]
									 [_macros.dm:36]
										text ("Starting Area \[]") [_macros.dm:36]
											 [_macros.dm:36]
												 (X) [_macros.dm:36]
						.call (Spawner) [_macros.dm:37]
		say [Player and Weapons.dm:428]
			var [Player and Weapons.dm:429]
				.arg [Player and Weapons.dm:429]
					M [Player and Weapons.dm:428]
						 [Player and Weapons.dm:429]
							as [Player and Weapons.dm:428]
								 (2048) [Player and Weapons.dm:428]
			set [Player and Weapons.dm:429]
				= [Player and Weapons.dm:429]
					 (hidden) [Player and Weapons.dm:429]
					 (1) [Player and Weapons.dm:429]
			<< [Player and Weapons.dm:430]
				 (world) [Player and Weapons.dm:430]
				 [Player and Weapons.dm:430]
					text ("\[] says: \[]") [Player and Weapons.dm:430]
						 [Player and Weapons.dm:430]
							 (src) [Player and Weapons.dm:430]
						 [Player and Weapons.dm:430]
							 (M) [Player and Weapons.dm:430]
		Send [Player and Weapons.dm:454]
			var [Player and Weapons.dm:455]
				.arg [Player and Weapons.dm:455]
					F [Player and Weapons.dm:454]
						 [Player and Weapons.dm:455]
							as [Player and Weapons.dm:454]
								 (16) [Player and Weapons.dm:454]
					M [Player and Weapons.dm:454]
						 [Player and Weapons.dm:455]
							as [Player and Weapons.dm:454]
								 (1) [Player and Weapons.dm:454]
							in [Player and Weapons.dm:454]
								 (world) [Player and Weapons.dm:454]
			set [Player and Weapons.dm:455]
				= [Player and Weapons.dm:455]
					 (hidden) [Player and Weapons.dm:455]
					 (1) [Player and Weapons.dm:455]
			<< [Player and Weapons.dm:456]
				 (M) [Player and Weapons.dm:456]
				 [Player and Weapons.dm:456]
					ftp [Player and Weapons.dm:456]
						 (F) [Player and Weapons.dm:456]
	Topic [Options.dm:280]
		var [Options.dm:281]
			.arg [Options.dm:281]
				href [Options.dm:280]
				list [Options.dm:280]
					hrefl [Options.dm:281]
		if [Options.dm:281]
			 [Options.dm:281]
				== [Options.dm:281]
					 [Options.dm:281]
						.index (hrefl) [Options.dm:281]
							 ("option") [Options.dm:281]
					 ("advancedmonster") [Options.dm:281]
		 [Options.dm:281]
			.call (AdvancedMonster) [Options.dm:281]
				 [Options.dm:281]
					text2path [Options.dm:281]
						 [Options.dm:281]
							.index (hrefl) [Options.dm:281]
								 ("monster") [Options.dm:281]
		if [Options.dm:282]
			 [Options.dm:282]
				.index (hrefl) [Options.dm:282]
					 ("mode") [Options.dm:282]
		 [Options.dm:283]
			switch [Options.dm:283]
				 [Options.dm:283]
					.index (hrefl) [Options.dm:283]
						 ("mode") [Options.dm:283]
			 [Options.dm:284]
				if [Options.dm:284]
					 ("Slaughter") [Options.dm:284]
				 [Options.dm:284]
					.call (Slaughter_Options) [Options.dm:284]
		if [Options.dm:285]
			 [Options.dm:285]
				.index (hrefl) [Options.dm:285]
					 ("options") [Options.dm:285]
		 [Options.dm:286]
			var [Options.dm:286]
				Load [Options.dm:286]
					 [Options.dm:286]
						= [Options.dm:286]
							 (0) [Options.dm:286]
			switch [Options.dm:287]
				 [Options.dm:287]
					.index (hrefl) [Options.dm:287]
						 ("options") [Options.dm:287]
			 [Options.dm:288]
				if [Options.dm:288]
					 ("general") [Options.dm:288]
				 [Options.dm:289]
					var [Options.dm:289]
						list [Options.dm:289]
							values [Options.dm:289]
								 [Options.dm:289]
									= [Options.dm:289]
										list [Options.dm:289]
											 ("difficulty") [Options.dm:289]
											 ("credits") [Options.dm:289]
											 ("pk") [Options.dm:289]
											 ("aa") [Options.dm:289]
											 ("enemies") [Options.dm:289]
					_block [Options.dm:290]
						var [Options.dm:290]
							i [Options.dm:290]
						for [Options.dm:290]
							 [Options.dm:290]
								in [Options.dm:290]
									 (i) [Options.dm:290]
									 (values) [Options.dm:290]
						 [Options.dm:290]
							= [Options.dm:290]
								 [Options.dm:290]
									.index (values) [Options.dm:290]
										 (i) [Options.dm:290]
								 [Options.dm:290]
									.index (hrefl) [Options.dm:290]
										 (i) [Options.dm:290]
					= [Options.dm:292]
						 (Hardness) [Options.dm:292]
						 [Options.dm:292]
							text2num [Options.dm:292]
								 [Options.dm:292]
									.index (values) [Options.dm:292]
										 ("difficulty") [Options.dm:292]
					= [Options.dm:293]
						 (SCredit) [Options.dm:293]
						 [Options.dm:293]
							text2num [Options.dm:293]
								 [Options.dm:293]
									.index (values) [Options.dm:293]
										 ("credits") [Options.dm:293]
					= [Options.dm:294]
						 (PKMode) [Options.dm:294]
						 [Options.dm:294]
							text2num [Options.dm:294]
								 [Options.dm:294]
									.index (values) [Options.dm:294]
										 ("pk") [Options.dm:294]
					= [Options.dm:295]
						 (AAAllowed) [Options.dm:295]
						 [Options.dm:295]
							text2num [Options.dm:295]
								 [Options.dm:295]
									.index (values) [Options.dm:295]
										 ("aa") [Options.dm:295]
					= [Options.dm:296]
						 (MobMax) [Options.dm:296]
						 [Options.dm:296]
							text2num [Options.dm:296]
								 [Options.dm:296]
									.index (values) [Options.dm:296]
										 ("enemies") [Options.dm:296]
				if [Options.dm:297]
					 ("weapon") [Options.dm:297]
				 [Options.dm:298]
					_block [Options.dm:298]
						var [Options.dm:298]
							i [Options.dm:298]
						for [Options.dm:298]
							 [Options.dm:298]
								in [Options.dm:298]
									 (i) [Options.dm:298]
									 [Options.dm:298]
										- [Options.dm:298]
											 [Options.dm:298]
												typesof [Options.dm:298]
													 (/obj/Items/Weapons) [Options.dm:298]
											 (/obj/Items/Weapons) [Options.dm:298]
						 [Options.dm:299]
							if [Options.dm:299]
								 [Options.dm:299]
									== [Options.dm:299]
										 [Options.dm:299]
											.index (hrefl) [Options.dm:299]
												 [Options.dm:299]
													text ("\[]") [Options.dm:299]
														 [Options.dm:299]
															 (i) [Options.dm:299]
										 ("0") [Options.dm:299]
							 [Options.dm:299]
								+= [Options.dm:299]
									 (NoWeapons) [Options.dm:299]
									 (i) [Options.dm:299]
							if [Options.dm:300]
								 [Options.dm:300]
									.index (hrefl) [Options.dm:300]
										 [Options.dm:300]
											text ("cost-\[]") [Options.dm:300]
												 [Options.dm:300]
													 (i) [Options.dm:300]
							 [Options.dm:300]
								= [Options.dm:300]
									 [Options.dm:300]
										.index (WeaponsCost) [Options.dm:300]
											 [Options.dm:300]
												text ("\[]") [Options.dm:300]
													 [Options.dm:300]
														 (i) [Options.dm:300]
									 [Options.dm:300]
										text2num [Options.dm:300]
											 [Options.dm:300]
												.index (hrefl) [Options.dm:300]
													 [Options.dm:300]
														text ("cost-\[]") [Options.dm:300]
															 [Options.dm:300]
																 (i) [Options.dm:300]
					= [Options.dm:301]
						 (Load) [Options.dm:301]
						 (1) [Options.dm:301]
				if [Options.dm:302]
					 ("item") [Options.dm:302]
				 [Options.dm:303]
					_block [Options.dm:303]
						var [Options.dm:303]
							i [Options.dm:303]
						for [Options.dm:303]
							 [Options.dm:303]
								in [Options.dm:303]
									 (i) [Options.dm:303]
									 [Options.dm:303]
										- [Options.dm:303]
											 [Options.dm:303]
												typesof [Options.dm:303]
													 (/obj/Items/Items) [Options.dm:303]
											 (/obj/Items/Items) [Options.dm:303]
						 [Options.dm:304]
							if [Options.dm:304]
								 [Options.dm:304]
									== [Options.dm:304]
										 [Options.dm:304]
											.index (hrefl) [Options.dm:304]
												 [Options.dm:304]
													text ("\[]") [Options.dm:304]
														 [Options.dm:304]
															 (i) [Options.dm:304]
										 ("0") [Options.dm:304]
							 [Options.dm:304]
								+= [Options.dm:304]
									 (NoWeapons) [Options.dm:304]
									 (i) [Options.dm:304]
							if [Options.dm:305]
								 [Options.dm:305]
									.index (hrefl) [Options.dm:305]
										 [Options.dm:305]
											text ("cost-\[]") [Options.dm:305]
												 [Options.dm:305]
													 (i) [Options.dm:305]
							 [Options.dm:305]
								= [Options.dm:305]
									 [Options.dm:305]
										.index (WeaponsCost) [Options.dm:305]
											 [Options.dm:305]
												text ("\[]") [Options.dm:305]
													 [Options.dm:305]
														 (i) [Options.dm:305]
									 [Options.dm:305]
										text2num [Options.dm:305]
											 [Options.dm:305]
												.index (hrefl) [Options.dm:305]
													 [Options.dm:305]
														text ("cost-\[]") [Options.dm:305]
															 [Options.dm:305]
																 (i) [Options.dm:305]
					= [Options.dm:306]
						 (Load) [Options.dm:306]
						 (2) [Options.dm:306]
				if [Options.dm:307]
					 ("monster") [Options.dm:307]
				 [Options.dm:308]
					_block [Options.dm:308]
						var [Options.dm:308]
							i [Options.dm:308]
						for [Options.dm:308]
							 [Options.dm:308]
								in [Options.dm:308]
									 (i) [Options.dm:308]
									 [Options.dm:308]
										- [Options.dm:308]
											 [Options.dm:308]
												typesof [Options.dm:308]
													 (/mob/Monsters) [Options.dm:308]
											 (/mob/Monsters) [Options.dm:308]
						 [Options.dm:309]
							if [Options.dm:309]
								 [Options.dm:309]
									== [Options.dm:309]
										 [Options.dm:309]
											.index (hrefl) [Options.dm:309]
												 [Options.dm:309]
													text ("\[]") [Options.dm:309]
														 [Options.dm:309]
															 (i) [Options.dm:309]
										 ("0") [Options.dm:309]
							 [Options.dm:309]
								+= [Options.dm:309]
									 (NoMonsters) [Options.dm:309]
									 (i) [Options.dm:309]
					= [Options.dm:310]
						 (Load) [Options.dm:310]
						 (3) [Options.dm:310]
			switch [Options.dm:311]
				 (GamePlay) [Options.dm:311]
			 [Options.dm:312]
				if [Options.dm:312]
					 ("Story") [Options.dm:312]
				 [Options.dm:312]
					.call (Options) [Options.dm:312]
				if [Options.dm:313]
					 ("Slaughter") [Options.dm:313]
				 [Options.dm:313]
					.call (Slaughter_Options) [Options.dm:313]
						 (Load) [Options.dm:313]
		.call (..) [Options.dm:314]
	Topic [Options.dm:317]
		var [Options.dm:318]
			.arg [Options.dm:318]
				H [Options.dm:317]
				list [Options.dm:317]
					L [Options.dm:318]
		if [Options.dm:318]
			 [Options.dm:318]
				&& [Options.dm:318]
					 [Options.dm:318]
						== [Options.dm:318]
							 [Options.dm:318]
								.index (L) [Options.dm:318]
									 ("options") [Options.dm:318]
							 ("1") [Options.dm:318]
					 [Options.dm:318]
						! [Options.dm:318]
							 (Started) [Options.dm:318]
		 [Options.dm:319]
			= [Options.dm:319]
				 (GamePlay) [Options.dm:319]
				 [Options.dm:319]
					.index (L) [Options.dm:319]
						 ("mode") [Options.dm:319]
			= [Options.dm:320]
				 (Hardness) [Options.dm:320]
				 [Options.dm:320]
					text2num [Options.dm:320]
						 [Options.dm:320]
							.index (L) [Options.dm:320]
								 ("difficulty") [Options.dm:320]
			= [Options.dm:321]
				 (SCredit) [Options.dm:321]
				 [Options.dm:321]
					text2num [Options.dm:321]
						 [Options.dm:321]
							.index (L) [Options.dm:321]
								 ("credits") [Options.dm:321]
			= [Options.dm:322]
				 (PKMode) [Options.dm:322]
				 [Options.dm:322]
					text2num [Options.dm:322]
						 [Options.dm:322]
							.index (L) [Options.dm:322]
								 ("pk") [Options.dm:322]
			= [Options.dm:323]
				 (AAAllowed) [Options.dm:323]
				 [Options.dm:323]
					text2num [Options.dm:323]
						 [Options.dm:323]
							.index (L) [Options.dm:323]
								 ("autoaim") [Options.dm:323]
			= [Options.dm:324]
				 (MobMax) [Options.dm:324]
				 [Options.dm:324]
					text2num [Options.dm:324]
						 [Options.dm:324]
							.index (L) [Options.dm:324]
								 ("maxenimies") [Options.dm:324]
			<< [Options.dm:325]
				 (world) [Options.dm:325]
				 ("<font color=blue><b>The options have been set. Game will start in 30 seconds.!") [Options.dm:325]
			<< [Options.dm:326]
				 (usr) [Options.dm:326]
				 [Options.dm:326]
					browse [Options.dm:326]
						 (null) [Options.dm:326]
						 ("window=options") [Options.dm:326]
			spawn [Options.dm:328]
				 (300) [Options.dm:328]
			 [Options.dm:329]
				= [Options.dm:329]
					 (Started) [Options.dm:329]
					 (1) [Options.dm:329]
				if [Options.dm:331]
					 [Options.dm:331]
						== [Options.dm:331]
							 (GamePlay) [Options.dm:331]
							 ("Slaughter") [Options.dm:331]
				 [Options.dm:332]
					.call (QuickSetups) [Options.dm:332]
					= [Options.dm:333]
						 (Map) [Options.dm:333]
						 (1) [Options.dm:333]
					<< [Options.dm:334]
						 (world) [Options.dm:334]
						 ("<font color = blue>Slaughter Mode: Kill everything you come across in a frantic battle to beat the clock. If too many creatures populate the area it'll be nuked. Credits are earned at the start of each enemy wave, however each wave will come faster then the last. Good Luck.</font>") [Options.dm:334]
					spawn [Options.dm:335]
						 (100) [Options.dm:335]
					 [Options.dm:335]
						.call (SlaughterSpawner) [Options.dm:335]
				_block [Options.dm:337]
					var [Options.dm:337]
						mob [Options.dm:337]
							Player [Options.dm:337]
								X [Options.dm:337]
					for [Options.dm:337]
						 [Options.dm:337]
							in [Options.dm:337]
								 (X) [Options.dm:337]
								 (world) [Options.dm:337]
					 [Options.dm:338]
						if [Options.dm:338]
							 [Options.dm:338]
								in [Options.dm:338]
									 (X) [Options.dm:338]
									 (PlayerList) [Options.dm:338]
						 [Options.dm:339]
							= [Options.dm:339]
								 (X.density) [Options.dm:339]
								 (0) [Options.dm:339]
							= [Options.dm:340]
								 (X.loc) [Options.dm:340]
								 [Options.dm:340]
									locate [Options.dm:340]
										 [Options.dm:340]
											text ("Starting Area \[]") [Options.dm:340]
												 [Options.dm:340]
													 (Map) [Options.dm:340]
							= [Options.dm:341]
								 (X.density) [Options.dm:341]
								 (1) [Options.dm:341]
							= [Options.dm:342]
								 (X.Credits) [Options.dm:342]
								 (SCredit) [Options.dm:342]
							.post++ (Players) [Options.dm:343]
						else [Options.dm:344]
							var [Options.dm:345]
								mob [Options.dm:345]
									O [Options.dm:345]
										 [Options.dm:345]
											= [Options.dm:345]
												 (X) [Options.dm:345]
							var [Options.dm:346]
								mob [Options.dm:346]
									Observer [Options.dm:346]
										Y [Options.dm:346]
											 [Options.dm:346]
												= [Options.dm:346]
													new [Options.dm:346]
														 [Options.dm:346]
														 [Options.dm:346]
															locate [Options.dm:346]
																 [Options.dm:346]
																	text ("Starting Area \[]") [Options.dm:346]
																		 [Options.dm:346]
																			 (Map) [Options.dm:346]
							= [Options.dm:347]
								 (X.client/:/mob) [Options.dm:347]
								 (Y) [Options.dm:347]
							= [Options.dm:347]
								 (Y.name) [Options.dm:347]
								 (O.name) [Options.dm:347]
							del [Options.dm:348]
								 (O) [Options.dm:348]
		else [Options.dm:350]
			if [Options.dm:350]
				 [Options.dm:350]
					&& [Options.dm:350]
						 [Options.dm:350]
							== [Options.dm:350]
								 [Options.dm:350]
									.index (L) [Options.dm:350]
										 ("options") [Options.dm:350]
								 ("2") [Options.dm:350]
						 (Started) [Options.dm:350]
			 [Options.dm:351]
				= [Options.dm:351]
					 (playerz) [Options.dm:351]
					 [Options.dm:351]
						text2num [Options.dm:351]
							 [Options.dm:351]
								.index (L) [Options.dm:351]
									 ("max") [Options.dm:351]
				= [Options.dm:352]
					 (locked) [Options.dm:352]
					 [Options.dm:352]
						text2num [Options.dm:352]
							 [Options.dm:352]
								.index (L) [Options.dm:352]
									 ("lock") [Options.dm:352]
				<< [Options.dm:353]
					 (usr) [Options.dm:353]
					 ("<font color=blue><b>Changed options.") [Options.dm:353]
				<< [Options.dm:354]
					 (usr) [Options.dm:354]
					 [Options.dm:354]
						browse [Options.dm:354]
							 (null) [Options.dm:354]
							 ("window=options") [Options.dm:354]
		.call (..) [Options.dm:355]
	= [Player and Weapons.dm:431]
		 (show_verb_panel) [Player and Weapons.dm:431]
		 (0) [Player and Weapons.dm:431]
	= [Player and Weapons.dm:432]
		 (command_text) [Player and Weapons.dm:432]
		 (".alt ") [Player and Weapons.dm:432]
	= [Player and Weapons.dm:434]
		 (mouse_pointer_icon) [Player and Weapons.dm:434]
		 ('Mouse.dmi') [Player and Weapons.dm:434]
	MouseEntered [Player and Weapons.dm:436]
		var [Player and Weapons.dm:437]
			.arg [Player and Weapons.dm:437]
				atom [Player and Weapons.dm:436]
					X [Player and Weapons.dm:436]
		= [Player and Weapons.dm:437]
			 (src.mob/:/dir) [Player and Weapons.dm:437]
			 [Player and Weapons.dm:437]
				get_dir [Player and Weapons.dm:437]
					 (src.mob) [Player and Weapons.dm:437]
					 (X) [Player and Weapons.dm:437]
	MouseExited [Player and Weapons.dm:438]
		var [Player and Weapons.dm:439]
			.arg [Player and Weapons.dm:439]
				atom [Player and Weapons.dm:438]
					X [Player and Weapons.dm:438]
		= [Player and Weapons.dm:439]
			 (src.mob/:/dir) [Player and Weapons.dm:439]
			 [Player and Weapons.dm:439]
				get_dir [Player and Weapons.dm:439]
					 (src.mob) [Player and Weapons.dm:439]
					 (X) [Player and Weapons.dm:439]
	MouseDrag [Player and Weapons.dm:440]
		var [Player and Weapons.dm:440]
			.arg [Player and Weapons.dm:440]
				atom [Player and Weapons.dm:440]
					X [Player and Weapons.dm:440]
				atom [Player and Weapons.dm:440]
					Y [Player and Weapons.dm:440]
				atom [Player and Weapons.dm:440]
					Z [Player and Weapons.dm:440]
		if [Player and Weapons.dm:440]
			 [Player and Weapons.dm:440]
				&& [Player and Weapons.dm:440]
					 [Player and Weapons.dm:440]
						istype [Player and Weapons.dm:440]
							 (usr) [Player and Weapons.dm:440]
							 (/mob/Player) [Player and Weapons.dm:440]
					 [Player and Weapons.dm:440]
						! [Player and Weapons.dm:440]
							isnull [Player and Weapons.dm:440]
								 (X) [Player and Weapons.dm:440]
		 [Player and Weapons.dm:441]
			if [Player and Weapons.dm:441]
				 [Player and Weapons.dm:441]
					&& [Player and Weapons.dm:441]
						 [Player and Weapons.dm:441]
							isobj [Player and Weapons.dm:441]
								 (X) [Player and Weapons.dm:441]
						 (X.Draggible) [Player and Weapons.dm:441]
						 [Player and Weapons.dm:441]
							== [Player and Weapons.dm:441]
								 [Player and Weapons.dm:441]
									get_dist [Player and Weapons.dm:441]
										 (X) [Player and Weapons.dm:441]
										 (src.mob) [Player and Weapons.dm:441]
								 (1) [Player and Weapons.dm:441]
			 [Player and Weapons.dm:442]
				step_towards [Player and Weapons.dm:442]
					 (X) [Player and Weapons.dm:442]
					 (Y) [Player and Weapons.dm:442]
			if [Player and Weapons.dm:443]
				 [Player and Weapons.dm:443]
					isturf [Player and Weapons.dm:443]
						 (Y) [Player and Weapons.dm:443]
			 [Player and Weapons.dm:443]
				= [Player and Weapons.dm:443]
					 (src.mob/:/Target) [Player and Weapons.dm:443]
					 (Y) [Player and Weapons.dm:443]
			else [Player and Weapons.dm:444]
				if [Player and Weapons.dm:444]
					 [Player and Weapons.dm:444]
						! [Player and Weapons.dm:444]
							isnull [Player and Weapons.dm:444]
								 (Y) [Player and Weapons.dm:444]
				 [Player and Weapons.dm:444]
					= [Player and Weapons.dm:444]
						 (src.mob/:/Target) [Player and Weapons.dm:444]
						 (Y.loc) [Player and Weapons.dm:444]
			= [Player and Weapons.dm:445]
				 (src.mob/:/dir) [Player and Weapons.dm:445]
				 [Player and Weapons.dm:445]
					get_dir [Player and Weapons.dm:445]
						 (src.mob) [Player and Weapons.dm:445]
						 (Y) [Player and Weapons.dm:445]
	New [Player and Weapons.dm:446]
		var [Player and Weapons.dm:447]
			.arg [Player and Weapons.dm:447]
		.call (..) [Player and Weapons.dm:447]
		<< [Player and Weapons.dm:448]
			 (src) [Player and Weapons.dm:448]
			 [Player and Weapons.dm:448]
				sound [Player and Weapons.dm:448]
					 ('devil.mid') [Player and Weapons.dm:448]
					 (1) [Player and Weapons.dm:448]
		if [Player and Weapons.dm:449]
			 [Player and Weapons.dm:449]
				! [Player and Weapons.dm:449]
					 (src.address) [Player and Weapons.dm:449]
		 [Player and Weapons.dm:449]
			.call (src.Options) [Player and Weapons.dm:449]
	Del [Player and Weapons.dm:450]
		var [Player and Weapons.dm:451]
			.arg [Player and Weapons.dm:451]
		<< [Player and Weapons.dm:451]
			 (world) [Player and Weapons.dm:451]
			 [Player and Weapons.dm:451]
				text ("<small>\[] has logged out.</small>") [Player and Weapons.dm:451]
					 [Player and Weapons.dm:451]
						 (src) [Player and Weapons.dm:451]
		del [Player and Weapons.dm:452]
			 (src.mob) [Player and Weapons.dm:452]
		.call (..) [Player and Weapons.dm:452]
	Stat [Player and Weapons.dm:458]
		var [Player and Weapons.dm:459]
			.arg [Player and Weapons.dm:459]
		if [Player and Weapons.dm:459]
			 [Player and Weapons.dm:459]
				! [Player and Weapons.dm:459]
					 (Started) [Player and Weapons.dm:459]
		 [Player and Weapons.dm:460]
			statpanel [Player and Weapons.dm:460]
				 ("Game Settings") [Player and Weapons.dm:460]
			stat [Player and Weapons.dm:461]
				 ("Gameplay") [Player and Weapons.dm:461]
				 (GamePlay) [Player and Weapons.dm:461]
			stat [Player and Weapons.dm:462]
				 ("Difficulty Level") [Player and Weapons.dm:462]
				 (Hardness) [Player and Weapons.dm:462]
			stat [Player and Weapons.dm:463]
				 ("Starting Credits") [Player and Weapons.dm:463]
				 (SCredit) [Player and Weapons.dm:463]
			stat [Player and Weapons.dm:464]
				 ("Pk Mode On") [Player and Weapons.dm:464]
				 (PKMode) [Player and Weapons.dm:464]
			stat [Player and Weapons.dm:465]
				 ("Auto Aim Active") [Player and Weapons.dm:465]
				 (AAAllowed) [Player and Weapons.dm:465]
			stat [Player and Weapons.dm:466]
				 ("Current Players") [Player and Weapons.dm:466]
				 [Player and Weapons.dm:466]
					length [Player and Weapons.dm:466]
						 (PlayerList) [Player and Weapons.dm:466]
			stat [Player and Weapons.dm:467]
				 ("Current Observers") [Player and Weapons.dm:467]
				 [Player and Weapons.dm:467]
					length [Player and Weapons.dm:467]
						 (ObserverList) [Player and Weapons.dm:467]
			stat [Player and Weapons.dm:468]
				 ("Max Mob / Level") [Player and Weapons.dm:468]
				 (MobMax) [Player and Weapons.dm:468]
			statpanel [Player and Weapons.dm:469]
				 ("Players") [Player and Weapons.dm:469]
			stat [Player and Weapons.dm:470]
				 (PlayerList) [Player and Weapons.dm:470]
var [Darkside.dm:16]
	Map [Darkside.dm:22]
		 [Darkside.dm:22]
			= [Darkside.dm:22]
				 (1) [Darkside.dm:22]
	MobCount [Darkside.dm:23]
		 [Darkside.dm:23]
			= [Darkside.dm:23]
				 (0) [Darkside.dm:23]
	Players [Darkside.dm:25]
		 [Darkside.dm:25]
			= [Darkside.dm:25]
				 (0) [Darkside.dm:25]
	PlayerList [Darkside.dm:26]
		 [Darkside.dm:26]
			= [Darkside.dm:26]
				list [Darkside.dm:26]
	Observers [Darkside.dm:27]
		 [Darkside.dm:27]
			= [Darkside.dm:27]
				 (0) [Darkside.dm:27]
	ObserverList [Darkside.dm:28]
		 [Darkside.dm:28]
			= [Darkside.dm:28]
				list [Darkside.dm:28]
	Missed [Darkside.dm:29]
		 [Darkside.dm:29]
			= [Darkside.dm:29]
				 (0) [Darkside.dm:29]
	Kills [Darkside.dm:30]
		 [Darkside.dm:30]
			= [Darkside.dm:30]
				 (0) [Darkside.dm:30]
	SpawnSpeed [Darkside.dm:33]
		 [Darkside.dm:33]
			= [Darkside.dm:33]
				 (600) [Darkside.dm:33]
	WaveCount [Darkside.dm:34]
		 [Darkside.dm:34]
			= [Darkside.dm:34]
				 (1) [Darkside.dm:34]
	WaveMoney [Darkside.dm:35]
		 [Darkside.dm:35]
			= [Darkside.dm:35]
				 (100) [Darkside.dm:35]
	locked [Darkside.dm:37]
		 [Darkside.dm:37]
			= [Darkside.dm:37]
				 (0) [Darkside.dm:37]
	playerz [Darkside.dm:38]
		 [Darkside.dm:38]
			= [Darkside.dm:38]
				 (20) [Darkside.dm:38]
	list [Darkside.dm:39]
		no [Darkside.dm:39]
			 [Darkside.dm:39]
				= [Darkside.dm:39]
					list [Darkside.dm:39]
						 (/obj/Items/Weapons) [Darkside.dm:39]
						 (/obj/Items/Keys) [Darkside.dm:39]
world [Darkside.dm:42]
	= [Darkside.dm:43]
		 (name) [Darkside.dm:43]
		 ("Darkness Falls") [Darkside.dm:43]
	= [Darkside.dm:44]
		 (view) [Darkside.dm:44]
		 (6) [Darkside.dm:44]
	= [Darkside.dm:45]
		 (mob) [Darkside.dm:45]
		 (/mob/Player) [Darkside.dm:45]
	= [Darkside.dm:46]
		 (hub) [Darkside.dm:46]
		 ("WildBlood.DarknessFalls") [Darkside.dm:46]
proc [Darkside.dm:49]
	Spawner [Darkside.dm:49]
		var [Darkside.dm:50]
			.arg [Darkside.dm:50]
		_block [Darkside.dm:50]
			var [Darkside.dm:50]
				I [Darkside.dm:50]
			for [Darkside.dm:50]
				 [Darkside.dm:50]
					= [Darkside.dm:50]
						 (I) [Darkside.dm:50]
						 (Hardness) [Darkside.dm:50]
				 [Darkside.dm:50]
					> [Darkside.dm:50]
						 (I) [Darkside.dm:50]
						 (0) [Darkside.dm:50]
				 [Darkside.dm:50]
					.post-- (I) [Darkside.dm:50]
			 [Darkside.dm:51]
				_block [Darkside.dm:51]
					var [Darkside.dm:51]
						turf [Darkside.dm:51]
							Spawns [Darkside.dm:51]
								X [Darkside.dm:51]
					for [Darkside.dm:51]
						 (X) [Darkside.dm:51]
					 [Darkside.dm:51]
						if [Darkside.dm:51]
							 [Darkside.dm:51]
								== [Darkside.dm:51]
									 (X.z) [Darkside.dm:51]
									 (Map) [Darkside.dm:51]
						 [Darkside.dm:51]
							.call (X.Spawning) [Darkside.dm:51]
	SlaughterSpawner [Darkside.dm:54]
		var [Darkside.dm:55]
			.arg [Darkside.dm:55]
		<< [Darkside.dm:55]
			 (world) [Darkside.dm:55]
			 [Darkside.dm:55]
				text ("<font color = red>Incoming Enemy Wave (\[])</font>") [Darkside.dm:55]
					 [Darkside.dm:55]
						 (WaveCount) [Darkside.dm:55]
		<< [Darkside.dm:56]
			 (world) [Darkside.dm:56]
			 [Darkside.dm:56]
				text ("<font color = green>Credits Boosted by \[]</font>") [Darkside.dm:56]
					 [Darkside.dm:56]
						 (WaveMoney) [Darkside.dm:56]
		.post++ (WaveCount) [Darkside.dm:57]
		if [Darkside.dm:58]
			 [Darkside.dm:58]
				> [Darkside.dm:58]
					 (SpawnSpeed) [Darkside.dm:58]
					 (100) [Darkside.dm:58]
		 [Darkside.dm:58]
			-= [Darkside.dm:58]
				 (SpawnSpeed) [Darkside.dm:58]
				 (Hardness) [Darkside.dm:58]
		_block [Darkside.dm:59]
			var [Darkside.dm:59]
				mob [Darkside.dm:59]
					Player [Darkside.dm:59]
						X [Darkside.dm:59]
			for [Darkside.dm:59]
				 [Darkside.dm:59]
					in [Darkside.dm:59]
						 (X) [Darkside.dm:59]
						 (world) [Darkside.dm:59]
			 [Darkside.dm:59]
				+= [Darkside.dm:59]
					 (X.Credits) [Darkside.dm:59]
					 (WaveMoney) [Darkside.dm:59]
		_block [Darkside.dm:60]
			var [Darkside.dm:60]
				turf [Darkside.dm:60]
					SlaughterSpawn [Darkside.dm:60]
						X [Darkside.dm:60]
			for [Darkside.dm:60]
				 [Darkside.dm:60]
					in [Darkside.dm:60]
						 (X) [Darkside.dm:60]
						 (world) [Darkside.dm:60]
			 [Darkside.dm:60]
				if [Darkside.dm:60]
					 [Darkside.dm:60]
						== [Darkside.dm:60]
							 (X.MapNum) [Darkside.dm:60]
							 (Map) [Darkside.dm:60]
				 [Darkside.dm:61]
					.call (X.Spawning) [Darkside.dm:61]
		spawn [Darkside.dm:62]
			 (SpawnSpeed) [Darkside.dm:62]
		 [Darkside.dm:62]
			.call (SlaughterSpawner) [Darkside.dm:62]
	LevelEnd [Darkside.dm:65]
		var [Darkside.dm:66]
			.arg [Darkside.dm:66]
				Level [Darkside.dm:65]
		.post++ (Map) [Darkside.dm:66]
		_block [Darkside.dm:67]
			var [Darkside.dm:67]
				mob [Darkside.dm:67]
					Monsters [Darkside.dm:67]
						X [Darkside.dm:67]
			for [Darkside.dm:67]
				 [Darkside.dm:67]
					in [Darkside.dm:67]
						 (X) [Darkside.dm:67]
						 (world) [Darkside.dm:67]
			 [Darkside.dm:67]
				if [Darkside.dm:67]
					 [Darkside.dm:67]
						&& [Darkside.dm:67]
							 [Darkside.dm:67]
								! [Darkside.dm:67]
									length [Darkside.dm:67]
										 (X.contents) [Darkside.dm:67]
							 [Darkside.dm:67]
								!= [Darkside.dm:67]
									 (X.desc) [Darkside.dm:67]
									 ("PP") [Darkside.dm:67]
				 [Darkside.dm:68]
					.post++ (Missed) [Darkside.dm:68]
					del [Darkside.dm:68]
						 (X) [Darkside.dm:68]
		_block [Darkside.dm:69]
			var [Darkside.dm:69]
				mob [Darkside.dm:69]
					Player [Darkside.dm:69]
						I [Darkside.dm:69]
			for [Darkside.dm:69]
				 [Darkside.dm:69]
					in [Darkside.dm:69]
						 (I) [Darkside.dm:69]
						 (world) [Darkside.dm:69]
			 [Darkside.dm:70]
				if [Darkside.dm:70]
					 [Darkside.dm:70]
						> [Darkside.dm:70]
							 (I.Health) [Darkside.dm:70]
							 (0) [Darkside.dm:70]
				 [Darkside.dm:71]
					.call (I.Move) [Darkside.dm:71]
						 [Darkside.dm:71]
							locate [Darkside.dm:71]
								 [Darkside.dm:71]
									text ("Starting Area \[]") [Darkside.dm:71]
										 [Darkside.dm:71]
											 (Level) [Darkside.dm:71]
					.call (Spawner) [Darkside.dm:72]
		_block [Darkside.dm:73]
			var [Darkside.dm:73]
				mob [Darkside.dm:73]
					Observer [Darkside.dm:73]
						I [Darkside.dm:73]
			for [Darkside.dm:73]
				 [Darkside.dm:73]
					in [Darkside.dm:73]
						 (I) [Darkside.dm:73]
						 (world) [Darkside.dm:73]
			 [Darkside.dm:74]
				.call (I.Move) [Darkside.dm:74]
					 [Darkside.dm:74]
						locate [Darkside.dm:74]
							 [Darkside.dm:74]
								text ("Starting Area \[]") [Darkside.dm:74]
									 [Darkside.dm:74]
										 (Level) [Darkside.dm:74]
	Explode [Darkside.dm:77]
		var [Darkside.dm:78]
			.arg [Darkside.dm:78]
				atom [Darkside.dm:77]
					Cent [Darkside.dm:77]
				Boom [Darkside.dm:77]
					 [Darkside.dm:78]
						= [Darkside.dm:77]
							 (5) [Darkside.dm:77]
				Size [Darkside.dm:77]
					 [Darkside.dm:78]
						= [Darkside.dm:77]
							 (3) [Darkside.dm:77]
				Length [Darkside.dm:77]
					 [Darkside.dm:78]
						= [Darkside.dm:77]
							 (30) [Darkside.dm:77]
		<< [Darkside.dm:78]
			 [Darkside.dm:78]
				view [Darkside.dm:78]
					 (6) [Darkside.dm:78]
					 (Cent) [Darkside.dm:78]
			 [Darkside.dm:78]
				sound [Darkside.dm:78]
					 ('bomb1.wav') [Darkside.dm:78]
					 (0) [Darkside.dm:78]
		_block [Darkside.dm:79]
			var [Darkside.dm:79]
				atom [Darkside.dm:79]
					movable [Darkside.dm:79]
						X [Darkside.dm:79]
			for [Darkside.dm:79]
				 [Darkside.dm:79]
					in [Darkside.dm:79]
						 (X) [Darkside.dm:79]
						 [Darkside.dm:79]
							range [Darkside.dm:79]
								 (Size) [Darkside.dm:79]
								 (Cent) [Darkside.dm:79]
			 [Darkside.dm:80]
				.call (Damage) [Darkside.dm:80]
					 (src) [Darkside.dm:80]
					 (X) [Darkside.dm:80]
					 (Boom) [Darkside.dm:80]
					 ("Flame 1") [Darkside.dm:80]
					 (0) [Darkside.dm:80]
		_block [Darkside.dm:81]
			var [Darkside.dm:81]
				mob [Darkside.dm:81]
					Player [Darkside.dm:81]
						X [Darkside.dm:81]
			for [Darkside.dm:81]
				 [Darkside.dm:81]
					in [Darkside.dm:81]
						 (X) [Darkside.dm:81]
						 [Darkside.dm:81]
							range [Darkside.dm:81]
								 (6) [Darkside.dm:81]
								 (Cent) [Darkside.dm:81]
			 [Darkside.dm:81]
				if [Darkside.dm:81]
					 (X.client) [Darkside.dm:81]
				 [Darkside.dm:81]
					.call (Rattle) [Darkside.dm:81]
						 (X) [Darkside.dm:81]
						 (4) [Darkside.dm:81]
		_block [Darkside.dm:82]
			var [Darkside.dm:82]
				turf [Darkside.dm:82]
					Map [Darkside.dm:82]
						X [Darkside.dm:82]
			for [Darkside.dm:82]
				 [Darkside.dm:82]
					in [Darkside.dm:82]
						 (X) [Darkside.dm:82]
						 [Darkside.dm:82]
							range [Darkside.dm:82]
								 (Size) [Darkside.dm:82]
								 (Cent) [Darkside.dm:82]
			 [Darkside.dm:82]
				if [Darkside.dm:82]
					 [Darkside.dm:82]
						prob [Darkside.dm:82]
							 (85) [Darkside.dm:82]
				 [Darkside.dm:83]
					+= [Darkside.dm:83]
						 (X.overlays) [Darkside.dm:83]
						 [Darkside.dm:83]
							image [Darkside.dm:83]
								 [Darkside.dm:83]
									arglist [Darkside.dm:83]
										 [Darkside.dm:83]
											list [Darkside.dm:83]
												 ('Effects.dmi') [Darkside.dm:83]
												 [Darkside.dm:83]
													= [Darkside.dm:83]
														 ("icon_state") [Darkside.dm:83]
														 ("Flame 0") [Darkside.dm:83]
												 [Darkside.dm:83]
													= [Darkside.dm:83]
														 ("layer") [Darkside.dm:83]
														 (6) [Darkside.dm:83]
												 [Darkside.dm:83]
													= [Darkside.dm:83]
														 ("pixel_y") [Darkside.dm:83]
														 [Darkside.dm:83]
															rand [Darkside.dm:83]
																 (-15) [Darkside.dm:83]
																 (15) [Darkside.dm:83]
												 [Darkside.dm:83]
													= [Darkside.dm:83]
														 ("pixel_x") [Darkside.dm:83]
														 [Darkside.dm:83]
															rand [Darkside.dm:83]
																 (-15) [Darkside.dm:83]
																 (15) [Darkside.dm:83]
					.call (X.Flaming) [Darkside.dm:84]
						 (Length) [Darkside.dm:84]
						 (X) [Darkside.dm:84]
	HPARM [Darkside.dm:87]
		var [Darkside.dm:88]
			.arg [Darkside.dm:88]
				atom [Darkside.dm:87]
					Source [Darkside.dm:87]
				Armor [Darkside.dm:87]
				Health [Darkside.dm:87]
		if [Darkside.dm:88]
			 (Source/:/client) [Darkside.dm:88]
		 [Darkside.dm:88]
			= [Darkside.dm:88]
				 (Source/:/client.images) [Darkside.dm:88]
				 (null) [Darkside.dm:88]
		if [Darkside.dm:89]
			 [Darkside.dm:89]
				> [Darkside.dm:89]
					 (Source.Health) [Darkside.dm:89]
					 (Source.HealthMax) [Darkside.dm:89]
		 [Darkside.dm:89]
			= [Darkside.dm:89]
				 (Source.Health) [Darkside.dm:89]
				 (Source.HealthMax) [Darkside.dm:89]
		if [Darkside.dm:90]
			 [Darkside.dm:90]
				> [Darkside.dm:90]
					 (Source.Armor) [Darkside.dm:90]
					 (Source.ArmorMax) [Darkside.dm:90]
		 [Darkside.dm:90]
			= [Darkside.dm:90]
				 (Source.Armor) [Darkside.dm:90]
				 (Source.ArmorMax) [Darkside.dm:90]
		<< [Darkside.dm:91]
			 (Source) [Darkside.dm:91]
			 [Darkside.dm:91]
				image [Darkside.dm:91]
					 ('Hud.dmi') [Darkside.dm:91]
					 (Source) [Darkside.dm:91]
					 [Darkside.dm:91]
						text ("hp \[]") [Darkside.dm:91]
							 [Darkside.dm:91]
								round [Darkside.dm:91]
									 [Darkside.dm:91]
										* [Darkside.dm:91]
											 [Darkside.dm:91]
												/ [Darkside.dm:91]
													 (Source.Health) [Darkside.dm:91]
													 (Source.HealthMax) [Darkside.dm:91]
											 (100) [Darkside.dm:91]
									 (20) [Darkside.dm:91]
		<< [Darkside.dm:92]
			 (Source) [Darkside.dm:92]
			 [Darkside.dm:92]
				image [Darkside.dm:92]
					 ('Hud.dmi') [Darkside.dm:92]
					 (Source) [Darkside.dm:92]
					 [Darkside.dm:92]
						text ("arm \[]") [Darkside.dm:92]
							 [Darkside.dm:92]
								round [Darkside.dm:92]
									 [Darkside.dm:92]
										* [Darkside.dm:92]
											 [Darkside.dm:92]
												/ [Darkside.dm:92]
													 (Source.Armor) [Darkside.dm:92]
													 (Source.ArmorMax) [Darkside.dm:92]
											 (100) [Darkside.dm:92]
									 (20) [Darkside.dm:92]
	Damage [Darkside.dm:95]
		var [Darkside.dm:96]
			.arg [Darkside.dm:96]
				atom [Darkside.dm:95]
					movable [Darkside.dm:95]
						Attacker [Darkside.dm:95]
				atom [Darkside.dm:95]
					movable [Darkside.dm:95]
						Attacked [Darkside.dm:95]
				Amount [Darkside.dm:95]
				Effect [Darkside.dm:95]
				Blood [Darkside.dm:95]
				ByPass [Darkside.dm:95]
					 [Darkside.dm:96]
						= [Darkside.dm:95]
							 (0) [Darkside.dm:95]
		if [Darkside.dm:96]
			 [Darkside.dm:96]
				|| [Darkside.dm:96]
					 [Darkside.dm:96]
						istype [Darkside.dm:96]
							 (Attacked) [Darkside.dm:96]
							 (/mob/Observer) [Darkside.dm:96]
					 [Darkside.dm:96]
						&& [Darkside.dm:96]
							 [Darkside.dm:96]
								istype [Darkside.dm:96]
									 (Attacker) [Darkside.dm:96]
									 (/mob/Player) [Darkside.dm:96]
							 [Darkside.dm:96]
								istype [Darkside.dm:96]
									 (Attacked) [Darkside.dm:96]
									 (/mob/Player) [Darkside.dm:96]
							 [Darkside.dm:96]
								! [Darkside.dm:96]
									 (PKMode) [Darkside.dm:96]
		 [Darkside.dm:96]
			return [Darkside.dm:96]
		if [Darkside.dm:98]
			 [Darkside.dm:98]
				&& [Darkside.dm:98]
					 [Darkside.dm:98]
						> [Darkside.dm:98]
							 (Attacked.Armor) [Darkside.dm:98]
							 (0) [Darkside.dm:98]
					 [Darkside.dm:98]
						! [Darkside.dm:98]
							 (ByPass) [Darkside.dm:98]
		 [Darkside.dm:98]
			-= [Darkside.dm:98]
				 (Attacked.Armor) [Darkside.dm:98]
				 (Amount) [Darkside.dm:98]
		if [Darkside.dm:98]
			 [Darkside.dm:98]
				< [Darkside.dm:98]
					 (Attacked.Armor) [Darkside.dm:98]
					 (0) [Darkside.dm:98]
		 [Darkside.dm:98]
			= [Darkside.dm:98]
				 (Attacked.Armor) [Darkside.dm:98]
				 (0) [Darkside.dm:98]
		else [Darkside.dm:99]
			if [Darkside.dm:99]
				 [Darkside.dm:99]
					|| [Darkside.dm:99]
						 [Darkside.dm:99]
							<= [Darkside.dm:99]
								 (Attacked.Armor) [Darkside.dm:99]
								 (0) [Darkside.dm:99]
						 (ByPass) [Darkside.dm:99]
			 [Darkside.dm:99]
				-= [Darkside.dm:99]
					 (Attacked.Health) [Darkside.dm:99]
					 (Amount) [Darkside.dm:99]
		if [Darkside.dm:99]
			 [Darkside.dm:99]
				< [Darkside.dm:99]
					 (Attacked.Health) [Darkside.dm:99]
					 (0) [Darkside.dm:99]
		 [Darkside.dm:99]
			= [Darkside.dm:99]
				 (Attacked.Health) [Darkside.dm:99]
				 (0) [Darkside.dm:99]
		if [Darkside.dm:101]
			 [Darkside.dm:101]
				&& [Darkside.dm:101]
					 [Darkside.dm:101]
						! [Darkside.dm:101]
							isnull [Darkside.dm:101]
								 (Attacked) [Darkside.dm:101]
					 [Darkside.dm:101]
						istype [Darkside.dm:101]
							 (Attacked) [Darkside.dm:101]
							 (/mob/Player) [Darkside.dm:101]
		 [Darkside.dm:101]
			.call (HPARM) [Darkside.dm:101]
				 (Attacked) [Darkside.dm:101]
				 (Attacked.Armor) [Darkside.dm:101]
				 (Attacked.Health) [Darkside.dm:101]
		if [Darkside.dm:103]
			 [Darkside.dm:103]
				ismob [Darkside.dm:103]
					 (Attacked) [Darkside.dm:103]
		 [Darkside.dm:104]
			if [Darkside.dm:104]
				 [Darkside.dm:104]
					isnull [Darkside.dm:104]
						 (Attacked.Target) [Darkside.dm:104]
			 [Darkside.dm:104]
				= [Darkside.dm:104]
					 (Attacked.Target) [Darkside.dm:104]
					 (Attacker) [Darkside.dm:104]
			if [Darkside.dm:105]
				 [Darkside.dm:105]
					! [Darkside.dm:105]
						isnull [Darkside.dm:105]
							 (Effect) [Darkside.dm:105]
			 [Darkside.dm:106]
				+= [Darkside.dm:106]
					 (Attacked.underlays) [Darkside.dm:106]
					 [Darkside.dm:106]
						image [Darkside.dm:106]
							 [Darkside.dm:106]
								arglist [Darkside.dm:106]
									 [Darkside.dm:106]
										list [Darkside.dm:106]
											 ('Effects.dmi') [Darkside.dm:106]
											 [Darkside.dm:106]
												= [Darkside.dm:106]
													 ("icon_state") [Darkside.dm:106]
													 [Darkside.dm:106]
														text ("\[]") [Darkside.dm:106]
															 [Darkside.dm:106]
																 (Effect) [Darkside.dm:106]
											 [Darkside.dm:106]
												= [Darkside.dm:106]
													 ("pixel_y") [Darkside.dm:106]
													 [Darkside.dm:106]
														rand [Darkside.dm:106]
															 (-10) [Darkside.dm:106]
															 (10) [Darkside.dm:106]
											 [Darkside.dm:106]
												= [Darkside.dm:106]
													 ("pixel_x") [Darkside.dm:106]
													 [Darkside.dm:106]
														rand [Darkside.dm:106]
															 (-5) [Darkside.dm:106]
															 (5) [Darkside.dm:106]
											 [Darkside.dm:106]
												= [Darkside.dm:106]
													 ("layer") [Darkside.dm:106]
													 (7) [Darkside.dm:106]
				spawn [Darkside.dm:107]
					 (6) [Darkside.dm:107]
				 [Darkside.dm:107]
					if [Darkside.dm:107]
						 [Darkside.dm:107]
							! [Darkside.dm:107]
								isnull [Darkside.dm:107]
									 (Attacked) [Darkside.dm:107]
					 [Darkside.dm:107]
						-= [Darkside.dm:107]
							 (Attacked.underlays) [Darkside.dm:107]
							 [Darkside.dm:107]
								.index (Attacked.underlays) [Darkside.dm:107]
									 (1) [Darkside.dm:107]
			if [Darkside.dm:108]
				 [Darkside.dm:108]
					&& [Darkside.dm:108]
						 [Darkside.dm:108]
							! [Darkside.dm:108]
								isnull [Darkside.dm:108]
									 (Blood) [Darkside.dm:108]
						 [Darkside.dm:108]
							prob [Darkside.dm:108]
								 (Blood) [Darkside.dm:108]
			 [Darkside.dm:108]
				_block [Darkside.dm:108]
					var [Darkside.dm:108]
						turf [Darkside.dm:108]
							X [Darkside.dm:108]
					for [Darkside.dm:108]
						 [Darkside.dm:108]
							in [Darkside.dm:108]
								 (X) [Darkside.dm:108]
								 [Darkside.dm:108]
									oview [Darkside.dm:108]
										 (1) [Darkside.dm:108]
										 (Attacked) [Darkside.dm:108]
					 [Darkside.dm:108]
						if [Darkside.dm:108]
							 [Darkside.dm:108]
								&& [Darkside.dm:108]
									 [Darkside.dm:108]
										== [Darkside.dm:108]
											 (X.suffix) [Darkside.dm:108]
											 ("Wall") [Darkside.dm:108]
									 [Darkside.dm:108]
										prob [Darkside.dm:108]
											 (5) [Darkside.dm:108]
						 [Darkside.dm:109]
							if [Darkside.dm:109]
								 [Darkside.dm:109]
									< [Darkside.dm:109]
										 [Darkside.dm:109]
											length [Darkside.dm:109]
												 (X.overlays) [Darkside.dm:109]
										 (3) [Darkside.dm:109]
							 [Darkside.dm:109]
								+= [Darkside.dm:109]
									 (X.overlays) [Darkside.dm:109]
									 [Darkside.dm:109]
										image [Darkside.dm:109]
											 [Darkside.dm:109]
												arglist [Darkside.dm:109]
													 [Darkside.dm:109]
														list [Darkside.dm:109]
															 ('Gore.dmi') [Darkside.dm:109]
															 [Darkside.dm:109]
																= [Darkside.dm:109]
																	 ("icon_state") [Darkside.dm:109]
																	 [Darkside.dm:109]
																		text ("Wall Splatter \[]") [Darkside.dm:109]
																			 [Darkside.dm:109]
																				rand [Darkside.dm:109]
																					 (1) [Darkside.dm:109]
																					 (3) [Darkside.dm:109]
															 [Darkside.dm:109]
																= [Darkside.dm:109]
																	 ("pixel_y") [Darkside.dm:109]
																	 [Darkside.dm:109]
																		rand [Darkside.dm:109]
																			 (-8) [Darkside.dm:109]
																			 (8) [Darkside.dm:109]
															 [Darkside.dm:109]
																= [Darkside.dm:109]
																	 ("pixel_x") [Darkside.dm:109]
																	 [Darkside.dm:109]
																		rand [Darkside.dm:109]
																			 (-8) [Darkside.dm:109]
																			 (8) [Darkside.dm:109]
															 [Darkside.dm:109]
																= [Darkside.dm:109]
																	 ("layer") [Darkside.dm:109]
																	 (7) [Darkside.dm:109]
			if [Darkside.dm:110]
				 [Darkside.dm:110]
					&& [Darkside.dm:110]
						 [Darkside.dm:110]
							! [Darkside.dm:110]
								isnull [Darkside.dm:110]
									 (Blood) [Darkside.dm:110]
						 [Darkside.dm:110]
							prob [Darkside.dm:110]
								 (Blood) [Darkside.dm:110]
			 [Darkside.dm:110]
				_block [Darkside.dm:110]
					var [Darkside.dm:110]
						turf [Darkside.dm:110]
							X [Darkside.dm:110]
					for [Darkside.dm:110]
						 [Darkside.dm:110]
							in [Darkside.dm:110]
								 (X) [Darkside.dm:110]
								 [Darkside.dm:110]
									view [Darkside.dm:110]
										 (1) [Darkside.dm:110]
										 (Attacked) [Darkside.dm:110]
					 [Darkside.dm:110]
						if [Darkside.dm:110]
							 [Darkside.dm:110]
								&& [Darkside.dm:110]
									 [Darkside.dm:110]
										== [Darkside.dm:110]
											 (X.suffix) [Darkside.dm:110]
											 ("Floor") [Darkside.dm:110]
									 [Darkside.dm:110]
										prob [Darkside.dm:110]
											 (5) [Darkside.dm:110]
						 [Darkside.dm:111]
							if [Darkside.dm:111]
								 [Darkside.dm:111]
									< [Darkside.dm:111]
										 [Darkside.dm:111]
											length [Darkside.dm:111]
												 (X.overlays) [Darkside.dm:111]
										 (3) [Darkside.dm:111]
							 [Darkside.dm:111]
								+= [Darkside.dm:111]
									 (X.overlays) [Darkside.dm:111]
									 [Darkside.dm:111]
										image [Darkside.dm:111]
											 [Darkside.dm:111]
												arglist [Darkside.dm:111]
													 [Darkside.dm:111]
														list [Darkside.dm:111]
															 ('Gore.dmi') [Darkside.dm:111]
															 [Darkside.dm:111]
																= [Darkside.dm:111]
																	 ("icon_state") [Darkside.dm:111]
																	 [Darkside.dm:111]
																		text ("Floor Splatter \[]") [Darkside.dm:111]
																			 [Darkside.dm:111]
																				rand [Darkside.dm:111]
																					 (1) [Darkside.dm:111]
																					 (3) [Darkside.dm:111]
															 [Darkside.dm:111]
																= [Darkside.dm:111]
																	 ("pixel_y") [Darkside.dm:111]
																	 [Darkside.dm:111]
																		rand [Darkside.dm:111]
																			 (-8) [Darkside.dm:111]
																			 (8) [Darkside.dm:111]
															 [Darkside.dm:111]
																= [Darkside.dm:111]
																	 ("pixel_x") [Darkside.dm:111]
																	 [Darkside.dm:111]
																		rand [Darkside.dm:111]
																			 (-8) [Darkside.dm:111]
																			 (8) [Darkside.dm:111]
															 [Darkside.dm:111]
																= [Darkside.dm:111]
																	 ("layer") [Darkside.dm:111]
																	 (2) [Darkside.dm:111]
			if [Darkside.dm:113]
				 [Darkside.dm:113]
					<= [Darkside.dm:113]
						 (Attacked.Health) [Darkside.dm:113]
						 (0) [Darkside.dm:113]
			 [Darkside.dm:114]
				_block [Darkside.dm:114]
					var [Darkside.dm:114]
						mob [Darkside.dm:114]
							X [Darkside.dm:114]
					for [Darkside.dm:114]
						 [Darkside.dm:114]
							in [Darkside.dm:114]
								 (X) [Darkside.dm:114]
								 [Darkside.dm:114]
									oview [Darkside.dm:114]
										 (Attacked) [Darkside.dm:114]
					 [Darkside.dm:114]
						if [Darkside.dm:114]
							 [Darkside.dm:114]
								== [Darkside.dm:114]
									 (X.Target) [Darkside.dm:114]
									 (Attacked) [Darkside.dm:114]
						 [Darkside.dm:114]
							= [Darkside.dm:114]
								 (X.Target) [Darkside.dm:114]
								 (null) [Darkside.dm:114]
				_block [Darkside.dm:115]
					var [Darkside.dm:115]
						obj [Darkside.dm:115]
							X [Darkside.dm:115]
					for [Darkside.dm:115]
						 [Darkside.dm:115]
							in [Darkside.dm:115]
								 (X) [Darkside.dm:115]
								 (Attacked) [Darkside.dm:115]
					 [Darkside.dm:115]
						step_rand [Darkside.dm:115]
							 (X) [Darkside.dm:115]
				if [Darkside.dm:116]
					 [Darkside.dm:116]
						&& [Darkside.dm:116]
							 [Darkside.dm:116]
								istype [Darkside.dm:116]
									 (Attacked) [Darkside.dm:116]
									 (/mob/Player) [Darkside.dm:116]
							 [Darkside.dm:116]
								!= [Darkside.dm:116]
									 (Attacked.icon_state) [Darkside.dm:116]
									 ("Hunter Dead") [Darkside.dm:116]
				 [Darkside.dm:117]
					= [Darkside.dm:117]
						 (Attacked.density) [Darkside.dm:117]
						 (0) [Darkside.dm:117]
					= [Darkside.dm:118]
						 (Attacked.icon_state) [Darkside.dm:118]
						 ("Hunter Dead") [Darkside.dm:118]
					var [Darkside.dm:119]
						mob [Darkside.dm:119]
							Player [Darkside.dm:119]
								Person [Darkside.dm:119]
									 [Darkside.dm:119]
										= [Darkside.dm:119]
											 (Attacked) [Darkside.dm:119]
					var [Darkside.dm:120]
						mob [Darkside.dm:120]
							Observer [Darkside.dm:120]
								X [Darkside.dm:120]
									 [Darkside.dm:120]
										= [Darkside.dm:120]
											new [Darkside.dm:120]
												 [Darkside.dm:120]
												 (Person.loc) [Darkside.dm:120]
					= [Darkside.dm:121]
						 (X.name) [Darkside.dm:121]
						 (Person.name) [Darkside.dm:121]
					= [Darkside.dm:122]
						 (Person.client/:/mob) [Darkside.dm:122]
						 (X) [Darkside.dm:122]
					.call (Person.Move) [Darkside.dm:122]
						 [Darkside.dm:122]
							locate [Darkside.dm:122]
								 (1) [Darkside.dm:122]
								 (1) [Darkside.dm:122]
								 (1) [Darkside.dm:122]
				else [Darkside.dm:123]
					if [Darkside.dm:124]
						 [Darkside.dm:124]
							istype [Darkside.dm:124]
								 (Attacker) [Darkside.dm:124]
								 (/mob/Player) [Darkside.dm:124]
					 [Darkside.dm:125]
						var [Darkside.dm:125]
							mob [Darkside.dm:125]
								Player [Darkside.dm:125]
									L [Darkside.dm:125]
										 [Darkside.dm:125]
											= [Darkside.dm:125]
												 (Attacker) [Darkside.dm:125]
						.post++ (L.Kills) [Darkside.dm:126]
						.post++ (L.Counter) [Darkside.dm:127]
						+= [Darkside.dm:128]
							 (L.Credits) [Darkside.dm:128]
							 (Attacked.Value) [Darkside.dm:128]
						.post++ (Kills) [Darkside.dm:129]
					_block [Darkside.dm:130]
						var [Darkside.dm:130]
							turf [Darkside.dm:130]
								Z [Darkside.dm:130]
						for [Darkside.dm:130]
							 [Darkside.dm:130]
								in [Darkside.dm:130]
									 (Z) [Darkside.dm:130]
									 [Darkside.dm:130]
										oview [Darkside.dm:130]
											 (1) [Darkside.dm:130]
											 (Attacked) [Darkside.dm:130]
						 [Darkside.dm:130]
							missile [Darkside.dm:130]
								 [Darkside.dm:130]
									image [Darkside.dm:130]
										 [Darkside.dm:130]
											arglist [Darkside.dm:130]
												 [Darkside.dm:130]
													list [Darkside.dm:130]
														 ('Effects.dmi') [Darkside.dm:130]
														 [Darkside.dm:130]
															= [Darkside.dm:130]
																 ("icon_state") [Darkside.dm:130]
																 ("Splatter") [Darkside.dm:130]
														 [Darkside.dm:130]
															= [Darkside.dm:130]
																 ("layer") [Darkside.dm:130]
																 (5) [Darkside.dm:130]
														 [Darkside.dm:130]
															= [Darkside.dm:130]
																 ("pixel_y") [Darkside.dm:130]
																 [Darkside.dm:130]
																	rand [Darkside.dm:130]
																		 (-10) [Darkside.dm:130]
																		 (10) [Darkside.dm:130]
														 [Darkside.dm:130]
															= [Darkside.dm:130]
																 ("pixel_x") [Darkside.dm:130]
																 [Darkside.dm:130]
																	rand [Darkside.dm:130]
																		 (-10) [Darkside.dm:130]
																		 (10) [Darkside.dm:130]
								 (Attacked) [Darkside.dm:130]
								 (Z) [Darkside.dm:130]
					del [Darkside.dm:131]
						 (Attacked) [Darkside.dm:131]
		else [Darkside.dm:134]
			if [Darkside.dm:134]
				 [Darkside.dm:134]
					&& [Darkside.dm:134]
						 [Darkside.dm:134]
							isobj [Darkside.dm:134]
								 (Attacked) [Darkside.dm:134]
						 [Darkside.dm:134]
							<= [Darkside.dm:134]
								 (Attacked.Health) [Darkside.dm:134]
								 (0) [Darkside.dm:134]
						 [Darkside.dm:134]
							!= [Darkside.dm:134]
								 (Attacked.suffix) [Darkside.dm:134]
								 ("Destroyed") [Darkside.dm:134]
			 [Darkside.dm:135]
				_block [Darkside.dm:135]
					var [Darkside.dm:135]
						mob [Darkside.dm:135]
							X [Darkside.dm:135]
					for [Darkside.dm:135]
						 [Darkside.dm:135]
							in [Darkside.dm:135]
								 (X) [Darkside.dm:135]
								 [Darkside.dm:135]
									oview [Darkside.dm:135]
										 (Attacked) [Darkside.dm:135]
					 [Darkside.dm:135]
						if [Darkside.dm:135]
							 [Darkside.dm:135]
								== [Darkside.dm:135]
									 (X.Target) [Darkside.dm:135]
									 (Attacked) [Darkside.dm:135]
						 [Darkside.dm:135]
							= [Darkside.dm:135]
								 (X.Target) [Darkside.dm:135]
								 (null) [Darkside.dm:135]
				= [Darkside.dm:136]
					 (Attacked.suffix) [Darkside.dm:136]
					 ("Destroyed") [Darkside.dm:136]
				= [Darkside.dm:137]
					 (Attacked.dir) [Darkside.dm:137]
					 [Darkside.dm:137]
						get_dir [Darkside.dm:137]
							 (Attacker) [Darkside.dm:137]
							 (Attacked) [Darkside.dm:137]
				del [Darkside.dm:138]
					 (Attacked) [Darkside.dm:138]
	Rattle [Darkside.dm:140]
		var [Darkside.dm:141]
			.arg [Darkside.dm:141]
				mob [Darkside.dm:140]
					X [Darkside.dm:140]
				Y [Darkside.dm:140]
		_block [Darkside.dm:141]
			var [Darkside.dm:141]
				y [Darkside.dm:141]
			for [Darkside.dm:141]
				 [Darkside.dm:141]
					= [Darkside.dm:141]
						 (y) [Darkside.dm:141]
						 (0) [Darkside.dm:141]
				 [Darkside.dm:141]
					< [Darkside.dm:141]
						 (y) [Darkside.dm:141]
						 (Y) [Darkside.dm:141]
				 [Darkside.dm:141]
					.post++ (y) [Darkside.dm:141]
			 [Darkside.dm:142]
				if [Darkside.dm:142]
					 (X.client) [Darkside.dm:142]
				 [Darkside.dm:142]
					return [Darkside.dm:142]
				else [Darkside.dm:143]
					= [Darkside.dm:144]
						 (X.client.eye) [Darkside.dm:144]
						 [Darkside.dm:144]
							get_step [Darkside.dm:144]
								 (X) [Darkside.dm:144]
								 [Darkside.dm:144]
									pick [Darkside.dm:144]
										 (NORTH) [Darkside.dm:144]
										 (SOUTH) [Darkside.dm:144]
										 (EAST) [Darkside.dm:144]
										 (WEST) [Darkside.dm:144]
					sleep [Darkside.dm:145]
						 (1) [Darkside.dm:145]
					= [Darkside.dm:146]
						 (X.client.eye) [Darkside.dm:146]
						 (X) [Darkside.dm:146]
		= [Darkside.dm:147]
			 (X.client.eye) [Darkside.dm:147]
			 (X) [Darkside.dm:147]
	sign [Darkside.dm:150]
		var [Darkside.dm:151]
			.arg [Darkside.dm:151]
				x [Darkside.dm:150]
		return [Darkside.dm:151]
			? [Darkside.dm:151]
				 [Darkside.dm:151]
					< [Darkside.dm:151]
						 (x) [Darkside.dm:151]
						 (0) [Darkside.dm:151]
				 (-1) [Darkside.dm:151]
				 [Darkside.dm:151]
					? [Darkside.dm:151]
						 [Darkside.dm:151]
							> [Darkside.dm:151]
								 (x) [Darkside.dm:151]
								 (0) [Darkside.dm:151]
						 (1) [Darkside.dm:151]
						 (0) [Darkside.dm:151]
	getline [Darkside.dm:152]
		var [Darkside.dm:153]
			.arg [Darkside.dm:153]
				atom [Darkside.dm:152]
					M [Darkside.dm:152]
				atom [Darkside.dm:152]
					N [Darkside.dm:152]
		var [Darkside.dm:153]
			px [Darkside.dm:153]
				 [Darkside.dm:153]
					= [Darkside.dm:153]
						 (M.x) [Darkside.dm:153]
		var [Darkside.dm:154]
			py [Darkside.dm:154]
				 [Darkside.dm:154]
					= [Darkside.dm:154]
						 (M.y) [Darkside.dm:154]
		var [Darkside.dm:155]
			line [Darkside.dm:155]
				 [Darkside.dm:155]
					.index [Darkside.dm:155]
				 [Darkside.dm:155]
					= [Darkside.dm:155]
						list [Darkside.dm:155]
							 [Darkside.dm:155]
								locate [Darkside.dm:155]
									 (px) [Darkside.dm:155]
									 (py) [Darkside.dm:155]
									 (M.z) [Darkside.dm:155]
		var [Darkside.dm:156]
			dx [Darkside.dm:156]
				 [Darkside.dm:156]
					= [Darkside.dm:156]
						- [Darkside.dm:156]
							 (N.x) [Darkside.dm:156]
							 (px) [Darkside.dm:156]
		var [Darkside.dm:157]
			dy [Darkside.dm:157]
				 [Darkside.dm:157]
					= [Darkside.dm:157]
						- [Darkside.dm:157]
							 (N.y) [Darkside.dm:157]
							 (py) [Darkside.dm:157]
		var [Darkside.dm:158]
			dxabs [Darkside.dm:158]
				 [Darkside.dm:158]
					= [Darkside.dm:158]
						abs [Darkside.dm:158]
							 (dx) [Darkside.dm:158]
		var [Darkside.dm:159]
			dyabs [Darkside.dm:159]
				 [Darkside.dm:159]
					= [Darkside.dm:159]
						abs [Darkside.dm:159]
							 (dy) [Darkside.dm:159]
		var [Darkside.dm:160]
			sdx [Darkside.dm:160]
				 [Darkside.dm:160]
					= [Darkside.dm:160]
						.call (sign) [Darkside.dm:160]
							 (dx) [Darkside.dm:160]
		var [Darkside.dm:161]
			sdy [Darkside.dm:161]
				 [Darkside.dm:161]
					= [Darkside.dm:161]
						.call (sign) [Darkside.dm:161]
							 (dy) [Darkside.dm:161]
		var [Darkside.dm:162]
			x [Darkside.dm:162]
				 [Darkside.dm:162]
					= [Darkside.dm:162]
						>> [Darkside.dm:162]
							 (dxabs) [Darkside.dm:162]
							 (1) [Darkside.dm:162]
		var [Darkside.dm:163]
			y [Darkside.dm:163]
				 [Darkside.dm:163]
					= [Darkside.dm:163]
						>> [Darkside.dm:163]
							 (dyabs) [Darkside.dm:163]
							 (1) [Darkside.dm:163]
		var [Darkside.dm:164]
			j [Darkside.dm:164]
		if [Darkside.dm:165]
			 [Darkside.dm:165]
				>= [Darkside.dm:165]
					 (dxabs) [Darkside.dm:165]
					 (dyabs) [Darkside.dm:165]
		 [Darkside.dm:166]
			_block [Darkside.dm:166]
				for [Darkside.dm:166]
					 [Darkside.dm:166]
						= [Darkside.dm:166]
							 (j) [Darkside.dm:166]
							 (0) [Darkside.dm:166]
					 [Darkside.dm:166]
						< [Darkside.dm:166]
							 (j) [Darkside.dm:166]
							 (dxabs) [Darkside.dm:166]
					 [Darkside.dm:166]
						.post++ (j) [Darkside.dm:166]
				 [Darkside.dm:167]
					+= [Darkside.dm:167]
						 (y) [Darkside.dm:167]
						 (dyabs) [Darkside.dm:167]
					if [Darkside.dm:168]
						 [Darkside.dm:168]
							>= [Darkside.dm:168]
								 (y) [Darkside.dm:168]
								 (dxabs) [Darkside.dm:168]
					 [Darkside.dm:169]
						-= [Darkside.dm:169]
							 (y) [Darkside.dm:169]
							 (dxabs) [Darkside.dm:169]
						+= [Darkside.dm:170]
							 (py) [Darkside.dm:170]
							 (sdy) [Darkside.dm:170]
					+= [Darkside.dm:171]
						 (px) [Darkside.dm:171]
						 (sdx) [Darkside.dm:171]
					+= [Darkside.dm:172]
						 (line) [Darkside.dm:172]
						 [Darkside.dm:172]
							locate [Darkside.dm:172]
								 (px) [Darkside.dm:172]
								 (py) [Darkside.dm:172]
								 (M.z) [Darkside.dm:172]
		else [Darkside.dm:173]
			_block [Darkside.dm:174]
				for [Darkside.dm:174]
					 [Darkside.dm:174]
						= [Darkside.dm:174]
							 (j) [Darkside.dm:174]
							 (0) [Darkside.dm:174]
					 [Darkside.dm:174]
						< [Darkside.dm:174]
							 (j) [Darkside.dm:174]
							 (dyabs) [Darkside.dm:174]
					 [Darkside.dm:174]
						.post++ (j) [Darkside.dm:174]
				 [Darkside.dm:175]
					+= [Darkside.dm:175]
						 (x) [Darkside.dm:175]
						 (dxabs) [Darkside.dm:175]
					if [Darkside.dm:176]
						 [Darkside.dm:176]
							>= [Darkside.dm:176]
								 (x) [Darkside.dm:176]
								 (dyabs) [Darkside.dm:176]
					 [Darkside.dm:177]
						-= [Darkside.dm:177]
							 (x) [Darkside.dm:177]
							 (dyabs) [Darkside.dm:177]
						+= [Darkside.dm:178]
							 (px) [Darkside.dm:178]
							 (sdx) [Darkside.dm:178]
					+= [Darkside.dm:179]
						 (py) [Darkside.dm:179]
						 (sdy) [Darkside.dm:179]
					+= [Darkside.dm:180]
						 (line) [Darkside.dm:180]
						 [Darkside.dm:180]
							locate [Darkside.dm:180]
								 (px) [Darkside.dm:180]
								 (py) [Darkside.dm:180]
								 (M.z) [Darkside.dm:180]
		return (line) [Darkside.dm:181]
	QuickSetups [Options.dm:356]
		var [Options.dm:357]
			.arg [Options.dm:357]
		_block [Options.dm:357]
			var [Options.dm:357]
				obj [Options.dm:357]
					Items [Options.dm:357]
						X [Options.dm:357]
			for [Options.dm:357]
				 [Options.dm:357]
					in [Options.dm:357]
						 (X) [Options.dm:357]
						 (world) [Options.dm:357]
			 [Options.dm:357]
				del [Options.dm:357]
					 (X) [Options.dm:357]
		_block [Options.dm:358]
			var [Options.dm:358]
				mob [Options.dm:358]
					Characters [Options.dm:358]
						X [Options.dm:358]
			for [Options.dm:358]
				 [Options.dm:358]
					in [Options.dm:358]
						 (X) [Options.dm:358]
						 (world) [Options.dm:358]
			 [Options.dm:358]
				del [Options.dm:358]
					 (X) [Options.dm:358]
		_block [Options.dm:359]
			var [Options.dm:359]
				area [Options.dm:359]
					QuestZones [Options.dm:359]
						X [Options.dm:359]
			for [Options.dm:359]
				 [Options.dm:359]
					in [Options.dm:359]
						 (X) [Options.dm:359]
						 (world) [Options.dm:359]
			 [Options.dm:359]
				del [Options.dm:359]
					 (X) [Options.dm:359]
		_block [Options.dm:360]
			var [Options.dm:360]
				obj [Options.dm:360]
					Special [Options.dm:360]
						FakeWalls [Options.dm:360]
							X [Options.dm:360]
			for [Options.dm:360]
				 [Options.dm:360]
					in [Options.dm:360]
						 (X) [Options.dm:360]
						 (world) [Options.dm:360]
			 [Options.dm:360]
				del [Options.dm:360]
					 (X) [Options.dm:360]
		_block [Options.dm:361]
			var [Options.dm:361]
				obj [Options.dm:361]
					Special [Options.dm:361]
						Doors [Options.dm:361]
							X [Options.dm:361]
			for [Options.dm:361]
				 [Options.dm:361]
					in [Options.dm:361]
						 (X) [Options.dm:361]
						 (world) [Options.dm:361]
			 [Options.dm:362]
				= [Options.dm:362]
					 (X.Health) [Options.dm:362]
					 (50) [Options.dm:362]
				= [Options.dm:363]
					 (X.Control) [Options.dm:363]
					 (0) [Options.dm:363]
				= [Options.dm:364]
					 (X.Key) [Options.dm:364]
					 (0) [Options.dm:364]
				= [Options.dm:365]
					 (X.Attackible) [Options.dm:365]
					 (1) [Options.dm:365]
		_block [Options.dm:366]
			var [Options.dm:366]
				mob [Options.dm:366]
					Shopkeeper [Options.dm:366]
						X [Options.dm:366]
			for [Options.dm:366]
				 [Options.dm:366]
					in [Options.dm:366]
						 (X) [Options.dm:366]
						 (world) [Options.dm:366]
			 [Options.dm:367]
				-= [Options.dm:367]
					 (X.Selection) [Options.dm:367]
					 (X.Selection) [Options.dm:367]
				_block [Options.dm:368]
					var [Options.dm:368]
						i [Options.dm:368]
					for [Options.dm:368]
						 [Options.dm:368]
							in [Options.dm:368]
								 (i) [Options.dm:368]
								 [Options.dm:368]
									- [Options.dm:368]
										 [Options.dm:368]
											typesof [Options.dm:368]
												 (/obj/Items) [Options.dm:368]
										 (/obj/Items) [Options.dm:368]
					 [Options.dm:369]
						if [Options.dm:369]
							 [Options.dm:369]
								! [Options.dm:369]
									 [Options.dm:369]
										in [Options.dm:369]
											 (i) [Options.dm:369]
											 (no) [Options.dm:369]
						 [Options.dm:369]
							+= [Options.dm:369]
								 (X.Selection) [Options.dm:369]
								 [Options.dm:369]
									new [Options.dm:369]
										 (i) [Darkside.dme:24]
atom [Darkside.dm:183]
	var [Darkside.dm:184]
		Target [Darkside.dm:185]
			 [Darkside.dm:185]
				= [Darkside.dm:185]
					 (null) [Darkside.dm:185]
		mob [Darkside.dm:186]
			Player [Darkside.dm:186]
				Owner [Darkside.dm:186]
					 [Darkside.dm:186]
						= [Darkside.dm:186]
							 (null) [Darkside.dm:186]
		Armor [Darkside.dm:187]
			 [Darkside.dm:187]
				= [Darkside.dm:187]
					 (0) [Darkside.dm:187]
		ArmorMax [Darkside.dm:188]
			 [Darkside.dm:188]
				= [Darkside.dm:188]
					 (0) [Darkside.dm:188]
		Health [Darkside.dm:189]
			 [Darkside.dm:189]
				= [Darkside.dm:189]
					 (0) [Darkside.dm:189]
		HealthMax [Darkside.dm:190]
			 [Darkside.dm:190]
				= [Darkside.dm:190]
					 (0) [Darkside.dm:190]
		Draggible [Darkside.dm:191]
			 [Darkside.dm:191]
				= [Darkside.dm:191]
					 (0) [Darkside.dm:191]
		Carrion [Darkside.dm:192]
			 [Darkside.dm:192]
				= [Darkside.dm:192]
					 (0) [Darkside.dm:192]
	MouseUp [Darkside.dm:193]
		var [Darkside.dm:193]
			.arg [Darkside.dm:193]
				atom [Darkside.dm:193]
					Location [Darkside.dm:193]
		if [Darkside.dm:193]
			 [Darkside.dm:193]
				istype [Darkside.dm:193]
					 (usr) [Darkside.dm:193]
					 (/mob/Player) [Darkside.dm:193]
		 [Darkside.dm:194]
			var [Darkside.dm:194]
				mob [Darkside.dm:194]
					Player [Darkside.dm:194]
						X [Darkside.dm:194]
							 [Darkside.dm:194]
								= [Darkside.dm:194]
									 (usr) [Darkside.dm:194]
			= [Darkside.dm:195]
				 (X.Firing) [Darkside.dm:195]
				 (0) [Darkside.dm:195]
	movable [Darkside.dm:197]
		var [Darkside.dm:198]
			Counter [Darkside.dm:199]
				 [Darkside.dm:199]
					= [Darkside.dm:199]
						 (0) [Darkside.dm:199]
			MAction [Darkside.dm:200]
				 [Darkside.dm:200]
					= [Darkside.dm:200]
						 (1) [Darkside.dm:200]
			Action [Darkside.dm:201]
				 [Darkside.dm:201]
					= [Darkside.dm:201]
						 (1) [Darkside.dm:201]
			Size [Darkside.dm:202]
				 [Darkside.dm:202]
					= [Darkside.dm:202]
						 ("Normal") [Darkside.dm:202]
			Attackible [Darkside.dm:203]
				 [Darkside.dm:203]
					= [Darkside.dm:203]
						 (0) [Darkside.dm:203]
			Value [Darkside.dm:204]
				 [Darkside.dm:204]
					= [Darkside.dm:204]
						 (10) [Darkside.dm:204]
		Move [Darkside.dm:206]
			var [Darkside.dm:207]
				.arg [Darkside.dm:207]
			.call (..) [Darkside.dm:207]
			if [Darkside.dm:209]
				 [Darkside.dm:209]
					&& [Darkside.dm:209]
						 (src.density) [Darkside.dm:209]
						 (src.Health) [Darkside.dm:209]
			 [Darkside.dm:209]
				_block [Darkside.dm:209]
					var [Darkside.dm:209]
						obj [Darkside.dm:209]
							Effects [Darkside.dm:209]
								Beam [Darkside.dm:209]
									X [Darkside.dm:209]
					for [Darkside.dm:209]
						 [Darkside.dm:209]
							in [Darkside.dm:209]
								 (X) [Darkside.dm:209]
								 (src.loc) [Darkside.dm:209]
					 [Darkside.dm:210]
						del [Darkside.dm:210]
							 (X.Trigger) [Darkside.dm:210]
		.child_type (/obj) [Darkside.dme:0]
		.child_type (/mob) [Darkside.dme:0]
		.child_type (/obj) [The Base.dmp:0]
		.child_type (/obj) [The Base.dmp:0]
		.child_type (/mob) [The Base.dmp:0]
		.child_type (/mob) [The Base.dmp:0]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/datum) [Darkside.dme:0]
	.child_type (/turf) [Darkside.dme:0]
	.child_type (/area) [Darkside.dme:0]
	.. (/datum) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/datum) [The Base.dmp:0]
	.child_type (/turf) [The Base.dmp:0]
	.child_type (/turf) [The Base.dmp:0]
	.child_type (/area) [The Base.dmp:0]
	.child_type (/area) [The Base.dmp:0]
	.. (/datum) [The Base.dmp:0]
	.. (/datum) [The Base.dmp:0]
area [Darkside.dm:212]
	= [Darkside.dm:213]
		 (luminosity) [Darkside.dm:213]
		 (1) [Darkside.dm:213]
	Flickering [Darkside.dm:215]
		New [Darkside.dm:216]
			var [Darkside.dm:217]
				.arg [Darkside.dm:217]
			.call (src.Flicker) [Darkside.dm:217]
			.call (..) [Darkside.dm:218]
		proc [Darkside.dm:219]
			Flicker [Darkside.dm:219]
				var [Darkside.dm:220]
					.arg [Darkside.dm:220]
				= [Darkside.dm:220]
					 (src.luminosity) [Darkside.dm:220]
					 [Darkside.dm:220]
						- [Darkside.dm:220]
							 (src.luminosity) [Darkside.dm:220]
				spawn [Darkside.dm:221]
					 [Darkside.dm:221]
						rand [Darkside.dm:221]
							 (5) [Darkside.dm:221]
							 (15) [Darkside.dm:221]
				 [Darkside.dm:221]
					.call (src.Flicker) [Darkside.dm:221]
	ZoneEnd [Darkside.dm:222]
		= [Darkside.dm:223]
			 (layer) [Darkside.dm:223]
			 (10) [Darkside.dm:223]
		= [Darkside.dm:224]
			 (density) [Darkside.dm:224]
			 (1) [Darkside.dm:224]
		= [Darkside.dm:225]
			 (icon) [Darkside.dm:225]
			 ('Mapping.dmi') [Darkside.dm:225]
		= [Darkside.dm:226]
			 (icon_state) [Darkside.dm:226]
			 ("Zone End") [Darkside.dm:226]
		= [Darkside.dm:227]
			 (name) [Darkside.dm:227]
			 ("Zone End") [Darkside.dm:227]
		Enter [Darkside.dm:228]
			var [Darkside.dm:228]
				.arg [Darkside.dm:228]
			return (0) [Darkside.dm:228]
	QuestZones [Darkside.dm:229]
		var [Darkside.dm:230]
			Triggered [Darkside.dm:230]
				 [Darkside.dm:230]
					= [Darkside.dm:230]
						 (0) [Darkside.dm:230]
		Intro [Darkside.dm:232]
			Entered [Darkside.dm:233]
				var [Darkside.dm:233]
					.arg [Darkside.dm:233]
						atom [Darkside.dm:233]
							X [Darkside.dm:233]
				if [Darkside.dm:233]
					 [Darkside.dm:233]
						&& [Darkside.dm:233]
							 [Darkside.dm:233]
								! [Darkside.dm:233]
									 (Triggered) [Darkside.dm:233]
							 [Darkside.dm:233]
								istype [Darkside.dm:233]
									 (X) [Darkside.dm:233]
									 (/mob/Player) [Darkside.dm:233]
				 [Darkside.dm:234]
					.call (Spawner) [Darkside.dm:234]
					<< [Darkside.dm:235]
						 (world) [Darkside.dm:235]
						 ("<b>(Radio) Commander: Listen here grunts, the Alpha base has been over run by unknown hostiles, all remaning Hunters find your way to Delta Base to regroup asap.</b>") [Darkside.dm:235]
					<< [Darkside.dm:236]
						 (world) [Darkside.dm:236]
						 ("<p><font color = red>Mission Objectives: Locate Access Key and Control Panel to Gain Access to the Alpha Labs</font><p>") [Darkside.dm:236]
					_block [Darkside.dm:237]
						var [Darkside.dm:237]
							area [Darkside.dm:237]
								QuestZones [Darkside.dm:237]
									Z [Darkside.dm:237]
						for [Darkside.dm:237]
							 [Darkside.dm:237]
								in [Darkside.dm:237]
									 (Z) [Darkside.dm:237]
									 (world) [Darkside.dm:237]
						 [Darkside.dm:237]
							if [Darkside.dm:237]
								 [Darkside.dm:237]
									== [Darkside.dm:237]
										 (Z.type) [Darkside.dm:237]
										 (src.type) [Darkside.dm:237]
							 [Darkside.dm:237]
								= [Darkside.dm:237]
									 (Z.Triggered) [Darkside.dm:237]
									 (1) [Darkside.dm:237]
		Talk2End1 [Darkside.dm:238]
			Entered [Darkside.dm:239]
				var [Darkside.dm:239]
					.arg [Darkside.dm:239]
						atom [Darkside.dm:239]
							X [Darkside.dm:239]
				if [Darkside.dm:239]
					 [Darkside.dm:239]
						&& [Darkside.dm:239]
							 [Darkside.dm:239]
								! [Darkside.dm:239]
									 (Triggered) [Darkside.dm:239]
							 [Darkside.dm:239]
								istype [Darkside.dm:239]
									 (X) [Darkside.dm:239]
									 (/mob/Player) [Darkside.dm:239]
				 [Darkside.dm:240]
					<< [Darkside.dm:240]
						 (world) [Darkside.dm:240]
						 ("<b>(Radio) Commander: Good work, now once in the labs you will need to locate the train to the Delta labs, most likely you will need to find a lab technician to help you around, so that is your first mission.</b>") [Darkside.dm:240]
					<< [Darkside.dm:241]
						 (world) [Darkside.dm:241]
						 ("<p><font color = red>Mission Objectives: Locate a Lab Technician.</font><p>") [Darkside.dm:241]
					.call (LevelEnd) [Darkside.dm:242]
						 ("2") [Darkside.dm:242]
					_block [Darkside.dm:243]
						var [Darkside.dm:243]
							area [Darkside.dm:243]
								QuestZones [Darkside.dm:243]
									Z [Darkside.dm:243]
						for [Darkside.dm:243]
							 [Darkside.dm:243]
								in [Darkside.dm:243]
									 (Z) [Darkside.dm:243]
									 (world) [Darkside.dm:243]
						 [Darkside.dm:243]
							if [Darkside.dm:243]
								 [Darkside.dm:243]
									== [Darkside.dm:243]
										 (Z.type) [Darkside.dm:243]
										 (src.type) [Darkside.dm:243]
							 [Darkside.dm:243]
								= [Darkside.dm:243]
									 (Z.Triggered) [Darkside.dm:243]
									 (1) [Darkside.dm:243]
		MeetTyler [Darkside.dm:245]
			Entered [Darkside.dm:246]
				var [Darkside.dm:246]
					.arg [Darkside.dm:246]
						atom [Darkside.dm:246]
							X [Darkside.dm:246]
				if [Darkside.dm:246]
					 [Darkside.dm:246]
						&& [Darkside.dm:246]
							 [Darkside.dm:246]
								! [Darkside.dm:246]
									 (Triggered) [Darkside.dm:246]
							 [Darkside.dm:246]
								istype [Darkside.dm:246]
									 (X) [Darkside.dm:246]
									 (/mob/Player) [Darkside.dm:246]
				 [Darkside.dm:247]
					<< [Darkside.dm:247]
						 [Darkside.dm:247]
							range [Darkside.dm:247]
						 ("<b>Tyler: Oh man can't believe anyone else is alive, I think im the only one left here.. listen if you protect me, Ill open the security doors we'll need to get to the train.</b>") [Darkside.dm:247]
					var [Darkside.dm:248]
						mob [Darkside.dm:248]
							Characters [Darkside.dm:248]
								Y [Darkside.dm:248]
									 [Darkside.dm:248]
										= [Darkside.dm:248]
											locate [Darkside.dm:248]
												 ("Tyler") [Darkside.dm:248]
					if [Darkside.dm:249]
						 [Darkside.dm:249]
							! [Darkside.dm:249]
								isnull [Darkside.dm:249]
									 (Y) [Darkside.dm:249]
					 [Darkside.dm:249]
						= [Darkside.dm:249]
							 (Y.Target) [Darkside.dm:249]
							 (X) [Darkside.dm:249]
					walk_to [Darkside.dm:249]
						 (Y) [Darkside.dm:249]
						 (X) [Darkside.dm:249]
						 (1) [Darkside.dm:249]
						 (2) [Darkside.dm:249]
					<< [Darkside.dm:250]
						 (world) [Darkside.dm:250]
						 ("<p><font color = red>Mission Objectives: Escort Tyler to Lab Door Control Panel. Dont let him die.</font><p>") [Darkside.dm:250]
					_block [Darkside.dm:251]
						var [Darkside.dm:251]
							area [Darkside.dm:251]
								QuestZones [Darkside.dm:251]
									Z [Darkside.dm:251]
						for [Darkside.dm:251]
							 [Darkside.dm:251]
								in [Darkside.dm:251]
									 (Z) [Darkside.dm:251]
									 (world) [Darkside.dm:251]
						 [Darkside.dm:251]
							if [Darkside.dm:251]
								 [Darkside.dm:251]
									== [Darkside.dm:251]
										 (Z.type) [Darkside.dm:251]
										 (src.type) [Darkside.dm:251]
							 [Darkside.dm:251]
								= [Darkside.dm:251]
									 (Z.Triggered) [Darkside.dm:251]
									 (1) [Darkside.dm:251]
		TylerTalk1 [Darkside.dm:252]
			Entered [Darkside.dm:253]
				var [Darkside.dm:253]
					.arg [Darkside.dm:253]
						atom [Darkside.dm:253]
							X [Darkside.dm:253]
				if [Darkside.dm:253]
					 [Darkside.dm:253]
						&& [Darkside.dm:253]
							 [Darkside.dm:253]
								! [Darkside.dm:253]
									 (Triggered) [Darkside.dm:253]
							 [Darkside.dm:253]
								== [Darkside.dm:253]
									 (X.name) [Darkside.dm:253]
									 ("Tyler") [Darkside.dm:253]
				 [Darkside.dm:254]
					<< [Darkside.dm:254]
						 [Darkside.dm:254]
							range [Darkside.dm:254]
						 ("<b>Tyler: Hey one second... The door west of here, when I ran through that area earlier it was swarming with... well my co workers but they were all crazy, I suggest turning off our lights and walking single file, the power in there is out, so we might be able to avoid conflict.</b>") [Darkside.dm:254]
					_block [Darkside.dm:255]
						var [Darkside.dm:255]
							area [Darkside.dm:255]
								QuestZones [Darkside.dm:255]
									Z [Darkside.dm:255]
						for [Darkside.dm:255]
							 [Darkside.dm:255]
								in [Darkside.dm:255]
									 (Z) [Darkside.dm:255]
									 (world) [Darkside.dm:255]
						 [Darkside.dm:255]
							if [Darkside.dm:255]
								 [Darkside.dm:255]
									== [Darkside.dm:255]
										 (Z.type) [Darkside.dm:255]
										 (src.type) [Darkside.dm:255]
							 [Darkside.dm:255]
								= [Darkside.dm:255]
									 (Z.Triggered) [Darkside.dm:255]
									 (1) [Darkside.dm:255]
		TylerTalk2 [Darkside.dm:256]
			Entered [Darkside.dm:257]
				var [Darkside.dm:257]
					.arg [Darkside.dm:257]
						atom [Darkside.dm:257]
							X [Darkside.dm:257]
				if [Darkside.dm:257]
					 [Darkside.dm:257]
						&& [Darkside.dm:257]
							 [Darkside.dm:257]
								! [Darkside.dm:257]
									 (Triggered) [Darkside.dm:257]
							 [Darkside.dm:257]
								== [Darkside.dm:257]
									 (X.name) [Darkside.dm:257]
									 ("Tyler") [Darkside.dm:257]
				 [Darkside.dm:258]
					<< [Darkside.dm:258]
						 [Darkside.dm:258]
							range [Darkside.dm:258]
						 ("<b>Tyler: I dunno what happen, we were just working on some data transfers in the lab then all sorts of shit started happening, these things keep crawling out of the duct, I ran here trying to leave the labs, but I heard fighting upstairs figured it was safer to stay hidden in the lockers.</b>") [Darkside.dm:258]
					_block [Darkside.dm:259]
						var [Darkside.dm:259]
							area [Darkside.dm:259]
								QuestZones [Darkside.dm:259]
									Z [Darkside.dm:259]
						for [Darkside.dm:259]
							 [Darkside.dm:259]
								in [Darkside.dm:259]
									 (Z) [Darkside.dm:259]
									 (world) [Darkside.dm:259]
						 [Darkside.dm:259]
							if [Darkside.dm:259]
								 [Darkside.dm:259]
									== [Darkside.dm:259]
										 (Z.type) [Darkside.dm:259]
										 (src.type) [Darkside.dm:259]
							 [Darkside.dm:259]
								= [Darkside.dm:259]
									 (Z.Triggered) [Darkside.dm:259]
									 (1) [Darkside.dm:259]
		TrainTalk [Darkside.dm:260]
			Entered [Darkside.dm:261]
				var [Darkside.dm:262]
					.arg [Darkside.dm:262]
						atom [Darkside.dm:261]
							X [Darkside.dm:261]
				if [Darkside.dm:262]
					 [Darkside.dm:262]
						&& [Darkside.dm:262]
							 [Darkside.dm:262]
								== [Darkside.dm:262]
									 (Triggered) [Darkside.dm:262]
									 (0) [Darkside.dm:262]
							 [Darkside.dm:262]
								istype [Darkside.dm:262]
									 (X) [Darkside.dm:262]
									 (/mob/Player) [Darkside.dm:262]
				 [Darkside.dm:263]
					<< [Darkside.dm:263]
						 [Darkside.dm:263]
							range [Darkside.dm:263]
						 ("<b>Train Controller: Thank goodness someone made it, I was going to take the train and get the hell out of here, but there is some crap blocking the tracks, I also heard noises from the tunnel,  you clear it and Ill drive you to Delta Labs. Ill come with you to check the tracks out but you better watch my ass.</b>") [Darkside.dm:263]
					<< [Darkside.dm:264]
						 (world) [Darkside.dm:264]
						 ("<p><font color = red>Mission Objectives: Clear the Rocks from the Track.</font><p>") [Darkside.dm:264]
					var [Darkside.dm:265]
						mob [Darkside.dm:265]
							Characters [Darkside.dm:265]
								Y [Darkside.dm:265]
									 [Darkside.dm:265]
										= [Darkside.dm:265]
											locate [Darkside.dm:265]
												 ("Train Controller") [Darkside.dm:265]
					if [Darkside.dm:266]
						 [Darkside.dm:266]
							! [Darkside.dm:266]
								isnull [Darkside.dm:266]
									 (Y) [Darkside.dm:266]
					 [Darkside.dm:266]
						walk_to [Darkside.dm:266]
							 (Y) [Darkside.dm:266]
							 (X) [Darkside.dm:266]
							 (1) [Darkside.dm:266]
							 (2) [Darkside.dm:266]
					_block [Darkside.dm:267]
						var [Darkside.dm:267]
							area [Darkside.dm:267]
								QuestZones [Darkside.dm:267]
									Z [Darkside.dm:267]
						for [Darkside.dm:267]
							 [Darkside.dm:267]
								in [Darkside.dm:267]
									 (Z) [Darkside.dm:267]
									 (world) [Darkside.dm:267]
						 [Darkside.dm:267]
							if [Darkside.dm:267]
								 [Darkside.dm:267]
									== [Darkside.dm:267]
										 (Z.type) [Darkside.dm:267]
										 (src.type) [Darkside.dm:267]
							 [Darkside.dm:267]
								= [Darkside.dm:267]
									 (Z.Triggered) [Darkside.dm:267]
									 (1) [Darkside.dm:267]
				else [Darkside.dm:268]
					if [Darkside.dm:268]
						 [Darkside.dm:268]
							&& [Darkside.dm:268]
								 [Darkside.dm:268]
									== [Darkside.dm:268]
										 (Triggered) [Darkside.dm:268]
										 (1) [Darkside.dm:268]
								 [Darkside.dm:268]
									== [Darkside.dm:268]
										 (X.name) [Darkside.dm:268]
										 ("Train Controller") [Darkside.dm:268]
								 [Darkside.dm:268]
									! [Darkside.dm:268]
										locate [Darkside.dm:268]
											 ("Blockage 1") [Darkside.dm:268]
											 [Darkside.dm:268]
												locate [Darkside.dm:268]
													 ("Blockage 1 Area") [Darkside.dm:268]
					 [Darkside.dm:269]
						<< [Darkside.dm:269]
							 [Darkside.dm:269]
								range [Darkside.dm:269]
							 ("<b>Train Controller: You cleared the tracks? Great work, now lets get the hell out of here. Ill take you guys as far as we can go, after that your on your own.</b>") [Darkside.dm:269]
						var [Darkside.dm:271]
							mob [Darkside.dm:271]
								Characters [Darkside.dm:271]
									E [Darkside.dm:271]
										 [Darkside.dm:271]
											= [Darkside.dm:271]
												locate [Darkside.dm:271]
													 ("Tyler") [Darkside.dm:271]
													 [Darkside.dm:271]
														locate [Darkside.dm:271]
															 ("Tyler Wait") [Darkside.dm:271]
						if [Darkside.dm:272]
							 [Darkside.dm:272]
								! [Darkside.dm:272]
									isnull [Darkside.dm:272]
										 (E) [Darkside.dm:272]
						 [Darkside.dm:273]
							.call (E.Move) [Darkside.dm:273]
								 [Darkside.dm:273]
									locate [Darkside.dm:273]
										 ("Starting Area 3") [Darkside.dm:273]
							spawn [Darkside.dm:274]
								 (100) [Darkside.dm:274]
							 [Darkside.dm:274]
								<< [Darkside.dm:274]
									 [Darkside.dm:274]
										range [Darkside.dm:274]
											 (E) [Darkside.dm:274]
											 (10) [Darkside.dm:274]
									 ("<b>Tyler: Thanks for watching my ass back there, I know alittle of this lab, but Ill do my best to help out.</b>") [Darkside.dm:274]
						.call (LevelEnd) [Darkside.dm:276]
							 ("3") [Darkside.dm:276]
						_block [Darkside.dm:277]
							var [Darkside.dm:277]
								area [Darkside.dm:277]
									QuestZones [Darkside.dm:277]
										Z [Darkside.dm:277]
							for [Darkside.dm:277]
								 [Darkside.dm:277]
									in [Darkside.dm:277]
										 (Z) [Darkside.dm:277]
										 (world) [Darkside.dm:277]
							 [Darkside.dm:277]
								if [Darkside.dm:277]
									 [Darkside.dm:277]
										== [Darkside.dm:277]
											 (Z.type) [Darkside.dm:277]
											 (src.type) [Darkside.dm:277]
								 [Darkside.dm:277]
									= [Darkside.dm:277]
										 (Z.Triggered) [Darkside.dm:277]
										 (2) [Darkside.dm:277]
					else [Darkside.dm:278]
						if [Darkside.dm:278]
							 [Darkside.dm:278]
								&& [Darkside.dm:278]
									 [Darkside.dm:278]
										== [Darkside.dm:278]
											 (Triggered) [Darkside.dm:278]
											 (1) [Darkside.dm:278]
									 [Darkside.dm:278]
										== [Darkside.dm:278]
											 (X.name) [Darkside.dm:278]
											 ("Train Controller") [Darkside.dm:278]
									 [Darkside.dm:278]
										locate [Darkside.dm:278]
											 ("Blockage 1") [Darkside.dm:278]
											 [Darkside.dm:278]
												locate [Darkside.dm:278]
													 ("Blockage 1 Area") [Darkside.dm:278]
						 [Darkside.dm:279]
							<< [Darkside.dm:279]
								 [Darkside.dm:279]
									range [Darkside.dm:279]
								 ("<b>Train Controller: Clear the rocks from the track first, then we'll go, not before then.</b>") [Darkside.dm:279]
		SecurityDoorTyler [Darkside.dm:280]
			Entered [Darkside.dm:281]
				var [Darkside.dm:281]
					.arg [Darkside.dm:281]
						atom [Darkside.dm:281]
							X [Darkside.dm:281]
				if [Darkside.dm:281]
					 [Darkside.dm:281]
						&& [Darkside.dm:281]
							 [Darkside.dm:281]
								! [Darkside.dm:281]
									 (Triggered) [Darkside.dm:281]
							 [Darkside.dm:281]
								== [Darkside.dm:281]
									 (X.name) [Darkside.dm:281]
									 ("Tyler") [Darkside.dm:281]
				 [Darkside.dm:282]
					<< [Darkside.dm:282]
						 [Darkside.dm:282]
							view [Darkside.dm:282]
						 ("<b>Tyler: Ok give me a few minutes to open the door, just guard me till I do ok?</b>") [Darkside.dm:282]
					= [Darkside.dm:283]
						 (X.Target) [Darkside.dm:283]
						 [Darkside.dm:283]
							locate [Darkside.dm:283]
								 ("Lab Door Controls") [Darkside.dm:283]
								 (world) [Darkside.dm:283]
					walk_to [Darkside.dm:283]
						 (X) [Darkside.dm:283]
						 (X.Target) [Darkside.dm:283]
						 (1) [Darkside.dm:283]
						 (2) [Darkside.dm:283]
					spawn [Darkside.dm:284]
						 (100) [Darkside.dm:284]
					 [Darkside.dm:285]
						_block [Darkside.dm:285]
							var [Darkside.dm:285]
								I [Darkside.dm:285]
							for [Darkside.dm:285]
								 [Darkside.dm:285]
									= [Darkside.dm:285]
										 (I) [Darkside.dm:285]
										 [Darkside.dm:285]
											* [Darkside.dm:285]
												 (Players) [Darkside.dm:285]
												 (4) [Darkside.dm:285]
								 [Darkside.dm:285]
									> [Darkside.dm:285]
										 (I) [Darkside.dm:285]
										 (0) [Darkside.dm:285]
								 [Darkside.dm:285]
									.post-- (I) [Darkside.dm:285]
							 [Darkside.dm:286]
								new [Darkside.dm:286]
									 (/mob/Monsters/Maggot) [Darkside.dm:286]
									 [Darkside.dm:286]
										locate [Darkside.dm:286]
											 ("Area 2 Trap 1") [Darkside.dm:286]
								sleep [Darkside.dm:287]
									 [Darkside.dm:287]
										rand [Darkside.dm:287]
											 (4) [Darkside.dm:287]
											 (6) [Darkside.dm:287]
					spawn [Darkside.dm:288]
						 (300) [Darkside.dm:288]
					 [Darkside.dm:288]
						if [Darkside.dm:288]
							 [Darkside.dm:288]
								! [Darkside.dm:288]
									isnull [Darkside.dm:288]
										 (X) [Darkside.dm:288]
						 [Darkside.dm:289]
							_block [Darkside.dm:289]
								var [Darkside.dm:289]
									obj [Darkside.dm:289]
										Special [Darkside.dm:289]
											Doors [Darkside.dm:289]
												Y [Darkside.dm:289]
								for [Darkside.dm:289]
									 [Darkside.dm:289]
										in [Darkside.dm:289]
											 (Y) [Darkside.dm:289]
											 (world) [Darkside.dm:289]
								 [Darkside.dm:289]
									if [Darkside.dm:289]
										 [Darkside.dm:289]
											== [Darkside.dm:289]
												 (Y.tag) [Darkside.dm:289]
												 ("Door 4") [Darkside.dm:289]
									 [Darkside.dm:290]
										if [Darkside.dm:290]
											 [Darkside.dm:290]
												&& [Darkside.dm:290]
													 [Darkside.dm:290]
														! [Darkside.dm:290]
															isnull [Darkside.dm:290]
																 (Y) [Darkside.dm:290]
													 [Darkside.dm:290]
														! [Darkside.dm:290]
															 (Y.Opened) [Darkside.dm:290]
										 [Darkside.dm:291]
											= [Darkside.dm:291]
												 (Y.density) [Darkside.dm:291]
												 (0) [Darkside.dm:291]
											= [Darkside.dm:291]
												 (Y.Opened) [Darkside.dm:291]
												 (1) [Darkside.dm:291]
											spawn [Darkside.dm:292]
												 (5) [Darkside.dm:292]
											 [Darkside.dm:292]
												.call (Y.Open) [Darkside.dm:292]
							<< [Darkside.dm:293]
								 [Darkside.dm:293]
									view [Darkside.dm:293]
								 ("<b>Tyler: There done!, the lab is north of here, Im going to stay here and keep the doors open, Ill meet you at the train once you get the blast doors open</b>") [Darkside.dm:293]
							<< [Darkside.dm:294]
								 (world) [Darkside.dm:294]
								 ("<p><font color = red>Mission Objectives: Locate Control Panel for Train Blast Doors then get everyone to train.</font><p>") [Darkside.dm:294]
					_block [Darkside.dm:295]
						var [Darkside.dm:295]
							area [Darkside.dm:295]
								QuestZones [Darkside.dm:295]
									Z [Darkside.dm:295]
						for [Darkside.dm:295]
							 [Darkside.dm:295]
								in [Darkside.dm:295]
									 (Z) [Darkside.dm:295]
									 (world) [Darkside.dm:295]
						 [Darkside.dm:295]
							if [Darkside.dm:295]
								 [Darkside.dm:295]
									== [Darkside.dm:295]
										 (Z.type) [Darkside.dm:295]
										 (src.type) [Darkside.dm:295]
							 [Darkside.dm:295]
								= [Darkside.dm:295]
									 (Z.Triggered) [Darkside.dm:295]
									 (1) [Darkside.dm:295]
		Map3Intro [Darkside.dm:297]
			Entered [Darkside.dm:298]
				var [Darkside.dm:298]
					.arg [Darkside.dm:298]
						atom [Darkside.dm:298]
							X [Darkside.dm:298]
				if [Darkside.dm:298]
					 [Darkside.dm:298]
						&& [Darkside.dm:298]
							 [Darkside.dm:298]
								! [Darkside.dm:298]
									 (Triggered) [Darkside.dm:298]
							 [Darkside.dm:298]
								istype [Darkside.dm:298]
									 (X) [Darkside.dm:298]
									 (/mob/Player) [Darkside.dm:298]
				 [Darkside.dm:299]
					<< [Darkside.dm:299]
						 [Darkside.dm:299]
							view [Darkside.dm:299]
						 ("<b>Train Controller: Hey... what the hell is that!! Arrggh....</b>") [Darkside.dm:299]
					_block [Darkside.dm:300]
						var [Darkside.dm:300]
							obj [Darkside.dm:300]
								Z [Darkside.dm:300]
						for [Darkside.dm:300]
							 [Darkside.dm:300]
								in [Darkside.dm:300]
									 (Z) [Darkside.dm:300]
									 [Darkside.dm:300]
										locate [Darkside.dm:300]
											 ("Map 3 Intro") [Darkside.dm:300]
						 [Darkside.dm:301]
							del [Darkside.dm:301]
								 (Z) [Darkside.dm:301]
							sleep [Darkside.dm:301]
								 (1) [Darkside.dm:301]
					var [Darkside.dm:302]
						mob [Darkside.dm:302]
							Monsters [Darkside.dm:302]
								Reaver [Darkside.dm:302]
									Y [Darkside.dm:302]
										 [Darkside.dm:302]
											= [Darkside.dm:302]
												new [Darkside.dm:302]
													 [Darkside.dm:302]
													 [Darkside.dm:302]
														locate [Darkside.dm:302]
															 ("Map 3 Intro 2") [Darkside.dm:302]
					= [Darkside.dm:303]
						 (Y.desc) [Darkside.dm:303]
						 ("CutScene") [Darkside.dm:303]
					walk [Darkside.dm:304]
						 (Y) [Darkside.dm:304]
						 (EAST) [Darkside.dm:304]
						 (6) [Darkside.dm:304]
					spawn [Darkside.dm:305]
						 (200) [Darkside.dm:305]
					 [Darkside.dm:306]
						del [Darkside.dm:306]
							 (Y) [Darkside.dm:306]
						<< [Darkside.dm:307]
							 (world) [Darkside.dm:307]
							 ("<b>(Radio) Commander: The tunnel has been over-run, were falling back to the command center all surviving Hunters regroup at HQ!</b>") [Darkside.dm:307]
					<< [Darkside.dm:308]
						 (world) [Darkside.dm:308]
						 ("<p><font color = red>Mission Objectives: Locate any Survivors<br>Locate Weapons Locker<br>Locate Tunnel Entrance</font><p>") [Darkside.dm:308]
					_block [Darkside.dm:309]
						var [Darkside.dm:309]
							area [Darkside.dm:309]
								QuestZones [Darkside.dm:309]
									Z [Darkside.dm:309]
						for [Darkside.dm:309]
							 [Darkside.dm:309]
								in [Darkside.dm:309]
									 (Z) [Darkside.dm:309]
									 (world) [Darkside.dm:309]
						 [Darkside.dm:309]
							if [Darkside.dm:309]
								 [Darkside.dm:309]
									== [Darkside.dm:309]
										 (Z.type) [Darkside.dm:309]
										 (src.type) [Darkside.dm:309]
							 [Darkside.dm:309]
								= [Darkside.dm:309]
									 (Z.Triggered) [Darkside.dm:309]
									 (1) [Darkside.dm:309]
		Map3LabDoors [Darkside.dm:310]
			Entered [Darkside.dm:311]
				var [Darkside.dm:311]
					.arg [Darkside.dm:311]
						atom [Darkside.dm:311]
							X [Darkside.dm:311]
				if [Darkside.dm:311]
					 [Darkside.dm:311]
						&& [Darkside.dm:311]
							 [Darkside.dm:311]
								! [Darkside.dm:311]
									 (Triggered) [Darkside.dm:311]
							 [Darkside.dm:311]
								== [Darkside.dm:311]
									 (X.name) [Darkside.dm:311]
									 ("Dr. Grey") [Darkside.dm:311]
				 [Darkside.dm:312]
					<< [Darkside.dm:312]
						 [Darkside.dm:312]
							view [Darkside.dm:312]
						 ("<b>Dr. Grey: Theres the controls lemme go enter my code this will only take a second.</b>") [Darkside.dm:312]
					= [Darkside.dm:313]
						 (X.Target) [Darkside.dm:313]
						 [Darkside.dm:313]
							locate [Darkside.dm:313]
								 ("Loader Door Controls") [Darkside.dm:313]
								 (world) [Darkside.dm:313]
					walk_to [Darkside.dm:314]
						 (X) [Darkside.dm:314]
						 (X.Target) [Darkside.dm:314]
						 (1) [Darkside.dm:314]
						 (2) [Darkside.dm:314]
					spawn [Darkside.dm:315]
						 (300) [Darkside.dm:315]
					 [Darkside.dm:315]
						if [Darkside.dm:315]
							 [Darkside.dm:315]
								! [Darkside.dm:315]
									isnull [Darkside.dm:315]
										 (X) [Darkside.dm:315]
						 [Darkside.dm:316]
							_block [Darkside.dm:316]
								var [Darkside.dm:316]
									obj [Darkside.dm:316]
										Special [Darkside.dm:316]
											Doors [Darkside.dm:316]
												Y [Darkside.dm:316]
								for [Darkside.dm:316]
									 [Darkside.dm:316]
										in [Darkside.dm:316]
											 (Y) [Darkside.dm:316]
											 (world) [Darkside.dm:316]
								 [Darkside.dm:316]
									if [Darkside.dm:316]
										 [Darkside.dm:316]
											== [Darkside.dm:316]
												 (Y.tag) [Darkside.dm:316]
												 ("Door 6") [Darkside.dm:316]
									 [Darkside.dm:317]
										if [Darkside.dm:317]
											 [Darkside.dm:317]
												&& [Darkside.dm:317]
													 [Darkside.dm:317]
														! [Darkside.dm:317]
															isnull [Darkside.dm:317]
																 (Y) [Darkside.dm:317]
													 [Darkside.dm:317]
														! [Darkside.dm:317]
															 (Y.Opened) [Darkside.dm:317]
										 [Darkside.dm:318]
											= [Darkside.dm:318]
												 (Y.density) [Darkside.dm:318]
												 (0) [Darkside.dm:318]
											= [Darkside.dm:318]
												 (Y.Opened) [Darkside.dm:318]
												 (1) [Darkside.dm:318]
											spawn [Darkside.dm:319]
												 (5) [Darkside.dm:319]
											 [Darkside.dm:319]
												.call (Y.Open) [Darkside.dm:319]
							<< [Darkside.dm:320]
								 [Darkside.dm:320]
									view [Darkside.dm:320]
								 ("<b>Dr. Grey: Ok there you go, Im going to go try to find another hiding place, good luck.</b>") [Darkside.dm:320]
							= [Darkside.dm:321]
								 (X.Target) [Darkside.dm:321]
								 (X) [Darkside.dm:321]
							walk_rand [Darkside.dm:322]
								 (X) [Darkside.dm:322]
								 (8) [Darkside.dm:322]
							<< [Darkside.dm:323]
								 (world) [Darkside.dm:323]
								 ("<p><font color = red>Mission Objectives: Enter Tunnel.</font><p>") [Darkside.dm:323]
					_block [Darkside.dm:324]
						var [Darkside.dm:324]
							area [Darkside.dm:324]
								QuestZones [Darkside.dm:324]
									Z [Darkside.dm:324]
						for [Darkside.dm:324]
							 [Darkside.dm:324]
								in [Darkside.dm:324]
									 (Z) [Darkside.dm:324]
									 (world) [Darkside.dm:324]
						 [Darkside.dm:324]
							if [Darkside.dm:324]
								 [Darkside.dm:324]
									== [Darkside.dm:324]
										 (Z.type) [Darkside.dm:324]
										 (src.type) [Darkside.dm:324]
							 [Darkside.dm:324]
								= [Darkside.dm:324]
									 (Z.Triggered) [Darkside.dm:324]
									 (1) [Darkside.dm:324]
		WallTrap3 [Darkside.dm:325]
			Entered [Darkside.dm:326]
				var [Darkside.dm:326]
					.arg [Darkside.dm:326]
						atom [Darkside.dm:326]
							X [Darkside.dm:326]
				if [Darkside.dm:326]
					 [Darkside.dm:326]
						&& [Darkside.dm:326]
							 [Darkside.dm:326]
								! [Darkside.dm:326]
									 (Triggered) [Darkside.dm:326]
							 [Darkside.dm:326]
								istype [Darkside.dm:326]
									 (X) [Darkside.dm:326]
									 (/mob/Player) [Darkside.dm:326]
				 [Darkside.dm:327]
					_block [Darkside.dm:327]
						var [Darkside.dm:327]
							obj [Darkside.dm:327]
								Special [Darkside.dm:327]
									FakeWalls [Darkside.dm:327]
										I [Darkside.dm:327]
						for [Darkside.dm:327]
							 [Darkside.dm:327]
								in [Darkside.dm:327]
									 (I) [Darkside.dm:327]
									 [Darkside.dm:327]
										locate [Darkside.dm:327]
											 ("Area 3 Trap 1") [Darkside.dm:327]
						 [Darkside.dm:328]
							del [Darkside.dm:328]
								 (I) [Darkside.dm:328]
							sleep [Darkside.dm:328]
								 (1) [Darkside.dm:328]
					_block [Darkside.dm:329]
						var [Darkside.dm:329]
							I [Darkside.dm:329]
						for [Darkside.dm:329]
							 [Darkside.dm:329]
								= [Darkside.dm:329]
									 (I) [Darkside.dm:329]
									 (Players) [Darkside.dm:329]
							 [Darkside.dm:329]
								> [Darkside.dm:329]
									 (I) [Darkside.dm:329]
									 (0) [Darkside.dm:329]
							 [Darkside.dm:329]
								.post-- (I) [Darkside.dm:329]
						 [Darkside.dm:330]
							new [Darkside.dm:330]
								 (/mob/Monsters/Defiler) [Darkside.dm:330]
								 [Darkside.dm:330]
									locate [Darkside.dm:330]
										 ("Area 3 Trap 1") [Darkside.dm:330]
					_block [Darkside.dm:331]
						var [Darkside.dm:331]
							area [Darkside.dm:331]
								QuestZones [Darkside.dm:331]
									Z [Darkside.dm:331]
						for [Darkside.dm:331]
							 [Darkside.dm:331]
								in [Darkside.dm:331]
									 (Z) [Darkside.dm:331]
									 (world) [Darkside.dm:331]
						 [Darkside.dm:331]
							if [Darkside.dm:331]
								 [Darkside.dm:331]
									== [Darkside.dm:331]
										 (Z.type) [Darkside.dm:331]
										 (src.type) [Darkside.dm:331]
							 [Darkside.dm:331]
								= [Darkside.dm:331]
									 (Z.Triggered) [Darkside.dm:331]
									 (1) [Darkside.dm:331]
		EndTrap [Darkside.dm:332]
			Entered [Darkside.dm:333]
				var [Darkside.dm:333]
					.arg [Darkside.dm:333]
						atom [Darkside.dm:333]
							X [Darkside.dm:333]
				if [Darkside.dm:333]
					 [Darkside.dm:333]
						&& [Darkside.dm:333]
							 [Darkside.dm:333]
								! [Darkside.dm:333]
									 (Triggered) [Darkside.dm:333]
							 [Darkside.dm:333]
								istype [Darkside.dm:333]
									 (X) [Darkside.dm:333]
									 (/mob/Player) [Darkside.dm:333]
				 [Darkside.dm:334]
					_block [Darkside.dm:334]
						var [Darkside.dm:334]
							I [Darkside.dm:334]
						for [Darkside.dm:334]
							 [Darkside.dm:334]
								= [Darkside.dm:334]
									 (I) [Darkside.dm:334]
									 (20) [Darkside.dm:334]
							 [Darkside.dm:334]
								> [Darkside.dm:334]
									 (I) [Darkside.dm:334]
									 (0) [Darkside.dm:334]
							 [Darkside.dm:334]
								.post-- (I) [Darkside.dm:334]
						 [Darkside.dm:335]
							new [Darkside.dm:335]
								 (/mob/Monsters/Maggot) [Darkside.dm:335]
								 [Darkside.dm:335]
									locate [Darkside.dm:335]
										 ("Area 3 Trap 2") [Darkside.dm:335]
							sleep [Darkside.dm:336]
								 [Darkside.dm:336]
									rand [Darkside.dm:336]
										 (4) [Darkside.dm:336]
										 (6) [Darkside.dm:336]
					_block [Darkside.dm:337]
						var [Darkside.dm:337]
							area [Darkside.dm:337]
								QuestZones [Darkside.dm:337]
									Z [Darkside.dm:337]
						for [Darkside.dm:337]
							 [Darkside.dm:337]
								in [Darkside.dm:337]
									 (Z) [Darkside.dm:337]
									 (world) [Darkside.dm:337]
						 [Darkside.dm:337]
							if [Darkside.dm:337]
								 [Darkside.dm:337]
									== [Darkside.dm:337]
										 (Z.type) [Darkside.dm:337]
										 (src.type) [Darkside.dm:337]
							 [Darkside.dm:337]
								= [Darkside.dm:337]
									 (Z.Triggered) [Darkside.dm:337]
									 (1) [Darkside.dm:337]
		GreyTalk1 [Darkside.dm:338]
			Entered [Darkside.dm:339]
				var [Darkside.dm:339]
					.arg [Darkside.dm:339]
						atom [Darkside.dm:339]
							X [Darkside.dm:339]
				if [Darkside.dm:339]
					 [Darkside.dm:339]
						&& [Darkside.dm:339]
							 [Darkside.dm:339]
								! [Darkside.dm:339]
									 (Triggered) [Darkside.dm:339]
							 [Darkside.dm:339]
								istype [Darkside.dm:339]
									 (X) [Darkside.dm:339]
									 (/mob/Player) [Darkside.dm:339]
				 [Darkside.dm:340]
					<< [Darkside.dm:340]
						 [Darkside.dm:340]
							range [Darkside.dm:340]
						 ("<b>Dr. Grey: Whose over there? if its one of you devils I hope that bomb blew your ass away!.</b>") [Darkside.dm:340]
					_block [Darkside.dm:341]
						var [Darkside.dm:341]
							area [Darkside.dm:341]
								QuestZones [Darkside.dm:341]
									Z [Darkside.dm:341]
						for [Darkside.dm:341]
							 [Darkside.dm:341]
								in [Darkside.dm:341]
									 (Z) [Darkside.dm:341]
									 (world) [Darkside.dm:341]
						 [Darkside.dm:341]
							if [Darkside.dm:341]
								 [Darkside.dm:341]
									== [Darkside.dm:341]
										 (Z.type) [Darkside.dm:341]
										 (src.type) [Darkside.dm:341]
							 [Darkside.dm:341]
								= [Darkside.dm:341]
									 (Z.Triggered) [Darkside.dm:341]
									 (1) [Darkside.dm:341]
		GreyTalk2 [Darkside.dm:342]
			Entered [Darkside.dm:343]
				var [Darkside.dm:343]
					.arg [Darkside.dm:343]
						atom [Darkside.dm:343]
							X [Darkside.dm:343]
				if [Darkside.dm:343]
					 [Darkside.dm:343]
						&& [Darkside.dm:343]
							 [Darkside.dm:343]
								! [Darkside.dm:343]
									 (Triggered) [Darkside.dm:343]
							 [Darkside.dm:343]
								istype [Darkside.dm:343]
									 (X) [Darkside.dm:343]
									 (/mob/Player) [Darkside.dm:343]
				 [Darkside.dm:344]
					<< [Darkside.dm:344]
						 [Darkside.dm:344]
							range [Darkside.dm:344]
						 ("<b>Dr. Grey: Dear god, am I glad to see another person, the tunnel is sealed, I sealed it myself trying to stop this madness from making it to Alpha labs but seems it didnt work, Ill come with you and re-open the loader hatch so you can get to the tunnel.</b>") [Darkside.dm:344]
					var [Darkside.dm:345]
						mob [Darkside.dm:345]
							Characters [Darkside.dm:345]
								Y [Darkside.dm:345]
									 [Darkside.dm:345]
										= [Darkside.dm:345]
											locate [Darkside.dm:345]
												 ("Dr. Grey") [Darkside.dm:345]
					if [Darkside.dm:346]
						 [Darkside.dm:346]
							! [Darkside.dm:346]
								isnull [Darkside.dm:346]
									 (Y) [Darkside.dm:346]
					 [Darkside.dm:346]
						= [Darkside.dm:346]
							 (Y.Target) [Darkside.dm:346]
							 (X) [Darkside.dm:346]
					walk_to [Darkside.dm:346]
						 (Y) [Darkside.dm:346]
						 (X) [Darkside.dm:346]
						 (1) [Darkside.dm:346]
						 (3) [Darkside.dm:346]
					_block [Darkside.dm:347]
						var [Darkside.dm:347]
							area [Darkside.dm:347]
								QuestZones [Darkside.dm:347]
									Z [Darkside.dm:347]
						for [Darkside.dm:347]
							 [Darkside.dm:347]
								in [Darkside.dm:347]
									 (Z) [Darkside.dm:347]
									 (world) [Darkside.dm:347]
						 [Darkside.dm:347]
							if [Darkside.dm:347]
								 [Darkside.dm:347]
									== [Darkside.dm:347]
										 (Z.type) [Darkside.dm:347]
										 (src.type) [Darkside.dm:347]
							 [Darkside.dm:347]
								= [Darkside.dm:347]
									 (Z.Triggered) [Darkside.dm:347]
									 (1) [Darkside.dm:347]
		GreyTalk3 [Darkside.dm:348]
			Entered [Darkside.dm:349]
				var [Darkside.dm:349]
					.arg [Darkside.dm:349]
						atom [Darkside.dm:349]
							X [Darkside.dm:349]
				if [Darkside.dm:349]
					 [Darkside.dm:349]
						&& [Darkside.dm:349]
							 [Darkside.dm:349]
								! [Darkside.dm:349]
									 (Triggered) [Darkside.dm:349]
							 [Darkside.dm:349]
								== [Darkside.dm:349]
									 (X.name) [Darkside.dm:349]
									 ("Dr. Grey") [Darkside.dm:349]
				 [Darkside.dm:350]
					<< [Darkside.dm:350]
						 [Darkside.dm:350]
							range [Darkside.dm:350]
						 ("<b>Dr. Grey: At first my co-workers were just going insane killing each other senslessly, then suddenly fissures cracked in the ground and out crawled these robed snake bastards, they were literally ripping the souls from people.</b>") [Darkside.dm:350]
					_block [Darkside.dm:351]
						var [Darkside.dm:351]
							area [Darkside.dm:351]
								QuestZones [Darkside.dm:351]
									Z [Darkside.dm:351]
						for [Darkside.dm:351]
							 [Darkside.dm:351]
								in [Darkside.dm:351]
									 (Z) [Darkside.dm:351]
									 (world) [Darkside.dm:351]
						 [Darkside.dm:351]
							if [Darkside.dm:351]
								 [Darkside.dm:351]
									== [Darkside.dm:351]
										 (Z.type) [Darkside.dm:351]
										 (src.type) [Darkside.dm:351]
							 [Darkside.dm:351]
								= [Darkside.dm:351]
									 (Z.Triggered) [Darkside.dm:351]
									 (1) [Darkside.dm:351]
		GreyTalk4 [Darkside.dm:352]
			Entered [Darkside.dm:353]
				var [Darkside.dm:353]
					.arg [Darkside.dm:353]
						atom [Darkside.dm:353]
							X [Darkside.dm:353]
				if [Darkside.dm:353]
					 [Darkside.dm:353]
						&& [Darkside.dm:353]
							 [Darkside.dm:353]
								! [Darkside.dm:353]
									 (Triggered) [Darkside.dm:353]
							 [Darkside.dm:353]
								== [Darkside.dm:353]
									 (X.name) [Darkside.dm:353]
									 ("Dr. Grey") [Darkside.dm:353]
				 [Darkside.dm:354]
					<< [Darkside.dm:354]
						 [Darkside.dm:354]
							range [Darkside.dm:354]
						 [Darkside.dm:354]
							text ("<b>Dr. Grey: The snake things arent all I think is out there, Ive heard something... big, echoing through the halls. I hid in the washrooms, was no way I could get to the weapon locker without getting killed, here \[], is my keycard for the locker hope you get better use from it..</b>") [Darkside.dm:354]
								 [Darkside.dm:354]
									 (X.Target) [Darkside.dm:354]
					var [Darkside.dm:355]
						obj [Darkside.dm:355]
							Items [Darkside.dm:355]
								Keys [Darkside.dm:355]
									Key2 [Darkside.dm:355]
										I [Darkside.dm:355]
											 [Darkside.dm:355]
												= [Darkside.dm:355]
													new [Darkside.dm:355]
														 [Darkside.dm:355]
														 (X) [Darkside.dm:355]
					.call (I.Move) [Darkside.dm:356]
						 (X.Target) [Darkside.dm:356]
					_block [Darkside.dm:357]
						var [Darkside.dm:357]
							area [Darkside.dm:357]
								QuestZones [Darkside.dm:357]
									Z [Darkside.dm:357]
						for [Darkside.dm:357]
							 [Darkside.dm:357]
								in [Darkside.dm:357]
									 (Z) [Darkside.dm:357]
									 (world) [Darkside.dm:357]
						 [Darkside.dm:357]
							if [Darkside.dm:357]
								 [Darkside.dm:357]
									== [Darkside.dm:357]
										 (Z.type) [Darkside.dm:357]
										 (src.type) [Darkside.dm:357]
							 [Darkside.dm:357]
								= [Darkside.dm:357]
									 (Z.Triggered) [Darkside.dm:357]
									 (1) [Darkside.dm:357]
		End3A [Darkside.dm:358]
			Entered [Darkside.dm:359]
				var [Darkside.dm:359]
					.arg [Darkside.dm:359]
						atom [Darkside.dm:359]
							X [Darkside.dm:359]
				if [Darkside.dm:359]
					 [Darkside.dm:359]
						&& [Darkside.dm:359]
							 [Darkside.dm:359]
								! [Darkside.dm:359]
									 (Triggered) [Darkside.dm:359]
							 [Darkside.dm:359]
								istype [Darkside.dm:359]
									 (X) [Darkside.dm:359]
									 (/mob/Player) [Darkside.dm:359]
				 [Darkside.dm:360]
					.call (LevelEnd) [Darkside.dm:360]
						 ("4") [Darkside.dm:360]
					_block [Darkside.dm:361]
						var [Darkside.dm:361]
							area [Darkside.dm:361]
								QuestZones [Darkside.dm:361]
									Z [Darkside.dm:361]
						for [Darkside.dm:361]
							 [Darkside.dm:361]
								in [Darkside.dm:361]
									 (Z) [Darkside.dm:361]
									 (world) [Darkside.dm:361]
						 [Darkside.dm:361]
							if [Darkside.dm:361]
								 [Darkside.dm:361]
									== [Darkside.dm:361]
										 (Z.type) [Darkside.dm:361]
										 (src.type) [Darkside.dm:361]
							 [Darkside.dm:361]
								= [Darkside.dm:361]
									 (Z.Triggered) [Darkside.dm:361]
									 (1) [Darkside.dm:361]
		Start3B [Darkside.dm:362]
			Entered [Darkside.dm:363]
				var [Darkside.dm:363]
					.arg [Darkside.dm:363]
						atom [Darkside.dm:363]
							X [Darkside.dm:363]
				if [Darkside.dm:363]
					 [Darkside.dm:363]
						&& [Darkside.dm:363]
							 [Darkside.dm:363]
								! [Darkside.dm:363]
									 (Triggered) [Darkside.dm:363]
							 [Darkside.dm:363]
								istype [Darkside.dm:363]
									 (X) [Darkside.dm:363]
									 (/mob/Player) [Darkside.dm:363]
				 [Darkside.dm:364]
					<< [Darkside.dm:364]
						 (world) [Darkside.dm:364]
						 ("<b>(Radio) Commander: </b> Listen, we tried to lure most of them away but some of those bastards are heading back into the tunnel, your going to have to fight them off... Good luck.") [Darkside.dm:364]
					<< [Darkside.dm:365]
						 (world) [Darkside.dm:365]
						 ("<p><font color = red>Mission Objectives: Kill Em All!!!</font><p>") [Darkside.dm:365]
					_block [Darkside.dm:366]
						var [Darkside.dm:366]
							area [Darkside.dm:366]
								QuestZones [Darkside.dm:366]
									Z [Darkside.dm:366]
						for [Darkside.dm:366]
							 [Darkside.dm:366]
								in [Darkside.dm:366]
									 (Z) [Darkside.dm:366]
									 (world) [Darkside.dm:366]
						 [Darkside.dm:366]
							if [Darkside.dm:366]
								 [Darkside.dm:366]
									== [Darkside.dm:366]
										 (Z.type) [Darkside.dm:366]
										 (src.type) [Darkside.dm:366]
							 [Darkside.dm:366]
								= [Darkside.dm:366]
									 (Z.Triggered) [Darkside.dm:366]
									 (1) [Darkside.dm:366]
					_block [Darkside.dm:367]
						var [Darkside.dm:367]
							I [Darkside.dm:367]
						for [Darkside.dm:367]
							 [Darkside.dm:367]
								= [Darkside.dm:367]
									 (I) [Darkside.dm:367]
									 [Darkside.dm:367]
										* [Darkside.dm:367]
											 (Players) [Darkside.dm:367]
											 (8) [Darkside.dm:367]
											 (Hardness) [Darkside.dm:367]
							 [Darkside.dm:367]
								> [Darkside.dm:367]
									 (I) [Darkside.dm:367]
									 (0) [Darkside.dm:367]
							 [Darkside.dm:367]
								.post-- (I) [Darkside.dm:367]
						 [Darkside.dm:368]
							new [Darkside.dm:368]
								 (/mob/Monsters/Maggot) [Darkside.dm:368]
								 [Darkside.dm:368]
									locate [Darkside.dm:368]
										 [Darkside.dm:368]
											text ("Tunnel Trap \[]") [Darkside.dm:368]
												 [Darkside.dm:368]
													rand [Darkside.dm:368]
														 (1) [Darkside.dm:368]
														 (3) [Darkside.dm:368]
					_block [Darkside.dm:369]
						var [Darkside.dm:369]
							I [Darkside.dm:369]
						for [Darkside.dm:369]
							 [Darkside.dm:369]
								= [Darkside.dm:369]
									 (I) [Darkside.dm:369]
									 [Darkside.dm:369]
										* [Darkside.dm:369]
											 (Players) [Darkside.dm:369]
											 (30) [Darkside.dm:369]
											 (Hardness) [Darkside.dm:369]
							 [Darkside.dm:369]
								> [Darkside.dm:369]
									 (I) [Darkside.dm:369]
									 (0) [Darkside.dm:369]
							 [Darkside.dm:369]
								.post-- (I) [Darkside.dm:369]
						 [Darkside.dm:370]
							var [Darkside.dm:370]
								mob [Darkside.dm:370]
									Monsters [Darkside.dm:370]
										K [Darkside.dm:370]
							if [Darkside.dm:371]
								 [Darkside.dm:371]
									prob [Darkside.dm:371]
										 (65) [Darkside.dm:371]
							 [Darkside.dm:371]
								= [Darkside.dm:371]
									 (K) [Darkside.dm:371]
									 [Darkside.dm:371]
										new [Darkside.dm:371]
											 (/mob/Monsters/Zombie) [Darkside.dm:371]
											 [Darkside.dm:371]
												locate [Darkside.dm:371]
													 ("Area 3b Entry") [Darkside.dm:371]
							else [Darkside.dm:372]
								if [Darkside.dm:372]
									 [Darkside.dm:372]
										prob [Darkside.dm:372]
											 (10) [Darkside.dm:372]
								 [Darkside.dm:372]
									= [Darkside.dm:372]
										 (K) [Darkside.dm:372]
										 [Darkside.dm:372]
											new [Darkside.dm:372]
												 (/mob/Monsters/Reaver) [Darkside.dm:372]
												 [Darkside.dm:372]
													locate [Darkside.dm:372]
														 ("Area 3b Entry") [Darkside.dm:372]
								else [Darkside.dm:373]
									= [Darkside.dm:373]
										 (K) [Darkside.dm:373]
										 [Darkside.dm:373]
											new [Darkside.dm:373]
												 (/mob/Monsters/Defiler) [Darkside.dm:373]
												 [Darkside.dm:373]
													locate [Darkside.dm:373]
														 ("Area 3b Entry") [Darkside.dm:373]
							= [Darkside.dm:374]
								 (K.Range) [Darkside.dm:374]
								 (30) [Darkside.dm:374]
							sleep [Darkside.dm:375]
								 [Darkside.dm:375]
									rand [Darkside.dm:375]
										 (2) [Darkside.dm:375]
										 (8) [Darkside.dm:375]
					spawn [Darkside.dm:376]
						 (300) [Darkside.dm:376]
					 [Darkside.dm:377]
						<< [Darkside.dm:377]
							 (world) [Darkside.dm:377]
							 ("<b>(Radio) Commander: </b>Outside of the tunnel has cleared up alittle now is your chance to get through, hurry soilders time is short!") [Darkside.dm:377]
						_block [Darkside.dm:378]
							var [Darkside.dm:378]
								area [Darkside.dm:378]
									ZoneEnd [Darkside.dm:378]
										I [Darkside.dm:378]
							for [Darkside.dm:378]
								 [Darkside.dm:378]
									in [Darkside.dm:378]
										 (I) [Darkside.dm:378]
										 [Darkside.dm:378]
											locate [Darkside.dm:378]
												 ("Tunnel Blocker") [Darkside.dm:378]
							 [Darkside.dm:378]
								del [Darkside.dm:378]
									 (I) [Darkside.dm:378]
		EndLvl4 [Darkside.dm:379]
			Entered [Darkside.dm:380]
				var [Darkside.dm:380]
					.arg [Darkside.dm:380]
						atom [Darkside.dm:380]
							X [Darkside.dm:380]
				if [Darkside.dm:380]
					 [Darkside.dm:380]
						&& [Darkside.dm:380]
							 [Darkside.dm:380]
								! [Darkside.dm:380]
									 (Triggered) [Darkside.dm:380]
							 [Darkside.dm:380]
								istype [Darkside.dm:380]
									 (X) [Darkside.dm:380]
									 (/mob/Player) [Darkside.dm:380]
				 [Darkside.dm:381]
					.call (LevelEnd) [Darkside.dm:381]
						 ("5") [Darkside.dm:381]
					_block [Darkside.dm:382]
						var [Darkside.dm:382]
							area [Darkside.dm:382]
								QuestZones [Darkside.dm:382]
									Z [Darkside.dm:382]
						for [Darkside.dm:382]
							 [Darkside.dm:382]
								in [Darkside.dm:382]
									 (Z) [Darkside.dm:382]
									 (world) [Darkside.dm:382]
						 [Darkside.dm:382]
							if [Darkside.dm:382]
								 [Darkside.dm:382]
									== [Darkside.dm:382]
										 (Z.type) [Darkside.dm:382]
										 (src.type) [Darkside.dm:382]
							 [Darkside.dm:382]
								= [Darkside.dm:382]
									 (Z.Triggered) [Darkside.dm:382]
									 (2) [Darkside.dm:382]
					<< [Darkside.dm:383]
						 (world) [Darkside.dm:383]
						 ("<b>Elsewhere. . .</b>") [Darkside.dm:383]
					_block [Darkside.dm:384]
						var [Darkside.dm:384]
							I [Darkside.dm:384]
						for [Darkside.dm:384]
							 [Darkside.dm:384]
								= [Darkside.dm:384]
									 (I) [Darkside.dm:384]
									 (15) [Darkside.dm:384]
							 [Darkside.dm:384]
								> [Darkside.dm:384]
									 (I) [Darkside.dm:384]
									 (0) [Darkside.dm:384]
							 [Darkside.dm:384]
								.post-- (I) [Darkside.dm:384]
						 [Darkside.dm:385]
							var [Darkside.dm:385]
								mob [Darkside.dm:385]
									Monsters [Darkside.dm:385]
										Imp [Darkside.dm:385]
											K [Darkside.dm:385]
												 [Darkside.dm:385]
													= [Darkside.dm:385]
														new [Darkside.dm:385]
															 [Darkside.dm:385]
															 [Darkside.dm:385]
																locate [Darkside.dm:385]
																	 [Darkside.dm:385]
																		text ("Area 5 Monster Spawn \[]") [Darkside.dm:385]
																			 [Darkside.dm:385]
																				rand [Darkside.dm:385]
																					 (1) [Darkside.dm:385]
																					 (3) [Darkside.dm:385]
							= [Darkside.dm:386]
								 (K.Range) [Darkside.dm:386]
								 (10) [Darkside.dm:386]
					_block [Darkside.dm:387]
						var [Darkside.dm:387]
							I [Darkside.dm:387]
						for [Darkside.dm:387]
							 [Darkside.dm:387]
								= [Darkside.dm:387]
									 (I) [Darkside.dm:387]
									 (10) [Darkside.dm:387]
							 [Darkside.dm:387]
								> [Darkside.dm:387]
									 (I) [Darkside.dm:387]
									 (0) [Darkside.dm:387]
							 [Darkside.dm:387]
								.post-- (I) [Darkside.dm:387]
						 [Darkside.dm:388]
							var [Darkside.dm:388]
								mob [Darkside.dm:388]
									Hunters [Darkside.dm:388]
										K [Darkside.dm:388]
											 [Darkside.dm:388]
												= [Darkside.dm:388]
													new [Darkside.dm:388]
														 [Darkside.dm:388]
														 [Darkside.dm:388]
															locate [Darkside.dm:388]
																 ("Area 5 Hunter Spawn 1") [Darkside.dm:388]
							= [Darkside.dm:389]
								 (K.icon_state) [Darkside.dm:389]
								 ("Hunter Shotgun") [Darkside.dm:389]
							= [Darkside.dm:390]
								 (K.luminosity) [Darkside.dm:390]
								 (12) [Darkside.dm:390]
							= [Darkside.dm:391]
								 (K.Health) [Darkside.dm:391]
								 (10) [Darkside.dm:391]
							step_rand [Darkside.dm:392]
								 (K) [Darkside.dm:392]
					spawn [Darkside.dm:393]
						 (30) [Darkside.dm:393]
					 [Darkside.dm:394]
						<< [Darkside.dm:394]
							 (world) [Darkside.dm:394]
							 ("<b>Commander: </b>Blast those bastards back to hell dammit keep firing!") [Darkside.dm:394]
						spawn [Darkside.dm:395]
							 (100) [Darkside.dm:395]
						 [Darkside.dm:396]
							<< [Darkside.dm:396]
								 (world) [Darkside.dm:396]
								 ("<b>Commander: </b>There is too damn many of them, fall back fall back!!.") [Darkside.dm:396]
							spawn [Darkside.dm:397]
								 (15) [Darkside.dm:397]
							 [Darkside.dm:398]
								_block [Darkside.dm:398]
									var [Darkside.dm:398]
										obj [Darkside.dm:398]
											Special [Darkside.dm:398]
												FakeWalls [Darkside.dm:398]
													I [Darkside.dm:398]
									for [Darkside.dm:398]
										 [Darkside.dm:398]
											in [Darkside.dm:398]
												 (I) [Darkside.dm:398]
												 [Darkside.dm:398]
													locate [Darkside.dm:398]
														 ("Area 5 Wall Blow 1") [Darkside.dm:398]
									 [Darkside.dm:399]
										del [Darkside.dm:399]
											 (I) [Darkside.dm:399]
										sleep [Darkside.dm:399]
											 (1) [Darkside.dm:399]
								spawn [Darkside.dm:400]
									 (100) [Darkside.dm:400]
								 [Darkside.dm:401]
									<< [Darkside.dm:401]
										 (world) [Darkside.dm:401]
										 ("<p><font color = red>Mission Objectives: Find Surviors<br>Restore Power</font><p>") [Darkside.dm:401]
					_block [Darkside.dm:403]
						var [Darkside.dm:403]
							mob [Darkside.dm:403]
								Z [Darkside.dm:403]
						for [Darkside.dm:403]
							 [Darkside.dm:403]
								in [Darkside.dm:403]
									 (Z) [Darkside.dm:403]
									 (world) [Darkside.dm:403]
						 [Darkside.dm:403]
							if [Darkside.dm:403]
								 (Z.client) [Darkside.dm:403]
							 [Darkside.dm:404]
								= [Darkside.dm:404]
									 (Z.client.eye) [Darkside.dm:404]
									 [Darkside.dm:404]
										locate [Darkside.dm:404]
											 (69) [Darkside.dm:404]
											 (14) [Darkside.dm:404]
											 (4) [Darkside.dm:404]
								spawn [Darkside.dm:405]
									 (180) [Darkside.dm:405]
								 [Darkside.dm:405]
									if [Darkside.dm:405]
										 [Darkside.dm:405]
											! [Darkside.dm:405]
												isnull [Darkside.dm:405]
													 (Z) [Darkside.dm:405]
									 [Darkside.dm:406]
										= [Darkside.dm:406]
											 (Z.client.eye) [Darkside.dm:406]
											 (Z) [Darkside.dm:406]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/atom) [Darkside.dme:0]
	.. (/atom) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/atom) [The Base.dmp:0]
	.. (/atom) [The Base.dmp:0]
	.. (/atom) [The Base.dmp:0]
turf [Darkside.dm:409]
	= [Darkside.dm:410]
		 (luminosity) [Darkside.dm:410]
		 (0) [Darkside.dm:410]
	= [Darkside.dm:411]
		 (icon) [Darkside.dm:411]
		 ('Mapping.dmi') [Darkside.dm:411]
	MouseDown [Darkside.dm:412]
		var [Darkside.dm:412]
			.arg [Darkside.dm:412]
				atom [Darkside.dm:412]
					Location [Darkside.dm:412]
		if [Darkside.dm:412]
			 [Darkside.dm:412]
				&& [Darkside.dm:412]
					 [Darkside.dm:412]
						istype [Darkside.dm:412]
							 (usr) [Darkside.dm:412]
							 (/mob/Player) [Darkside.dm:412]
					 [Darkside.dm:412]
						! [Darkside.dm:412]
							istype [Darkside.dm:412]
								 (src) [Darkside.dm:412]
								 (/turf/DoorControl) [Darkside.dm:412]
		 [Darkside.dm:413]
			var [Darkside.dm:413]
				mob [Darkside.dm:413]
					Player [Darkside.dm:413]
						X [Darkside.dm:413]
							 [Darkside.dm:413]
								= [Darkside.dm:413]
									 (usr) [Darkside.dm:413]
			= [Darkside.dm:414]
				 (X.Firing) [Darkside.dm:414]
				 (1) [Darkside.dm:414]
			= [Darkside.dm:415]
				 (X.Target) [Darkside.dm:415]
				 (src) [Darkside.dm:415]
			.call (X.Shooting) [Darkside.dm:416]
				 (X.Target) [Darkside.dm:416]
	proc [Darkside.dm:418]
		Flaming [Darkside.dm:418]
			var [Darkside.dm:418]
				.arg [Darkside.dm:418]
					Amount [Darkside.dm:418]
						 [Darkside.dm:418]
							= [Darkside.dm:418]
								 (30) [Darkside.dm:418]
					turf [Darkside.dm:418]
						Burning [Darkside.dm:418]
			spawn [Darkside.dm:418]
				 (5) [Darkside.dm:418]
			 [Darkside.dm:419]
				while [Darkside.dm:419]
					 [Darkside.dm:419]
						> [Darkside.dm:419]
							 (Amount) [Darkside.dm:419]
							 (0) [Darkside.dm:419]
				 [Darkside.dm:420]
					_block [Darkside.dm:420]
						var [Darkside.dm:420]
							atom [Darkside.dm:420]
								movable [Darkside.dm:420]
									X [Darkside.dm:420]
						for [Darkside.dm:420]
							 [Darkside.dm:420]
								in [Darkside.dm:420]
									 (X) [Darkside.dm:420]
									 (Burning) [Darkside.dm:420]
						 [Darkside.dm:421]
							.call (Damage) [Darkside.dm:421]
								 (src.Owner) [Darkside.dm:421]
								 (X) [Darkside.dm:421]
								 (1) [Darkside.dm:421]
								 ("Flame 0") [Darkside.dm:421]
								 (0) [Darkside.dm:421]
					.post-- (Amount) [Darkside.dm:422]
					sleep [Darkside.dm:422]
						 (3) [Darkside.dm:422]
				-= [Darkside.dm:423]
					 (src.overlays) [Darkside.dm:423]
					 (src.overlays) [Darkside.dm:423]
	Map [Darkside.dm:425]
		= [Darkside.dm:426]
			 (name) [Darkside.dm:426]
			 ("Base") [Darkside.dm:426]
	Spawns [Darkside.dm:427]
		var [Darkside.dm:428]
			Type [Darkside.dm:428]
				 [Darkside.dm:428]
					= [Darkside.dm:428]
						 (null) [Darkside.dm:428]
		var [Darkside.dm:429]
			Multiply [Darkside.dm:429]
				 [Darkside.dm:429]
					= [Darkside.dm:429]
						 (1) [Darkside.dm:429]
		= [Darkside.dm:430]
			 (name) [Darkside.dm:430]
			 ("Spawning Locations") [Darkside.dm:430]
		proc [Darkside.dm:431]
			Spawning [Darkside.dm:431]
				var [Darkside.dm:431]
					.arg [Darkside.dm:431]
				if [Darkside.dm:431]
					 [Darkside.dm:431]
						< [Darkside.dm:431]
							 (MobCount) [Darkside.dm:431]
							 (MobMax) [Darkside.dm:431]
				 [Darkside.dm:431]
					new [Darkside.dm:431]
						 (src.Type) [Darkside.dm:431]
						 (src) [Darkside.dm:431]
	Trees [Darkside.dm:433]
		= [Darkside.dm:434]
			 (name) [Darkside.dm:434]
			 ("Tree") [Darkside.dm:434]
		= [Darkside.dm:435]
			 (layer) [Darkside.dm:435]
			 (6) [Darkside.dm:435]
		Tree1 [Darkside.dm:436]
			= [Darkside.dm:437]
				 (icon) [Darkside.dm:437]
				 ('Tree1.bmp') [Darkside.dm:437]
		Tree2 [Darkside.dm:438]
			= [Darkside.dm:439]
				 (icon) [Darkside.dm:439]
				 ('Tree2.bmp') [Darkside.dm:439]
	Odds [Darkside.dm:440]
		= [Darkside.dm:441]
			 (layer) [Darkside.dm:441]
			 (6) [Darkside.dm:441]
		= [Darkside.dm:442]
			 (density) [Darkside.dm:442]
			 (1) [Darkside.dm:442]
		Machine1 [Darkside.dm:443]
			= [Darkside.dm:444]
				 (icon) [Darkside.dm:444]
				 ('machine.bmp') [Darkside.dm:444]
		Machine2 [Darkside.dm:445]
			= [Darkside.dm:446]
				 (icon) [Darkside.dm:446]
				 ('Container.bmp') [Darkside.dm:446]
	TitlePage [Darkside.dm:448]
		= [Darkside.dm:449]
			 (density) [Darkside.dm:449]
			 (1) [Darkside.dm:449]
		TA [Darkside.dm:450]
			= [Darkside.dm:451]
				 (icon) [Darkside.dm:451]
				 ('TitleA.bmp') [Darkside.dm:451]
			= [Darkside.dm:452]
				 (layer) [Darkside.dm:452]
				 (30) [Darkside.dm:452]
			= [Darkside.dm:453]
				 (luminosity) [Darkside.dm:453]
				 (2) [Darkside.dm:453]
		JoinButton [Darkside.dm:454]
			= [Darkside.dm:455]
				 (icon) [Darkside.dm:455]
				 ('JoinButton.bmp') [Darkside.dm:455]
			= [Darkside.dm:456]
				 (layer) [Darkside.dm:456]
				 (31) [Darkside.dm:456]
			Click [Darkside.dm:457]
				var [Darkside.dm:457]
					.arg [Darkside.dm:457]
				if [Darkside.dm:457]
					 [Darkside.dm:457]
						&& [Darkside.dm:457]
							 [Darkside.dm:457]
								! [Darkside.dm:457]
									 (Started) [Darkside.dm:457]
							 [Darkside.dm:457]
								! [Darkside.dm:457]
									 [Darkside.dm:457]
										in [Darkside.dm:457]
											 (usr) [Darkside.dm:457]
											 (PlayerList) [Darkside.dm:457]
				 [Darkside.dm:458]
					-= [Darkside.dm:458]
						 (ObserverList) [Darkside.dm:458]
						 (usr) [Darkside.dm:458]
					<< [Darkside.dm:459]
						 (world) [Darkside.dm:459]
						 [Darkside.dm:459]
							text ("<small>\[] has Joined.</small>") [Darkside.dm:459]
								 [Darkside.dm:459]
									 (usr) [Darkside.dm:459]
					+= [Darkside.dm:460]
						 (PlayerList) [Darkside.dm:460]
						 (usr) [Darkside.dm:460]
		ObserverButton [Darkside.dm:461]
			= [Darkside.dm:462]
				 (icon) [Darkside.dm:462]
				 ('ObserveButton.bmp') [Darkside.dm:462]
			= [Darkside.dm:463]
				 (layer) [Darkside.dm:463]
				 (31) [Darkside.dm:463]
			Click [Darkside.dm:464]
				var [Darkside.dm:464]
					.arg [Darkside.dm:464]
				if [Darkside.dm:464]
					 [Darkside.dm:464]
						! [Darkside.dm:464]
							 [Darkside.dm:464]
								in [Darkside.dm:464]
									 (usr) [Darkside.dm:464]
									 (ObserverList) [Darkside.dm:464]
				 [Darkside.dm:465]
					-= [Darkside.dm:465]
						 (PlayerList) [Darkside.dm:465]
						 (usr) [Darkside.dm:465]
					<< [Darkside.dm:466]
						 (world) [Darkside.dm:466]
						 [Darkside.dm:466]
							text ("<small>\[] is Observing.</small>") [Darkside.dm:466]
								 [Darkside.dm:466]
									 (usr) [Darkside.dm:466]
					+= [Darkside.dm:467]
						 (ObserverList) [Darkside.dm:467]
						 (usr) [Darkside.dm:467]
	Gore [Darkside.dm:469]
		= [Darkside.dm:470]
			 (icon) [Darkside.dm:470]
			 ('Gore.dmi') [Darkside.dm:470]
		= [Darkside.dm:471]
			 (layer) [Darkside.dm:471]
			 (3) [Darkside.dm:471]
	Grates [Darkside.dm:473]
		= [Darkside.dm:474]
			 (name) [Darkside.dm:474]
			 ("Grate") [Darkside.dm:474]
		= [Darkside.dm:475]
			 (opacity) [Darkside.dm:475]
			 (1) [Darkside.dm:475]
		Enter [Darkside.dm:476]
			var [Darkside.dm:477]
				.arg [Darkside.dm:477]
					mob [Darkside.dm:476]
						Monsters [Darkside.dm:476]
							X [Darkside.dm:476]
			if [Darkside.dm:477]
				 [Darkside.dm:477]
					&& [Darkside.dm:477]
						 [Darkside.dm:477]
							istype [Darkside.dm:477]
								 (X) [Darkside.dm:477]
								 (/mob/Monsters) [Darkside.dm:477]
						 [Darkside.dm:477]
							== [Darkside.dm:477]
								 (X.Size) [Darkside.dm:477]
								 ("Small") [Darkside.dm:477]
			 [Darkside.dm:477]
				return (1) [Darkside.dm:477]
			else [Darkside.dm:478]
				return (0) [Darkside.dm:478]
	DoorControl [Darkside.dm:480]
		var [Darkside.dm:481]
			Attach [Darkside.dm:481]
				 [Darkside.dm:481]
					= [Darkside.dm:481]
						 (0) [Darkside.dm:481]
		= [Darkside.dm:482]
			 (density) [Darkside.dm:482]
			 (1) [Darkside.dm:482]
		= [Darkside.dm:483]
			 (layer) [Darkside.dm:483]
			 (7) [Darkside.dm:483]
		= [Darkside.dm:484]
			 (name) [Darkside.dm:484]
			 ("Door Control Panel") [Darkside.dm:484]
		Click [Darkside.dm:485]
			var [Darkside.dm:485]
				.arg [Darkside.dm:485]
			if [Darkside.dm:485]
				 [Darkside.dm:485]
					&& [Darkside.dm:485]
						 [Darkside.dm:485]
							istype [Darkside.dm:485]
								 (usr) [Darkside.dm:485]
								 (/mob/Player) [Darkside.dm:485]
						 [Darkside.dm:485]
							<= [Darkside.dm:485]
								 [Darkside.dm:485]
									get_dist [Darkside.dm:485]
										 (usr) [Darkside.dm:485]
										 (src) [Darkside.dm:485]
								 (1) [Darkside.dm:485]
						 [Darkside.dm:485]
							! [Darkside.dm:485]
								isnull [Darkside.dm:485]
									 (Attach) [Darkside.dm:485]
			 [Darkside.dm:486]
				_block [Darkside.dm:486]
					var [Darkside.dm:486]
						obj [Darkside.dm:486]
							Special [Darkside.dm:486]
								Doors [Darkside.dm:486]
									X [Darkside.dm:486]
					for [Darkside.dm:486]
						 [Darkside.dm:486]
							in [Darkside.dm:486]
								 (X) [Darkside.dm:486]
								 (world) [Darkside.dm:486]
					 [Darkside.dm:486]
						if [Darkside.dm:486]
							 [Darkside.dm:486]
								== [Darkside.dm:486]
									 (X.tag) [Darkside.dm:486]
									 [Darkside.dm:486]
										text ("Door \[]") [Darkside.dm:486]
											 [Darkside.dm:486]
												 (Attach) [Darkside.dm:486]
						 [Darkside.dm:487]
							if [Darkside.dm:487]
								 [Darkside.dm:487]
									&& [Darkside.dm:487]
										 [Darkside.dm:487]
											! [Darkside.dm:487]
												isnull [Darkside.dm:487]
													 (X) [Darkside.dm:487]
										 [Darkside.dm:487]
											! [Darkside.dm:487]
												 (X.Opened) [Darkside.dm:487]
							 [Darkside.dm:488]
								= [Darkside.dm:488]
									 (X.density) [Darkside.dm:488]
									 (0) [Darkside.dm:488]
								= [Darkside.dm:488]
									 (X.Opened) [Darkside.dm:488]
									 (1) [Darkside.dm:488]
								spawn [Darkside.dm:489]
									 (5) [Darkside.dm:489]
								 [Darkside.dm:489]
									.call (X.Open) [Darkside.dm:489]
	SlaughterSpawn [Darkside.dm:491]
		var [Darkside.dm:492]
			Monster [Darkside.dm:492]
				 [Darkside.dm:492]
					= [Darkside.dm:492]
						 (null) [Darkside.dm:492]
		var [Darkside.dm:493]
			Amount [Darkside.dm:493]
				 [Darkside.dm:493]
					= [Darkside.dm:493]
						 (5) [Darkside.dm:493]
		var [Darkside.dm:494]
			MapNum [Darkside.dm:494]
				 [Darkside.dm:494]
					= [Darkside.dm:494]
						 (0) [Darkside.dm:494]
		proc [Darkside.dm:495]
			Spawning [Darkside.dm:495]
				var [Darkside.dm:495]
					.arg [Darkside.dm:495]
				if [Darkside.dm:495]
					 [Darkside.dm:495]
						< [Darkside.dm:495]
							 (MobCount) [Darkside.dm:495]
							 (MobMax) [Darkside.dm:495]
				 [Darkside.dm:496]
					_block [Darkside.dm:496]
						var [Darkside.dm:496]
							I [Darkside.dm:496]
						for [Darkside.dm:496]
							 [Darkside.dm:496]
								= [Darkside.dm:496]
									 (I) [Darkside.dm:496]
									 [Darkside.dm:496]
										rand [Darkside.dm:496]
											 (Players) [Darkside.dm:496]
											 [Darkside.dm:496]
												* [Darkside.dm:496]
													 (Players) [Darkside.dm:496]
													 (3) [Darkside.dm:496]
							 [Darkside.dm:496]
								> [Darkside.dm:496]
									 (I) [Darkside.dm:496]
									 (0) [Darkside.dm:496]
							 [Darkside.dm:496]
								.post-- (I) [Darkside.dm:496]
						 [Darkside.dm:497]
							if [Darkside.dm:497]
								 [Darkside.dm:497]
									&& [Darkside.dm:497]
										 [Darkside.dm:497]
											> [Darkside.dm:497]
												 (WaveCount) [Darkside.dm:497]
												 (3) [Darkside.dm:497]
										 [Darkside.dm:497]
											prob [Darkside.dm:497]
												 (40) [Darkside.dm:497]
							 [Darkside.dm:498]
								= [Darkside.dm:498]
									 (Monster) [Darkside.dm:498]
									 (/mob/Monsters/Maggot) [Darkside.dm:498]
							else [Darkside.dm:499]
								if [Darkside.dm:499]
									 [Darkside.dm:499]
										&& [Darkside.dm:499]
											 [Darkside.dm:499]
												> [Darkside.dm:499]
													 (WaveCount) [Darkside.dm:499]
													 (5) [Darkside.dm:499]
											 [Darkside.dm:499]
												prob [Darkside.dm:499]
													 (30) [Darkside.dm:499]
								 [Darkside.dm:500]
									= [Darkside.dm:500]
										 (Monster) [Darkside.dm:500]
										 (/mob/Monsters/Defiler) [Darkside.dm:500]
								else [Darkside.dm:501]
									if [Darkside.dm:501]
										 [Darkside.dm:501]
											&& [Darkside.dm:501]
												 [Darkside.dm:501]
													> [Darkside.dm:501]
														 (WaveCount) [Darkside.dm:501]
														 (10) [Darkside.dm:501]
												 [Darkside.dm:501]
													prob [Darkside.dm:501]
														 [Darkside.dm:501]
															+ [Darkside.dm:501]
																 (8) [Darkside.dm:501]
																 (Hardness) [Darkside.dm:501]
									 [Darkside.dm:502]
										= [Darkside.dm:502]
											 (Monster) [Darkside.dm:502]
											 (/mob/Monsters/Reaver) [Darkside.dm:502]
									else [Darkside.dm:503]
										if [Darkside.dm:503]
											 [Darkside.dm:503]
												&& [Darkside.dm:503]
													 [Darkside.dm:503]
														> [Darkside.dm:503]
															 (WaveCount) [Darkside.dm:503]
															 (15) [Darkside.dm:503]
													 [Darkside.dm:503]
														prob [Darkside.dm:503]
															 [Darkside.dm:503]
																+ [Darkside.dm:503]
																	 (10) [Darkside.dm:503]
																	 (Hardness) [Darkside.dm:503]
										 [Darkside.dm:504]
											= [Darkside.dm:504]
												 (Monster) [Darkside.dm:504]
												 (/mob/Monsters/Imp) [Darkside.dm:504]
										else [Darkside.dm:505]
											if [Darkside.dm:505]
												 [Darkside.dm:505]
													&& [Darkside.dm:505]
														 [Darkside.dm:505]
															> [Darkside.dm:505]
																 (WaveCount) [Darkside.dm:505]
																 (12) [Darkside.dm:505]
														 [Darkside.dm:505]
															prob [Darkside.dm:505]
																 [Darkside.dm:505]
																	+ [Darkside.dm:505]
																		 (10) [Darkside.dm:505]
																		 (Hardness) [Darkside.dm:505]
											 [Darkside.dm:506]
												= [Darkside.dm:506]
													 (Monster) [Darkside.dm:506]
													 (/mob/Monsters/CarrionBeast) [Darkside.dm:506]
											else [Darkside.dm:507]
												if [Darkside.dm:507]
													 [Darkside.dm:507]
														&& [Darkside.dm:507]
															 [Darkside.dm:507]
																> [Darkside.dm:507]
																	 (WaveCount) [Darkside.dm:507]
																	 (8) [Darkside.dm:507]
															 [Darkside.dm:507]
																prob [Darkside.dm:507]
																	 [Darkside.dm:507]
																		+ [Darkside.dm:507]
																			 (6) [Darkside.dm:507]
																			 (Hardness) [Darkside.dm:507]
												 [Darkside.dm:508]
													= [Darkside.dm:508]
														 (Monster) [Darkside.dm:508]
														 (/mob/Monsters/Harbinger) [Darkside.dm:508]
												else [Darkside.dm:509]
													= [Darkside.dm:510]
														 (Monster) [Darkside.dm:510]
														 (/mob/Monsters/Zombie) [Darkside.dm:510]
							var [Darkside.dm:511]
								mob [Darkside.dm:511]
									Monsters [Darkside.dm:511]
										X [Darkside.dm:511]
											 [Darkside.dm:511]
												= [Darkside.dm:511]
													new [Darkside.dm:511]
														 (src.Monster) [Darkside.dm:511]
														 (src) [Darkside.dm:511]
							= [Darkside.dm:512]
								 (X.Value) [Darkside.dm:512]
								 (0) [Darkside.dm:512]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/atom) [Darkside.dme:0]
	.. (/atom) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/atom) [The Base.dmp:0]
	.. (/atom) [The Base.dmp:0]
	.. (/atom) [The Base.dmp:0]
mob [Darkside.dm:515]
	verb [Darkside.dm:515]
		opts [Darkside.dm:515]
			var [Darkside.dm:516]
				.arg [Darkside.dm:516]
			.call (client.Options) [Darkside.dm:516]
		go [Player and Weapons.dm:627]
			var [Player and Weapons.dm:627]
				.arg [Player and Weapons.dm:627]
			= [Player and Weapons.dm:627]
				 (loc) [Player and Weapons.dm:627]
				 [Player and Weapons.dm:627]
					locate [Player and Weapons.dm:627]
						 (2) [Player and Weapons.dm:627]
						 (2) [Player and Weapons.dm:627]
						 (1) [Player and Weapons.dm:627]
	Hunters [Npcs.dm:2]
		= [Npcs.dm:3]
			 (icon) [Npcs.dm:3]
			 ('Marine.dmi') [Npcs.dm:3]
		= [Npcs.dm:4]
			 (name) [Npcs.dm:4]
			 ("Hunter") [Npcs.dm:4]
		= [Npcs.dm:5]
			 (icon_state) [Npcs.dm:5]
			 ("Hunter") [Npcs.dm:5]
		= [Npcs.dm:6]
			 (Health) [Npcs.dm:6]
			 (20) [Npcs.dm:6]
		= [Npcs.dm:7]
			 (HealthMax) [Npcs.dm:7]
			 (20) [Npcs.dm:7]
		= [Npcs.dm:8]
			 (Attackible) [Npcs.dm:8]
			 (1) [Npcs.dm:8]
		var [Npcs.dm:9]
			Range [Npcs.dm:9]
				 [Npcs.dm:9]
					= [Npcs.dm:9]
						 (4) [Npcs.dm:9]
		= [Npcs.dm:10]
			 (Size) [Npcs.dm:10]
			 ("Normal") [Npcs.dm:10]
		New [Npcs.dm:11]
			var [Npcs.dm:12]
				.arg [Npcs.dm:12]
			.call (src.Hunters) [Npcs.dm:12]
			+= [Npcs.dm:13]
				 (src.overlays) [Npcs.dm:13]
				 [Npcs.dm:13]
					image [Npcs.dm:13]
						 [Npcs.dm:13]
							arglist [Npcs.dm:13]
								 [Npcs.dm:13]
									list [Npcs.dm:13]
										 ('Effects.dmi') [Npcs.dm:13]
										 [Npcs.dm:13]
											= [Npcs.dm:13]
												 ("icon_state") [Npcs.dm:13]
												 ("Pointer") [Npcs.dm:13]
										 [Npcs.dm:13]
											= [Npcs.dm:13]
												 ("pixel_y") [Npcs.dm:13]
												 (20) [Npcs.dm:13]
			.call (..) [Npcs.dm:14]
		proc [Npcs.dm:15]
			Hunters [Npcs.dm:15]
				var [Npcs.dm:16]
					.arg [Npcs.dm:16]
				if [Npcs.dm:16]
					 [Npcs.dm:16]
						isnull [Npcs.dm:16]
							 (src.Target) [Npcs.dm:16]
				 [Npcs.dm:17]
					_block [Npcs.dm:17]
						var [Npcs.dm:17]
							mob [Npcs.dm:17]
								Monsters [Npcs.dm:17]
									X [Npcs.dm:17]
						for [Npcs.dm:17]
							 [Npcs.dm:17]
								in [Npcs.dm:17]
									 (X) [Npcs.dm:17]
									 [Npcs.dm:17]
										view [Npcs.dm:17]
											 (Range) [Npcs.dm:17]
											 (src) [Npcs.dm:17]
						 [Npcs.dm:17]
							if [Npcs.dm:17]
								 [Npcs.dm:17]
									> [Npcs.dm:17]
										 (X.Health) [Npcs.dm:17]
										 (0) [Npcs.dm:17]
							 [Npcs.dm:18]
								if [Npcs.dm:18]
									 [Npcs.dm:18]
										|| [Npcs.dm:18]
											 [Npcs.dm:18]
												isnull [Npcs.dm:18]
													 (src.Target) [Npcs.dm:18]
											 [Npcs.dm:18]
												isobj [Npcs.dm:18]
													 (src.Target) [Npcs.dm:18]
											 [Npcs.dm:18]
												> [Npcs.dm:18]
													 [Npcs.dm:18]
														get_dist [Npcs.dm:18]
															 (src) [Npcs.dm:18]
															 (src.Target) [Npcs.dm:18]
													 [Npcs.dm:18]
														get_dist [Npcs.dm:18]
															 (src) [Npcs.dm:18]
															 (X) [Npcs.dm:18]
								 [Npcs.dm:18]
									= [Npcs.dm:18]
										 (src.Target) [Npcs.dm:18]
										 (X) [Npcs.dm:18]
				if [Npcs.dm:19]
					 [Npcs.dm:19]
						! [Npcs.dm:19]
							isnull [Npcs.dm:19]
								 (src.Target) [Npcs.dm:19]
				 [Npcs.dm:20]
					_block [Npcs.dm:20]
						var [Npcs.dm:20]
							turf [Npcs.dm:20]
								A [Npcs.dm:20]
						for [Npcs.dm:20]
							 [Npcs.dm:20]
								in [Npcs.dm:20]
									 (A) [Npcs.dm:20]
									 [Npcs.dm:20]
										.call (getline) [Npcs.dm:20]
											 (src.Target) [Npcs.dm:20]
											 (src) [Npcs.dm:20]
						 [Npcs.dm:20]
							_block [Npcs.dm:20]
								var [Npcs.dm:20]
									obj [Npcs.dm:20]
										X [Npcs.dm:20]
								for [Npcs.dm:20]
									 [Npcs.dm:20]
										in [Npcs.dm:20]
											 (X) [Npcs.dm:20]
											 (A) [Npcs.dm:20]
								 [Npcs.dm:21]
									if [Npcs.dm:21]
										 [Npcs.dm:21]
											&& [Npcs.dm:21]
												 (X.density) [Npcs.dm:21]
												 [Npcs.dm:21]
													> [Npcs.dm:21]
														 (X.Health) [Npcs.dm:21]
														 (0) [Npcs.dm:21]
									 [Npcs.dm:21]
										= [Npcs.dm:21]
											 (src.Target) [Npcs.dm:21]
											 (X) [Npcs.dm:21]
				if [Npcs.dm:22]
					 [Npcs.dm:22]
						! [Npcs.dm:22]
							isnull [Npcs.dm:22]
								 (src.Target) [Npcs.dm:22]
				 [Npcs.dm:24]
					if [Npcs.dm:24]
						 [Npcs.dm:24]
							! [Npcs.dm:24]
								 [Npcs.dm:24]
									in [Npcs.dm:24]
										 (src.Target) [Npcs.dm:24]
										 [Npcs.dm:24]
											view [Npcs.dm:24]
												 (6) [Npcs.dm:24]
												 (src) [Npcs.dm:24]
					 [Npcs.dm:24]
						= [Npcs.dm:24]
							 (src.Target) [Npcs.dm:24]
							 (null) [Npcs.dm:24]
					else [Npcs.dm:25]
						if [Npcs.dm:25]
							 [Npcs.dm:25]
								> [Npcs.dm:25]
									 [Npcs.dm:25]
										get_dist [Npcs.dm:25]
											 (src) [Npcs.dm:25]
											 (src.Target) [Npcs.dm:25]
									 (3) [Npcs.dm:25]
						 [Npcs.dm:25]
							step_to [Npcs.dm:25]
								 (src) [Npcs.dm:25]
								 (src.Target) [Npcs.dm:25]
								 (1) [Npcs.dm:25]
					if [Npcs.dm:27]
						 [Npcs.dm:27]
							== [Npcs.dm:27]
								 (src.icon_state) [Npcs.dm:27]
								 ("Hunter Shotgun") [Npcs.dm:27]
					 [Npcs.dm:28]
						flick [Npcs.dm:28]
							 [Npcs.dm:28]
								text ("\[] Fire") [Npcs.dm:28]
									 [Npcs.dm:28]
										 (src.icon_state) [Npcs.dm:28]
							 (src) [Npcs.dm:28]
						.call (Damage) [Npcs.dm:29]
							 (src) [Npcs.dm:29]
							 (src.Target) [Npcs.dm:29]
							 [Npcs.dm:29]
								rand [Npcs.dm:29]
									 (2) [Npcs.dm:29]
									 (4) [Npcs.dm:29]
							 ("Slash") [Npcs.dm:29]
							 (25) [Npcs.dm:29]
						spawn [Npcs.dm:30]
							 (20) [Npcs.dm:30]
						 [Npcs.dm:30]
							.call (src.Hunters) [Npcs.dm:30]
					if [Npcs.dm:32]
						 [Npcs.dm:32]
							== [Npcs.dm:32]
								 (src.icon_state) [Npcs.dm:32]
								 ("Hunter Chaingun") [Npcs.dm:32]
					 [Npcs.dm:33]
						flick [Npcs.dm:33]
							 [Npcs.dm:33]
								text ("\[] Fire") [Npcs.dm:33]
									 [Npcs.dm:33]
										 (src.icon_state) [Npcs.dm:33]
							 (src) [Npcs.dm:33]
						missile [Npcs.dm:34]
							 [Npcs.dm:34]
								image [Npcs.dm:34]
									 [Npcs.dm:34]
										arglist [Npcs.dm:34]
											 [Npcs.dm:34]
												list [Npcs.dm:34]
													 ('Effects.dmi') [Npcs.dm:34]
													 [Npcs.dm:34]
														= [Npcs.dm:34]
															 ("icon_state") [Npcs.dm:34]
															 ("Bullet") [Npcs.dm:34]
													 [Npcs.dm:34]
														= [Npcs.dm:34]
															 ("pixel_y") [Npcs.dm:34]
															 [Npcs.dm:34]
																rand [Npcs.dm:34]
																	 (-5) [Npcs.dm:34]
																	 (5) [Npcs.dm:34]
													 [Npcs.dm:34]
														= [Npcs.dm:34]
															 ("pixel_x") [Npcs.dm:34]
															 [Npcs.dm:34]
																rand [Npcs.dm:34]
																	 (-5) [Npcs.dm:34]
																	 (5) [Npcs.dm:34]
							 (src) [Npcs.dm:34]
							 (src.Target) [Npcs.dm:34]
						if [Npcs.dm:35]
							 [Npcs.dm:35]
								! [Npcs.dm:35]
									isnull [Npcs.dm:35]
										 (src.Target) [Npcs.dm:35]
						 [Npcs.dm:35]
							.call (Damage) [Npcs.dm:35]
								 (src) [Npcs.dm:35]
								 (src.Target) [Npcs.dm:35]
								 [Npcs.dm:35]
									rand [Npcs.dm:35]
										 (1) [Npcs.dm:35]
										 (2) [Npcs.dm:35]
								 ("Slash") [Npcs.dm:35]
								 (25) [Npcs.dm:35]
						spawn [Npcs.dm:36]
							 (3) [Npcs.dm:36]
						 [Npcs.dm:36]
							.call (src.Hunters) [Npcs.dm:36]
				else [Npcs.dm:38]
					if [Npcs.dm:38]
						 [Npcs.dm:38]
							isnull [Npcs.dm:38]
								 (src.Target) [Npcs.dm:38]
					 [Npcs.dm:39]
						step_rand [Npcs.dm:39]
							 (src) [Npcs.dm:39]
						spawn [Npcs.dm:39]
							 (15) [Npcs.dm:39]
						 [Npcs.dm:39]
							.call (src.Hunters) [Npcs.dm:39]
		Del [Npcs.dm:40]
			var [Npcs.dm:41]
				.arg [Npcs.dm:41]
			+= [Npcs.dm:41]
				 (src.loc.underlays) [Npcs.dm:41]
				 [Npcs.dm:41]
					image [Npcs.dm:41]
						 [Npcs.dm:41]
							arglist [Npcs.dm:41]
								 [Npcs.dm:41]
									list [Npcs.dm:41]
										 ('Marine.dmi') [Npcs.dm:41]
										 [Npcs.dm:41]
											= [Npcs.dm:41]
												 ("icon_state") [Npcs.dm:41]
												 ("Hunter Dead") [Npcs.dm:41]
										 [Npcs.dm:41]
											= [Npcs.dm:41]
												 ("layer") [Npcs.dm:41]
												 (3) [Npcs.dm:41]
										 [Npcs.dm:41]
											= [Npcs.dm:41]
												 ("pixel_y") [Npcs.dm:41]
												 [Npcs.dm:41]
													rand [Npcs.dm:41]
														 (8) [Npcs.dm:41]
														 (8) [Npcs.dm:41]
										 [Npcs.dm:41]
											= [Npcs.dm:41]
												 ("pixel_x") [Npcs.dm:41]
												 [Npcs.dm:41]
													rand [Npcs.dm:41]
														 (8) [Npcs.dm:41]
														 (8) [Npcs.dm:41]
			.call (..) [Npcs.dm:42]
		DblClick [Npcs.dm:43]
			var [Npcs.dm:43]
				.arg [Npcs.dm:43]
			if [Npcs.dm:43]
				 [Npcs.dm:43]
					istype [Npcs.dm:43]
						 (usr) [Npcs.dm:43]
						 (/mob/Player) [Npcs.dm:43]
			 [Npcs.dm:43]
				if [Npcs.dm:43]
					 [Npcs.dm:43]
						|| [Npcs.dm:43]
							 [Npcs.dm:43]
								isnull [Npcs.dm:43]
									 (src.Target) [Npcs.dm:43]
							 [Npcs.dm:43]
								> [Npcs.dm:43]
									 [Npcs.dm:43]
										get_dist [Npcs.dm:43]
											 (src) [Npcs.dm:43]
											 (src.Target) [Npcs.dm:43]
									 (6) [Npcs.dm:43]
				 [Npcs.dm:44]
					<< [Npcs.dm:44]
						 (usr) [Npcs.dm:44]
						 [Npcs.dm:44]
							text ("<font color = green>\[] is now Covering you...</font>") [Npcs.dm:44]
								 [Npcs.dm:44]
									 (src) [Npcs.dm:44]
					walk_to [Npcs.dm:45]
						 (src) [Npcs.dm:45]
						 (usr) [Npcs.dm:45]
						 (1) [Npcs.dm:45]
						 (4) [Npcs.dm:45]
	Monsters [Npcs.dm:47]
		var [Npcs.dm:48]
			Delay [Npcs.dm:48]
				 [Npcs.dm:48]
					= [Npcs.dm:48]
						 (30) [Npcs.dm:48]
		var [Npcs.dm:49]
			Range [Npcs.dm:49]
				 [Npcs.dm:49]
					= [Npcs.dm:49]
						 (5) [Npcs.dm:49]
		var [Npcs.dm:50]
			Comm [Npcs.dm:50]
				 [Npcs.dm:50]
					= [Npcs.dm:50]
						 (0) [Npcs.dm:50]
		var [Npcs.dm:51]
			Damage [Npcs.dm:51]
				 [Npcs.dm:51]
					= [Npcs.dm:51]
						 (0) [Npcs.dm:51]
		var [Npcs.dm:52]
			Attack [Npcs.dm:52]
				 [Npcs.dm:52]
					= [Npcs.dm:52]
						 (1) [Npcs.dm:52]
		= [Npcs.dm:55]
			 (Health) [Npcs.dm:55]
			 (50) [Npcs.dm:55]
		= [Npcs.dm:56]
			 (icon) [Npcs.dm:56]
			 ('Monsters.dmi') [Npcs.dm:56]
		= [Npcs.dm:57]
			 (mouse_over_pointer) [Npcs.dm:57]
			 ("LockOn") [Npcs.dm:57]
		= [Npcs.dm:58]
			 (see_in_dark) [Npcs.dm:58]
			 (2) [Npcs.dm:58]
		Zombie [Npcs.dm:60]
			= [Npcs.dm:61]
				 (name) [Npcs.dm:61]
				 ("Zombie") [Npcs.dm:61]
			= [Npcs.dm:62]
				 (icon_state) [Npcs.dm:62]
				 ("Zombie 1") [Npcs.dm:62]
			= [Npcs.dm:63]
				 (Health) [Npcs.dm:63]
				 (16) [Npcs.dm:63]
			= [Npcs.dm:64]
				 (HealthMax) [Npcs.dm:64]
				 (16) [Npcs.dm:64]
			= [Npcs.dm:65]
				 (Range) [Npcs.dm:65]
				 (6) [Npcs.dm:65]
			= [Npcs.dm:66]
				 (Comm) [Npcs.dm:66]
				 (8) [Npcs.dm:66]
			= [Npcs.dm:67]
				 (see_in_dark) [Npcs.dm:67]
				 (3) [Npcs.dm:67]
			= [Npcs.dm:68]
				 (Damage) [Npcs.dm:68]
				 (2) [Npcs.dm:68]
			= [Npcs.dm:69]
				 (Delay) [Npcs.dm:69]
				 (25) [Npcs.dm:69]
			= [Npcs.dm:70]
				 (Size) [Npcs.dm:70]
				 ("Normal") [Npcs.dm:70]
			proc [Npcs.dm:71]
				Zombie [Npcs.dm:71]
					var [Npcs.dm:72]
						.arg [Npcs.dm:72]
					.call (src.Attack) [Npcs.dm:72]
					if [Npcs.dm:73]
						 [Npcs.dm:73]
							! [Npcs.dm:73]
								isnull [Npcs.dm:73]
									 (src.Target) [Npcs.dm:73]
					 [Npcs.dm:74]
						if [Npcs.dm:74]
							 [Npcs.dm:74]
								! [Npcs.dm:74]
									 [Npcs.dm:74]
										in [Npcs.dm:74]
											 (src.Target) [Npcs.dm:74]
											 [Npcs.dm:74]
												view [Npcs.dm:74]
						 [Npcs.dm:75]
							= [Npcs.dm:75]
								 (src.Target) [Npcs.dm:75]
								 (null) [Npcs.dm:75]
						else [Npcs.dm:76]
							if [Npcs.dm:76]
								 [Npcs.dm:76]
									> [Npcs.dm:76]
										 [Npcs.dm:76]
											get_dist [Npcs.dm:76]
												 (src) [Npcs.dm:76]
												 (src.Target) [Npcs.dm:76]
										 (1) [Npcs.dm:76]
							 [Npcs.dm:77]
								step_to [Npcs.dm:77]
									 (src) [Npcs.dm:77]
									 (src.Target) [Npcs.dm:77]
									 (1) [Npcs.dm:77]
								= [Npcs.dm:78]
									 (Delay) [Npcs.dm:78]
									 (25) [Npcs.dm:78]
								if [Npcs.dm:79]
									 [Npcs.dm:79]
										> [Npcs.dm:79]
											 (Comm) [Npcs.dm:79]
											 (0) [Npcs.dm:79]
								 [Npcs.dm:79]
									_block [Npcs.dm:79]
										var [Npcs.dm:79]
											mob [Npcs.dm:79]
												Monsters [Npcs.dm:79]
													Zombie [Npcs.dm:79]
														X [Npcs.dm:79]
										for [Npcs.dm:79]
											 [Npcs.dm:79]
												in [Npcs.dm:79]
													 (X) [Npcs.dm:79]
													 [Npcs.dm:79]
														oview [Npcs.dm:79]
															 (Comm) [Npcs.dm:79]
															 (src) [Npcs.dm:79]
										 [Npcs.dm:80]
											if [Npcs.dm:80]
												 [Npcs.dm:80]
													isnull [Npcs.dm:80]
														 (X.Target) [Npcs.dm:80]
											 [Npcs.dm:80]
												= [Npcs.dm:80]
													 (X.Target) [Npcs.dm:80]
													 (src.Target) [Npcs.dm:80]
							else [Npcs.dm:81]
								= [Npcs.dm:82]
									 (src.dir) [Npcs.dm:82]
									 [Npcs.dm:82]
										get_dir [Npcs.dm:82]
											 (src) [Npcs.dm:82]
											 (src.Target) [Npcs.dm:82]
								flick [Npcs.dm:82]
									 [Npcs.dm:82]
										text ("\[] Fire") [Npcs.dm:82]
											 [Npcs.dm:82]
												 (src.icon_state) [Npcs.dm:82]
									 (src) [Npcs.dm:82]
								.call (Damage) [Npcs.dm:83]
									 (src) [Npcs.dm:83]
									 (src.Target) [Npcs.dm:83]
									 (src.Damage) [Npcs.dm:83]
									 ("Chop") [Npcs.dm:83]
									 (35) [Npcs.dm:83]
						spawn [Npcs.dm:84]
							 (15) [Npcs.dm:84]
						 [Npcs.dm:84]
							.call (src.Zombie) [Npcs.dm:84]
						return [Npcs.dm:84]
					if [Npcs.dm:85]
						 [Npcs.dm:85]
							isnull [Npcs.dm:85]
								 (src.Target) [Npcs.dm:85]
					 [Npcs.dm:86]
						= [Npcs.dm:86]
							 (Delay) [Npcs.dm:86]
							 (25) [Npcs.dm:86]
						step_rand [Npcs.dm:87]
							 (src) [Npcs.dm:87]
					spawn [Npcs.dm:88]
						 [Npcs.dm:88]
							rand [Npcs.dm:88]
								 [Npcs.dm:88]
									/ [Npcs.dm:88]
										 (Delay) [Npcs.dm:88]
										 (2) [Npcs.dm:88]
								 [Npcs.dm:88]
									+ [Npcs.dm:88]
										 (Delay) [Npcs.dm:88]
										 (10) [Npcs.dm:88]
					 [Npcs.dm:88]
						.call (src.Zombie) [Npcs.dm:88]
			New [Npcs.dm:89]
				var [Npcs.dm:90]
					.arg [Npcs.dm:90]
				= [Npcs.dm:90]
					 (src.icon_state) [Npcs.dm:90]
					 [Npcs.dm:90]
						text ("Zombie \[]") [Npcs.dm:90]
							 [Npcs.dm:90]
								rand [Npcs.dm:90]
									 (1) [Npcs.dm:90]
									 (2) [Npcs.dm:90]
				if [Npcs.dm:91]
					 [Npcs.dm:91]
						== [Npcs.dm:91]
							 (src.icon_state) [Npcs.dm:91]
							 ("Zombie 2") [Npcs.dm:91]
				 [Npcs.dm:92]
					+= [Npcs.dm:92]
						 (src.Damage) [Npcs.dm:92]
						 (3) [Npcs.dm:92]
					if [Npcs.dm:93]
						 [Npcs.dm:93]
							prob [Npcs.dm:93]
								 (15) [Npcs.dm:93]
					 [Npcs.dm:93]
						new [Npcs.dm:93]
							 (/obj/Items/Weapons/Chainsaw) [Npcs.dm:93]
							 (src) [Npcs.dm:93]
				.call (..) [Npcs.dm:94]
				.call (src.Zombie) [Npcs.dm:95]
		Imp [Npcs.dm:97]
			= [Npcs.dm:98]
				 (name) [Npcs.dm:98]
				 ("Imp") [Npcs.dm:98]
			= [Npcs.dm:99]
				 (icon_state) [Npcs.dm:99]
				 ("Imp") [Npcs.dm:99]
			= [Npcs.dm:100]
				 (Health) [Npcs.dm:100]
				 (20) [Npcs.dm:100]
			= [Npcs.dm:101]
				 (HealthMax) [Npcs.dm:101]
				 (20) [Npcs.dm:101]
			= [Npcs.dm:102]
				 (Range) [Npcs.dm:102]
				 (6) [Npcs.dm:102]
			= [Npcs.dm:103]
				 (see_in_dark) [Npcs.dm:103]
				 (4) [Npcs.dm:103]
			= [Npcs.dm:104]
				 (Damage) [Npcs.dm:104]
				 (3) [Npcs.dm:104]
			= [Npcs.dm:105]
				 (Delay) [Npcs.dm:105]
				 (4) [Npcs.dm:105]
			= [Npcs.dm:106]
				 (Value) [Npcs.dm:106]
				 (20) [Npcs.dm:106]
			= [Npcs.dm:107]
				 (Size) [Npcs.dm:107]
				 ("Normal") [Npcs.dm:107]
			proc [Npcs.dm:108]
				Imp [Npcs.dm:108]
					var [Npcs.dm:109]
						.arg [Npcs.dm:109]
					.call (src.Attack) [Npcs.dm:109]
					if [Npcs.dm:110]
						 [Npcs.dm:110]
							! [Npcs.dm:110]
								isnull [Npcs.dm:110]
									 (src.Target) [Npcs.dm:110]
					 [Npcs.dm:111]
						if [Npcs.dm:111]
							 [Npcs.dm:111]
								! [Npcs.dm:111]
									 [Npcs.dm:111]
										in [Npcs.dm:111]
											 (src.Target) [Npcs.dm:111]
											 [Npcs.dm:111]
												view [Npcs.dm:111]
						 [Npcs.dm:112]
							= [Npcs.dm:112]
								 (src.Target) [Npcs.dm:112]
								 (null) [Npcs.dm:112]
						else [Npcs.dm:113]
							if [Npcs.dm:113]
								 [Npcs.dm:113]
									> [Npcs.dm:113]
										 [Npcs.dm:113]
											get_dist [Npcs.dm:113]
												 (src) [Npcs.dm:113]
												 (src.Target) [Npcs.dm:113]
										 (1) [Npcs.dm:113]
							 [Npcs.dm:114]
								step_to [Npcs.dm:114]
									 (src) [Npcs.dm:114]
									 (src.Target) [Npcs.dm:114]
									 (1) [Npcs.dm:114]
								if [Npcs.dm:115]
									 [Npcs.dm:115]
										> [Npcs.dm:115]
											 (Comm) [Npcs.dm:115]
											 (0) [Npcs.dm:115]
								 [Npcs.dm:115]
									_block [Npcs.dm:115]
										var [Npcs.dm:115]
											mob [Npcs.dm:115]
												Monsters [Npcs.dm:115]
													Zombie [Npcs.dm:115]
														X [Npcs.dm:115]
										for [Npcs.dm:115]
											 [Npcs.dm:115]
												in [Npcs.dm:115]
													 (X) [Npcs.dm:115]
													 [Npcs.dm:115]
														oview [Npcs.dm:115]
															 (Comm) [Npcs.dm:115]
															 (src) [Npcs.dm:115]
										 [Npcs.dm:116]
											if [Npcs.dm:116]
												 [Npcs.dm:116]
													isnull [Npcs.dm:116]
														 (X.Target) [Npcs.dm:116]
											 [Npcs.dm:116]
												= [Npcs.dm:116]
													 (X.Target) [Npcs.dm:116]
													 (src.Target) [Npcs.dm:116]
							else [Npcs.dm:117]
								if [Npcs.dm:117]
									 (src.Attack) [Npcs.dm:117]
								 [Npcs.dm:118]
									= [Npcs.dm:118]
										 (src.dir) [Npcs.dm:118]
										 [Npcs.dm:118]
											get_dir [Npcs.dm:118]
												 (src) [Npcs.dm:118]
												 (src.Target) [Npcs.dm:118]
									flick [Npcs.dm:118]
										 [Npcs.dm:118]
											text ("\[] Fire") [Npcs.dm:118]
												 [Npcs.dm:118]
													 (src.icon_state) [Npcs.dm:118]
										 (src) [Npcs.dm:118]
									.call (Damage) [Npcs.dm:119]
										 (src) [Npcs.dm:119]
										 (src.Target) [Npcs.dm:119]
										 (src.Damage) [Npcs.dm:119]
										 ("Chop") [Npcs.dm:119]
										 (35) [Npcs.dm:119]
									= [Npcs.dm:120]
										 (src.Attack) [Npcs.dm:120]
										 (0) [Npcs.dm:120]
									spawn [Npcs.dm:121]
										 (15) [Npcs.dm:121]
									 [Npcs.dm:121]
										= [Npcs.dm:121]
											 (src.Attack) [Npcs.dm:121]
											 (1) [Npcs.dm:121]
									.call (src.Imp) [Npcs.dm:121]
									return [Npcs.dm:121]
								else [Npcs.dm:122]
									if [Npcs.dm:122]
										 [Npcs.dm:122]
											! [Npcs.dm:122]
												 (src.Attack) [Npcs.dm:122]
									 [Npcs.dm:123]
										if [Npcs.dm:123]
											 [Npcs.dm:123]
												prob [Npcs.dm:123]
													 (80) [Npcs.dm:123]
										 [Npcs.dm:124]
											step_to [Npcs.dm:124]
												 (src) [Npcs.dm:124]
												 [Npcs.dm:124]
													get_step [Npcs.dm:124]
														 (src.Target) [Npcs.dm:124]
														 [Npcs.dm:124]
															turn [Npcs.dm:124]
																 (src.Target/:/dir) [Npcs.dm:124]
																 (180) [Npcs.dm:124]
												 (0) [Npcs.dm:124]
										else [Npcs.dm:125]
											var [Npcs.dm:126]
												turf [Npcs.dm:126]
													Ports [Npcs.dm:126]
														 [Npcs.dm:126]
															= [Npcs.dm:126]
																list [Npcs.dm:126]
											_block [Npcs.dm:127]
												var [Npcs.dm:127]
													turf [Npcs.dm:127]
														X [Npcs.dm:127]
												for [Npcs.dm:127]
													 [Npcs.dm:127]
														in [Npcs.dm:127]
															 (X) [Npcs.dm:127]
															 [Npcs.dm:127]
																oview [Npcs.dm:127]
																	 (3) [Npcs.dm:127]
																	 (src) [Npcs.dm:127]
												 [Npcs.dm:127]
													if [Npcs.dm:127]
														 [Npcs.dm:127]
															&& [Npcs.dm:127]
																 [Npcs.dm:127]
																	! [Npcs.dm:127]
																		 (X.density) [Npcs.dm:127]
																 [Npcs.dm:127]
																	! [Npcs.dm:127]
																		length [Npcs.dm:127]
																			 (X.contents) [Npcs.dm:127]
													 [Npcs.dm:128]
														+= [Npcs.dm:128]
															 (Ports) [Npcs.dm:128]
															 (X) [Npcs.dm:128]
											var [Npcs.dm:129]
												turf [Npcs.dm:129]
													X [Npcs.dm:129]
														 [Npcs.dm:129]
															= [Npcs.dm:129]
																pick [Npcs.dm:129]
																	 (Ports) [Npcs.dm:129]
											missile [Npcs.dm:130]
												 [Npcs.dm:130]
													image [Npcs.dm:130]
														 [Npcs.dm:130]
															arglist [Npcs.dm:130]
																 [Npcs.dm:130]
																	list [Npcs.dm:130]
																		 ('Effects.dmi') [Npcs.dm:130]
																		 [Npcs.dm:130]
																			= [Npcs.dm:130]
																				 ("icon_state") [Npcs.dm:130]
																				 ("TeleFlame") [Npcs.dm:130]
																		 [Npcs.dm:130]
																			= [Npcs.dm:130]
																				 ("layer") [Npcs.dm:130]
																				 (6) [Npcs.dm:130]
																		 [Npcs.dm:130]
																			= [Npcs.dm:130]
																				 ("pixel_y") [Npcs.dm:130]
																				 [Npcs.dm:130]
																					rand [Npcs.dm:130]
																						 (5) [Npcs.dm:130]
																						 (-5) [Npcs.dm:130]
																		 [Npcs.dm:130]
																			= [Npcs.dm:130]
																				 ("pixel_x") [Npcs.dm:130]
																				 [Npcs.dm:130]
																					rand [Npcs.dm:130]
																						 (5) [Npcs.dm:130]
																						 (-5) [Npcs.dm:130]
												 (src) [Npcs.dm:130]
												 (X) [Npcs.dm:130]
											.call (src.Move) [Npcs.dm:131]
												 (X) [Npcs.dm:131]
					if [Npcs.dm:132]
						 [Npcs.dm:132]
							isnull [Npcs.dm:132]
								 (src.Target) [Npcs.dm:132]
					 [Npcs.dm:133]
						= [Npcs.dm:133]
							 (Delay) [Npcs.dm:133]
							 (4) [Npcs.dm:133]
						step_rand [Npcs.dm:134]
							 (src) [Npcs.dm:134]
					spawn [Npcs.dm:135]
						 (Delay) [Npcs.dm:135]
					 [Npcs.dm:135]
						.call (src.Imp) [Npcs.dm:135]
			New [Npcs.dm:136]
				var [Npcs.dm:137]
					.arg [Npcs.dm:137]
				.call (..) [Npcs.dm:137]
				.call (src.Imp) [Npcs.dm:138]
		Harbinger [Npcs.dm:139]
			= [Npcs.dm:140]
				 (name) [Npcs.dm:140]
				 ("Harbinger") [Npcs.dm:140]
			= [Npcs.dm:141]
				 (icon_state) [Npcs.dm:141]
				 ("Soul") [Npcs.dm:141]
			= [Npcs.dm:142]
				 (Health) [Npcs.dm:142]
				 (1) [Npcs.dm:142]
			= [Npcs.dm:143]
				 (HealthMax) [Npcs.dm:143]
				 (1) [Npcs.dm:143]
			= [Npcs.dm:144]
				 (Range) [Npcs.dm:144]
				 (8) [Npcs.dm:144]
			= [Npcs.dm:145]
				 (see_in_dark) [Npcs.dm:145]
				 (8) [Npcs.dm:145]
			= [Npcs.dm:146]
				 (Damage) [Npcs.dm:146]
				 (1) [Npcs.dm:146]
			= [Npcs.dm:147]
				 (density) [Npcs.dm:147]
				 (0) [Npcs.dm:147]
			= [Npcs.dm:148]
				 (Delay) [Npcs.dm:148]
				 (2) [Npcs.dm:148]
			= [Npcs.dm:149]
				 (Value) [Npcs.dm:149]
				 (20) [Npcs.dm:149]
			proc [Npcs.dm:150]
				Harbinger [Npcs.dm:150]
					var [Npcs.dm:151]
						.arg [Npcs.dm:151]
					.call (src.Attack) [Npcs.dm:151]
					if [Npcs.dm:152]
						 [Npcs.dm:152]
							! [Npcs.dm:152]
								isnull [Npcs.dm:152]
									 (src.Target) [Npcs.dm:152]
					 [Npcs.dm:153]
						if [Npcs.dm:153]
							 [Npcs.dm:153]
								! [Npcs.dm:153]
									 [Npcs.dm:153]
										in [Npcs.dm:153]
											 (src.Target) [Npcs.dm:153]
											 [Npcs.dm:153]
												range [Npcs.dm:153]
													 (src.Range) [Npcs.dm:153]
													 (src) [Npcs.dm:153]
						 [Npcs.dm:154]
							= [Npcs.dm:154]
								 (src.Target) [Npcs.dm:154]
								 (null) [Npcs.dm:154]
						else [Npcs.dm:155]
							if [Npcs.dm:155]
								 [Npcs.dm:155]
									&& [Npcs.dm:155]
										 (src.Attack) [Npcs.dm:155]
										 [Npcs.dm:155]
											ismob [Npcs.dm:155]
												 (src.Target) [Npcs.dm:155]
										 [Npcs.dm:155]
											> [Npcs.dm:155]
												 [Npcs.dm:155]
													get_dist [Npcs.dm:155]
														 (src) [Npcs.dm:155]
														 (src.Target) [Npcs.dm:155]
												 (0) [Npcs.dm:155]
							 [Npcs.dm:156]
								step_to [Npcs.dm:156]
									 (src) [Npcs.dm:156]
									 (src.Target) [Npcs.dm:156]
									 (0) [Npcs.dm:156]
								= [Npcs.dm:157]
									 (src.Delay) [Npcs.dm:157]
									 (1) [Npcs.dm:157]
								if [Npcs.dm:158]
									 [Npcs.dm:158]
										> [Npcs.dm:158]
											 (Comm) [Npcs.dm:158]
											 (0) [Npcs.dm:158]
								 [Npcs.dm:158]
									_block [Npcs.dm:158]
										var [Npcs.dm:158]
											mob [Npcs.dm:158]
												Monsters [Npcs.dm:158]
													X [Npcs.dm:158]
										for [Npcs.dm:158]
											 [Npcs.dm:158]
												in [Npcs.dm:158]
													 (X) [Npcs.dm:158]
													 [Npcs.dm:158]
														oview [Npcs.dm:158]
															 (Comm) [Npcs.dm:158]
															 (src) [Npcs.dm:158]
										 [Npcs.dm:159]
											if [Npcs.dm:159]
												 [Npcs.dm:159]
													isnull [Npcs.dm:159]
														 (X.Target) [Npcs.dm:159]
											 [Npcs.dm:159]
												= [Npcs.dm:159]
													 (X.Target) [Npcs.dm:159]
													 (src.Target) [Npcs.dm:159]
							else [Npcs.dm:160]
								if [Npcs.dm:160]
									 [Npcs.dm:160]
										&& [Npcs.dm:160]
											 (src.Attack) [Npcs.dm:160]
											 [Npcs.dm:160]
												ismob [Npcs.dm:160]
													 (src.Target) [Npcs.dm:160]
											 [Npcs.dm:160]
												== [Npcs.dm:160]
													 [Npcs.dm:160]
														get_dist [Npcs.dm:160]
															 (src) [Npcs.dm:160]
															 (src.Target) [Npcs.dm:160]
													 (0) [Npcs.dm:160]
								 [Npcs.dm:161]
									.call (Damage) [Npcs.dm:161]
										 (src) [Npcs.dm:161]
										 (src.Target) [Npcs.dm:161]
										 (src.Damage) [Npcs.dm:161]
										 ("Flame 0") [Npcs.dm:161]
										 (25) [Npcs.dm:161]
									= [Npcs.dm:162]
										 (src.Attack) [Npcs.dm:162]
										 (0) [Npcs.dm:162]
									spawn [Npcs.dm:163]
										 (10) [Npcs.dm:163]
									 [Npcs.dm:163]
										= [Npcs.dm:163]
											 (src.Attack) [Npcs.dm:163]
											 (1) [Npcs.dm:163]
								else [Npcs.dm:164]
									if [Npcs.dm:164]
										 [Npcs.dm:164]
											! [Npcs.dm:164]
												 (src.Attack) [Npcs.dm:164]
									 [Npcs.dm:164]
										step_away [Npcs.dm:164]
											 (src) [Npcs.dm:164]
											 (src.Target) [Npcs.dm:164]
											 (6) [Npcs.dm:164]
						spawn [Npcs.dm:165]
							 (1) [Npcs.dm:165]
						 [Npcs.dm:165]
							.call (src.Harbinger) [Npcs.dm:165]
						return [Npcs.dm:165]
					if [Npcs.dm:166]
						 [Npcs.dm:166]
							isnull [Npcs.dm:166]
								 (src.Target) [Npcs.dm:166]
					 [Npcs.dm:167]
						= [Npcs.dm:167]
							 (src.Delay) [Npcs.dm:167]
							 (10) [Npcs.dm:167]
						step_rand [Npcs.dm:168]
							 (src) [Npcs.dm:168]
					spawn [Npcs.dm:169]
						 (Delay) [Npcs.dm:169]
					 [Npcs.dm:169]
						.call (src.Harbinger) [Npcs.dm:169]
			New [Npcs.dm:170]
				var [Npcs.dm:171]
					.arg [Npcs.dm:171]
				.call (..) [Npcs.dm:171]
				spawn [Npcs.dm:172]
					 (Delay) [Npcs.dm:172]
				 [Npcs.dm:172]
					.call (src.Harbinger) [Npcs.dm:172]
		CarrionBeast [Npcs.dm:174]
			= [Npcs.dm:175]
				 (name) [Npcs.dm:175]
				 ("Carrion Beast") [Npcs.dm:175]
			= [Npcs.dm:176]
				 (icon_state) [Npcs.dm:176]
				 ("Carrion Beast") [Npcs.dm:176]
			= [Npcs.dm:177]
				 (Health) [Npcs.dm:177]
				 (20) [Npcs.dm:177]
			= [Npcs.dm:178]
				 (HealthMax) [Npcs.dm:178]
				 (20) [Npcs.dm:178]
			= [Npcs.dm:179]
				 (Armor) [Npcs.dm:179]
				 (20) [Npcs.dm:179]
			= [Npcs.dm:180]
				 (Range) [Npcs.dm:180]
				 (8) [Npcs.dm:180]
			= [Npcs.dm:181]
				 (see_in_dark) [Npcs.dm:181]
				 (6) [Npcs.dm:181]
			= [Npcs.dm:182]
				 (Damage) [Npcs.dm:182]
				 (8) [Npcs.dm:182]
			= [Npcs.dm:183]
				 (Delay) [Npcs.dm:183]
				 (8) [Npcs.dm:183]
			= [Npcs.dm:184]
				 (see_in_dark) [Npcs.dm:184]
				 (5) [Npcs.dm:184]
			= [Npcs.dm:185]
				 (Carrion) [Npcs.dm:185]
				 (6) [Npcs.dm:185]
			= [Npcs.dm:186]
				 (Size) [Npcs.dm:186]
				 ("Large") [Npcs.dm:186]
			proc [Npcs.dm:187]
				CarrionBeast [Npcs.dm:187]
					var [Npcs.dm:188]
						.arg [Npcs.dm:188]
					.call (src.Attack) [Npcs.dm:188]
					if [Npcs.dm:189]
						 [Npcs.dm:189]
							! [Npcs.dm:189]
								isnull [Npcs.dm:189]
									 (src.Target) [Npcs.dm:189]
					 [Npcs.dm:190]
						if [Npcs.dm:190]
							 [Npcs.dm:190]
								! [Npcs.dm:190]
									 [Npcs.dm:190]
										in [Npcs.dm:190]
											 (src.Target) [Npcs.dm:190]
											 [Npcs.dm:190]
												view [Npcs.dm:190]
						 [Npcs.dm:191]
							= [Npcs.dm:191]
								 (src.Target) [Npcs.dm:191]
								 (null) [Npcs.dm:191]
						else [Npcs.dm:193]
							if [Npcs.dm:193]
								 [Npcs.dm:193]
									> [Npcs.dm:193]
										 [Npcs.dm:193]
											get_dist [Npcs.dm:193]
												 (src) [Npcs.dm:193]
												 (src.Target) [Npcs.dm:193]
										 (1) [Npcs.dm:193]
							 [Npcs.dm:194]
								step_to [Npcs.dm:194]
									 (src) [Npcs.dm:194]
									 (src.Target) [Npcs.dm:194]
									 (1) [Npcs.dm:194]
							else [Npcs.dm:196]
								= [Npcs.dm:197]
									 (src.dir) [Npcs.dm:197]
									 [Npcs.dm:197]
										get_dir [Npcs.dm:197]
											 (src) [Npcs.dm:197]
											 (src.Target) [Npcs.dm:197]
								flick [Npcs.dm:197]
									 [Npcs.dm:197]
										text ("\[] Fire") [Npcs.dm:197]
											 [Npcs.dm:197]
												 (src.icon_state) [Npcs.dm:197]
									 (src) [Npcs.dm:197]
								.call (Damage) [Npcs.dm:198]
									 (src) [Npcs.dm:198]
									 (src.Target) [Npcs.dm:198]
									 (src.Damage) [Npcs.dm:198]
									 ("Chop") [Npcs.dm:198]
									 (85) [Npcs.dm:198]
						_block [Npcs.dm:200]
							var [Npcs.dm:200]
								turf [Npcs.dm:200]
									X [Npcs.dm:200]
							for [Npcs.dm:200]
								 [Npcs.dm:200]
									in [Npcs.dm:200]
										 (X) [Npcs.dm:200]
										 [Npcs.dm:200]
											oview [Npcs.dm:200]
												 (4) [Npcs.dm:200]
												 (src) [Npcs.dm:200]
							 [Npcs.dm:200]
								if [Npcs.dm:200]
									 [Npcs.dm:200]
										&& [Npcs.dm:200]
											 (X.Carrion) [Npcs.dm:200]
											 [Npcs.dm:200]
												prob [Npcs.dm:200]
													 (10) [Npcs.dm:200]
								 [Npcs.dm:201]
									while [Npcs.dm:201]
										 [Npcs.dm:201]
											&& [Npcs.dm:201]
												 [Npcs.dm:201]
													> [Npcs.dm:201]
														 (X.Carrion) [Npcs.dm:201]
														 (0) [Npcs.dm:201]
												 [Npcs.dm:201]
													< [Npcs.dm:201]
														 (src.Carrion) [Npcs.dm:201]
														 (10) [Npcs.dm:201]
									 [Npcs.dm:202]
										flick [Npcs.dm:202]
											 [Npcs.dm:202]
												text ("\[] Cast") [Npcs.dm:202]
													 [Npcs.dm:202]
														 (src.icon_state) [Npcs.dm:202]
											 (src) [Npcs.dm:202]
										missile [Npcs.dm:203]
											 [Npcs.dm:203]
												image [Npcs.dm:203]
													 [Npcs.dm:203]
														arglist [Npcs.dm:203]
															 [Npcs.dm:203]
																list [Npcs.dm:203]
																	 ('Gore.dmi') [Npcs.dm:203]
																	 [Npcs.dm:203]
																		= [Npcs.dm:203]
																			 ("icon_state") [Npcs.dm:203]
																			 ("Blood Smear") [Npcs.dm:203]
																	 [Npcs.dm:203]
																		= [Npcs.dm:203]
																			 ("pixel_y") [Npcs.dm:203]
																			 [Npcs.dm:203]
																				rand [Npcs.dm:203]
																					 (-5) [Npcs.dm:203]
																					 (5) [Npcs.dm:203]
																	 [Npcs.dm:203]
																		= [Npcs.dm:203]
																			 ("pixel_x") [Npcs.dm:203]
																			 [Npcs.dm:203]
																				rand [Npcs.dm:203]
																					 (-5) [Npcs.dm:203]
																					 (5) [Npcs.dm:203]
											 (X) [Npcs.dm:203]
											 (src) [Npcs.dm:203]
										sleep [Npcs.dm:204]
											 (1) [Npcs.dm:204]
										.post++ (src.Carrion) [Npcs.dm:205]
										.post-- (X.Carrion) [Npcs.dm:206]
									-= [Npcs.dm:207]
										 (X.underlays) [Npcs.dm:207]
										 (X.underlays) [Npcs.dm:207]
									= [Npcs.dm:208]
										 (X.Carrion) [Npcs.dm:208]
										 (0) [Npcs.dm:208]
						if [Npcs.dm:210]
							 [Npcs.dm:210]
								&& [Npcs.dm:210]
									 [Npcs.dm:210]
										>= [Npcs.dm:210]
											 (src.Carrion) [Npcs.dm:210]
											 (5) [Npcs.dm:210]
									 [Npcs.dm:210]
										< [Npcs.dm:210]
											 (src.Health) [Npcs.dm:210]
											 (5) [Npcs.dm:210]
						 [Npcs.dm:211]
							flick [Npcs.dm:211]
								 [Npcs.dm:211]
									text ("\[] Cast") [Npcs.dm:211]
										 [Npcs.dm:211]
											 (src.icon_state) [Npcs.dm:211]
								 (src) [Npcs.dm:211]
							+= [Npcs.dm:211]
								 (src.Health) [Npcs.dm:211]
								 (10) [Npcs.dm:211]
							-= [Npcs.dm:211]
								 (src.Carrion) [Npcs.dm:211]
								 (5) [Npcs.dm:211]
						else [Npcs.dm:212]
							if [Npcs.dm:212]
								 [Npcs.dm:212]
									&& [Npcs.dm:212]
										 [Npcs.dm:212]
											>= [Npcs.dm:212]
												 (src.Carrion) [Npcs.dm:212]
												 (3) [Npcs.dm:212]
										 [Npcs.dm:212]
											prob [Npcs.dm:212]
												 (65) [Npcs.dm:212]
										 [Npcs.dm:212]
											! [Npcs.dm:212]
												isnull [Npcs.dm:212]
													 (src.Target) [Npcs.dm:212]
							 [Npcs.dm:213]
								flick [Npcs.dm:213]
									 [Npcs.dm:213]
										text ("\[] Cast") [Npcs.dm:213]
											 [Npcs.dm:213]
												 (src.icon_state) [Npcs.dm:213]
									 (src) [Npcs.dm:213]
								var [Npcs.dm:214]
									mob [Npcs.dm:214]
										Monsters [Npcs.dm:214]
											CarrionDervish [Npcs.dm:214]
												Y [Npcs.dm:214]
													 [Npcs.dm:214]
														= [Npcs.dm:214]
															new [Npcs.dm:214]
																 [Npcs.dm:214]
																 (src.loc) [Npcs.dm:214]
								= [Npcs.dm:215]
									 (Y.Target) [Npcs.dm:215]
									 (src.Target) [Npcs.dm:215]
								-= [Npcs.dm:216]
									 (src.Carrion) [Npcs.dm:216]
									 (3) [Npcs.dm:216]
						spawn [Npcs.dm:218]
							 (6) [Npcs.dm:218]
						 [Npcs.dm:218]
							.call (src.CarrionBeast) [Npcs.dm:218]
						return [Npcs.dm:218]
					if [Npcs.dm:220]
						 [Npcs.dm:220]
							isnull [Npcs.dm:220]
								 (src.Target) [Npcs.dm:220]
					 [Npcs.dm:221]
						step_rand [Npcs.dm:221]
							 (src) [Npcs.dm:221]
					spawn [Npcs.dm:222]
						 [Npcs.dm:222]
							rand [Npcs.dm:222]
								 [Npcs.dm:222]
									/ [Npcs.dm:222]
										 (Delay) [Npcs.dm:222]
										 (2) [Npcs.dm:222]
								 [Npcs.dm:222]
									+ [Npcs.dm:222]
										 (Delay) [Npcs.dm:222]
										 (4) [Npcs.dm:222]
					 [Npcs.dm:222]
						.call (src.CarrionBeast) [Npcs.dm:222]
			New [Npcs.dm:223]
				var [Npcs.dm:224]
					.arg [Npcs.dm:224]
				.call (..) [Npcs.dm:224]
				.call (src.CarrionBeast) [Npcs.dm:225]
		Reaver [Npcs.dm:227]
			= [Npcs.dm:228]
				 (name) [Npcs.dm:228]
				 ("Reaver") [Npcs.dm:228]
			= [Npcs.dm:229]
				 (icon_state) [Npcs.dm:229]
				 ("Reaver Bottom") [Npcs.dm:229]
			= [Npcs.dm:230]
				 (Health) [Npcs.dm:230]
				 (35) [Npcs.dm:230]
			= [Npcs.dm:231]
				 (HealthMax) [Npcs.dm:231]
				 (35) [Npcs.dm:231]
			= [Npcs.dm:232]
				 (Armor) [Npcs.dm:232]
				 (60) [Npcs.dm:232]
			= [Npcs.dm:233]
				 (Delay) [Npcs.dm:233]
				 (100) [Npcs.dm:233]
			= [Npcs.dm:234]
				 (Range) [Npcs.dm:234]
				 (10) [Npcs.dm:234]
			= [Npcs.dm:235]
				 (Damage) [Npcs.dm:235]
				 (1) [Npcs.dm:235]
			= [Npcs.dm:236]
				 (Size) [Npcs.dm:236]
				 ("Huge") [Npcs.dm:236]
			= [Npcs.dm:237]
				 (Value) [Npcs.dm:237]
				 (100) [Npcs.dm:237]
			proc [Npcs.dm:238]
				Reaver [Npcs.dm:238]
					var [Npcs.dm:239]
						.arg [Npcs.dm:239]
					.call (src.Attack) [Npcs.dm:239]
					if [Npcs.dm:240]
						 [Npcs.dm:240]
							! [Npcs.dm:240]
								isnull [Npcs.dm:240]
									 (src.Target) [Npcs.dm:240]
					 [Npcs.dm:241]
						if [Npcs.dm:241]
							 [Npcs.dm:241]
								! [Npcs.dm:241]
									 [Npcs.dm:241]
										in [Npcs.dm:241]
											 (src.Target) [Npcs.dm:241]
											 [Npcs.dm:241]
												view [Npcs.dm:241]
													 [Npcs.dm:241]
														+ [Npcs.dm:241]
															 (6) [Npcs.dm:241]
															 (src.Range) [Npcs.dm:241]
													 (src) [Npcs.dm:241]
						 [Npcs.dm:242]
							= [Npcs.dm:242]
								 (src.Target) [Npcs.dm:242]
								 (null) [Npcs.dm:242]
						else [Npcs.dm:243]
							if [Npcs.dm:243]
								 [Npcs.dm:243]
									> [Npcs.dm:243]
										 [Npcs.dm:243]
											get_dist [Npcs.dm:243]
												 (src) [Npcs.dm:243]
												 (src.Target) [Npcs.dm:243]
										 (5) [Npcs.dm:243]
							 [Npcs.dm:244]
								step_to [Npcs.dm:244]
									 (src) [Npcs.dm:244]
									 (src.Target) [Npcs.dm:244]
									 (1) [Npcs.dm:244]
								spawn [Npcs.dm:245]
									 (8) [Npcs.dm:245]
								 [Npcs.dm:245]
									.call (src.Reaver) [Npcs.dm:245]
								return [Npcs.dm:245]
							else [Npcs.dm:246]
								= [Npcs.dm:247]
									 (src.dir) [Npcs.dm:247]
									 [Npcs.dm:247]
										get_dir [Npcs.dm:247]
											 (src) [Npcs.dm:247]
											 (src.Target) [Npcs.dm:247]
								flick [Npcs.dm:247]
									 ("Reaver Bottom Fire") [Npcs.dm:247]
									 (src) [Npcs.dm:247]
								missile [Npcs.dm:248]
									 [Npcs.dm:248]
										image [Npcs.dm:248]
											 [Npcs.dm:248]
												arglist [Npcs.dm:248]
													 [Npcs.dm:248]
														list [Npcs.dm:248]
															 ('Effects.dmi') [Npcs.dm:248]
															 [Npcs.dm:248]
																= [Npcs.dm:248]
																	 ("icon_state") [Npcs.dm:248]
																	 ("Bullet") [Npcs.dm:248]
															 [Npcs.dm:248]
																= [Npcs.dm:248]
																	 ("pixel_y") [Npcs.dm:248]
																	 [Npcs.dm:248]
																		rand [Npcs.dm:248]
																			 (-5) [Npcs.dm:248]
																			 (5) [Npcs.dm:248]
															 [Npcs.dm:248]
																= [Npcs.dm:248]
																	 ("pixel_x") [Npcs.dm:248]
																	 [Npcs.dm:248]
																		rand [Npcs.dm:248]
																			 (-5) [Npcs.dm:248]
																			 (5) [Npcs.dm:248]
									 (src) [Npcs.dm:248]
									 (src.Target/:/loc) [Npcs.dm:248]
								.call (Damage) [Npcs.dm:249]
									 (src) [Npcs.dm:249]
									 (src.Target) [Npcs.dm:249]
									 (src.Damage) [Npcs.dm:249]
									 ("Slash") [Npcs.dm:249]
									 (25) [Npcs.dm:249]
						spawn [Npcs.dm:250]
							 (4) [Npcs.dm:250]
						 [Npcs.dm:250]
							.call (src.Reaver) [Npcs.dm:250]
						return [Npcs.dm:250]
					if [Npcs.dm:251]
						 [Npcs.dm:251]
							isnull [Npcs.dm:251]
								 (src.Target) [Npcs.dm:251]
					 [Npcs.dm:252]
						= [Npcs.dm:252]
							 (Delay) [Npcs.dm:252]
							 (30) [Npcs.dm:252]
						step_rand [Npcs.dm:253]
							 (src) [Npcs.dm:253]
					spawn [Npcs.dm:254]
						 (Delay) [Npcs.dm:254]
					 [Npcs.dm:254]
						.call (src.Reaver) [Npcs.dm:254]
			New [Npcs.dm:255]
				var [Npcs.dm:256]
					.arg [Npcs.dm:256]
				.call (..) [Npcs.dm:256]
				spawn [Npcs.dm:257]
					 (Delay) [Npcs.dm:257]
				 [Npcs.dm:257]
					.call (src.Reaver) [Npcs.dm:257]
				if [Npcs.dm:258]
					 [Npcs.dm:258]
						prob [Npcs.dm:258]
							 (10) [Npcs.dm:258]
				 [Npcs.dm:258]
					new [Npcs.dm:258]
						 (/obj/Items/Weapons/Chaingun) [Npcs.dm:258]
						 (src) [Npcs.dm:258]
				+= [Npcs.dm:259]
					 (src.overlays) [Npcs.dm:259]
					 [Npcs.dm:259]
						image [Npcs.dm:259]
							 [Npcs.dm:259]
								arglist [Npcs.dm:259]
									 [Npcs.dm:259]
										list [Npcs.dm:259]
											 ('Monsters.dmi') [Npcs.dm:259]
											 [Npcs.dm:259]
												= [Npcs.dm:259]
													 ("icon_state") [Npcs.dm:259]
													 ("Reaver Top") [Npcs.dm:259]
											 [Npcs.dm:259]
												= [Npcs.dm:259]
													 ("layer") [Npcs.dm:259]
													 (6) [Npcs.dm:259]
											 [Npcs.dm:259]
												= [Npcs.dm:259]
													 ("pixel_y") [Npcs.dm:259]
													 (30) [Npcs.dm:259]
			Move [Npcs.dm:260]
				var [Npcs.dm:261]
					.arg [Npcs.dm:261]
				.call (..) [Npcs.dm:261]
				_block [Npcs.dm:262]
					var [Npcs.dm:262]
						mob [Npcs.dm:262]
							Player [Npcs.dm:262]
								X [Npcs.dm:262]
					for [Npcs.dm:262]
						 [Npcs.dm:262]
							in [Npcs.dm:262]
								 (X) [Npcs.dm:262]
								 [Npcs.dm:262]
									oview [Npcs.dm:262]
					 [Npcs.dm:262]
						if [Npcs.dm:262]
							 (X.client) [Npcs.dm:262]
						 [Npcs.dm:262]
							.call (Rattle) [Npcs.dm:262]
								 (X) [Npcs.dm:262]
								 (2) [Npcs.dm:262]
		Defiler [Npcs.dm:264]
			= [Npcs.dm:265]
				 (name) [Npcs.dm:265]
				 ("Defiler") [Npcs.dm:265]
			= [Npcs.dm:266]
				 (icon_state) [Npcs.dm:266]
				 ("Defiler") [Npcs.dm:266]
			= [Npcs.dm:267]
				 (Health) [Npcs.dm:267]
				 (8) [Npcs.dm:267]
			= [Npcs.dm:268]
				 (HealthMax) [Npcs.dm:268]
				 (8) [Npcs.dm:268]
			= [Npcs.dm:269]
				 (Armor) [Npcs.dm:269]
				 (5) [Npcs.dm:269]
			= [Npcs.dm:270]
				 (Delay) [Npcs.dm:270]
				 (20) [Npcs.dm:270]
			= [Npcs.dm:271]
				 (Range) [Npcs.dm:271]
				 (6) [Npcs.dm:271]
			= [Npcs.dm:272]
				 (Damage) [Npcs.dm:272]
				 (2) [Npcs.dm:272]
			= [Npcs.dm:273]
				 (Size) [Npcs.dm:273]
				 ("Normal") [Npcs.dm:273]
			= [Npcs.dm:274]
				 (see_in_dark) [Npcs.dm:274]
				 (2) [Npcs.dm:274]
			= [Npcs.dm:275]
				 (Value) [Npcs.dm:275]
				 (15) [Npcs.dm:275]
			proc [Npcs.dm:276]
				Defiler [Npcs.dm:276]
					var [Npcs.dm:277]
						.arg [Npcs.dm:277]
					.call (src.Attack) [Npcs.dm:277]
					if [Npcs.dm:278]
						 [Npcs.dm:278]
							! [Npcs.dm:278]
								isnull [Npcs.dm:278]
									 (src.Target) [Npcs.dm:278]
					 [Npcs.dm:279]
						if [Npcs.dm:279]
							 [Npcs.dm:279]
								! [Npcs.dm:279]
									 [Npcs.dm:279]
										in [Npcs.dm:279]
											 (src.Target) [Npcs.dm:279]
											 [Npcs.dm:279]
												view [Npcs.dm:279]
													 [Npcs.dm:279]
														+ [Npcs.dm:279]
															 (6) [Npcs.dm:279]
															 (src.Range) [Npcs.dm:279]
													 (src) [Npcs.dm:279]
						 [Npcs.dm:280]
							= [Npcs.dm:280]
								 (src.Target) [Npcs.dm:280]
								 (null) [Npcs.dm:280]
						else [Npcs.dm:281]
							if [Npcs.dm:281]
								 [Npcs.dm:281]
									> [Npcs.dm:281]
										 [Npcs.dm:281]
											get_dist [Npcs.dm:281]
												 (src) [Npcs.dm:281]
												 (src.Target) [Npcs.dm:281]
										 (3) [Npcs.dm:281]
							 [Npcs.dm:282]
								step_to [Npcs.dm:282]
									 (src) [Npcs.dm:282]
									 (src.Target) [Npcs.dm:282]
									 (1) [Npcs.dm:282]
							else [Npcs.dm:283]
								if [Npcs.dm:283]
									 [Npcs.dm:283]
										&& [Npcs.dm:283]
											 [Npcs.dm:283]
												ismob [Npcs.dm:283]
													 (src.Target) [Npcs.dm:283]
											 [Npcs.dm:283]
												== [Npcs.dm:283]
													 [Npcs.dm:283]
														get_dist [Npcs.dm:283]
															 (src) [Npcs.dm:283]
															 (src.Target) [Npcs.dm:283]
													 (3) [Npcs.dm:283]
								 [Npcs.dm:284]
									= [Npcs.dm:284]
										 (src.dir) [Npcs.dm:284]
										 [Npcs.dm:284]
											get_dir [Npcs.dm:284]
												 (src) [Npcs.dm:284]
												 (src.Target) [Npcs.dm:284]
									flick [Npcs.dm:284]
										 ("Defiler Fire") [Npcs.dm:284]
										 (src) [Npcs.dm:284]
									missile [Npcs.dm:285]
										 [Npcs.dm:285]
											image [Npcs.dm:285]
												 [Npcs.dm:285]
													arglist [Npcs.dm:285]
														 [Npcs.dm:285]
															list [Npcs.dm:285]
																 ('Effects.dmi') [Npcs.dm:285]
																 [Npcs.dm:285]
																	= [Npcs.dm:285]
																		 ("icon_state") [Npcs.dm:285]
																		 ("Shock") [Npcs.dm:285]
																 [Npcs.dm:285]
																	= [Npcs.dm:285]
																		 ("layer") [Npcs.dm:285]
																		 (6) [Npcs.dm:285]
																 [Npcs.dm:285]
																	= [Npcs.dm:285]
																		 ("pixel_y") [Npcs.dm:285]
																		 [Npcs.dm:285]
																			rand [Npcs.dm:285]
																				 (5) [Npcs.dm:285]
																				 (-5) [Npcs.dm:285]
																 [Npcs.dm:285]
																	= [Npcs.dm:285]
																		 ("pixel_x") [Npcs.dm:285]
																		 [Npcs.dm:285]
																			rand [Npcs.dm:285]
																				 (5) [Npcs.dm:285]
																				 (-5) [Npcs.dm:285]
										 (src.Target) [Npcs.dm:285]
										 (src) [Npcs.dm:285]
									.call (Damage) [Npcs.dm:286]
										 (src) [Npcs.dm:286]
										 (src.Target) [Npcs.dm:286]
										 (src.Damage) [Npcs.dm:286]
										 ("Slash") [Npcs.dm:286]
										 (0) [Npcs.dm:286]
										 (1) [Npcs.dm:286]
									if [Npcs.dm:287]
										 [Npcs.dm:287]
											< [Npcs.dm:287]
												 (src.Health) [Npcs.dm:287]
												 (src.HealthMax) [Npcs.dm:287]
									 [Npcs.dm:287]
										+= [Npcs.dm:287]
											 (src.Health) [Npcs.dm:287]
											 (2) [Npcs.dm:287]
								else [Npcs.dm:288]
									if [Npcs.dm:288]
										 [Npcs.dm:288]
											<= [Npcs.dm:288]
												 [Npcs.dm:288]
													get_dist [Npcs.dm:288]
														 (src) [Npcs.dm:288]
														 (src.Target) [Npcs.dm:288]
												 (3) [Npcs.dm:288]
									 [Npcs.dm:289]
										var [Npcs.dm:289]
											turf [Npcs.dm:289]
												L [Npcs.dm:289]
													 [Npcs.dm:289]
														= [Npcs.dm:289]
															 (src.Target/:/loc) [Npcs.dm:289]
										= [Npcs.dm:290]
											 (src.dir) [Npcs.dm:290]
											 [Npcs.dm:290]
												get_dir [Npcs.dm:290]
													 (src) [Npcs.dm:290]
													 (src.Target) [Npcs.dm:290]
										flick [Npcs.dm:290]
											 ("Defiler Fire2") [Npcs.dm:290]
											 (src) [Npcs.dm:290]
										_block [Npcs.dm:291]
											var [Npcs.dm:291]
												I [Npcs.dm:291]
											for [Npcs.dm:291]
												 [Npcs.dm:291]
													= [Npcs.dm:291]
														 (I) [Npcs.dm:291]
														 (6) [Npcs.dm:291]
												 [Npcs.dm:291]
													> [Npcs.dm:291]
														 (I) [Npcs.dm:291]
														 (0) [Npcs.dm:291]
												 [Npcs.dm:291]
													.post-- (I) [Npcs.dm:291]
											 [Npcs.dm:292]
												missile [Npcs.dm:292]
													 [Npcs.dm:292]
														image [Npcs.dm:292]
															 [Npcs.dm:292]
																arglist [Npcs.dm:292]
																	 [Npcs.dm:292]
																		list [Npcs.dm:292]
																			 ('Effects.dmi') [Npcs.dm:292]
																			 [Npcs.dm:292]
																				= [Npcs.dm:292]
																					 ("icon_state") [Npcs.dm:292]
																					 ("Flame 1") [Npcs.dm:292]
																			 [Npcs.dm:292]
																				= [Npcs.dm:292]
																					 ("layer") [Npcs.dm:292]
																					 (4) [Npcs.dm:292]
																			 [Npcs.dm:292]
																				= [Npcs.dm:292]
																					 ("pixel_y") [Npcs.dm:292]
																					 [Npcs.dm:292]
																						rand [Npcs.dm:292]
																							 (-10) [Npcs.dm:292]
																							 (10) [Npcs.dm:292]
																			 [Npcs.dm:292]
																				= [Npcs.dm:292]
																					 ("pixel_x") [Npcs.dm:292]
																					 [Npcs.dm:292]
																						rand [Npcs.dm:292]
																							 (-10) [Npcs.dm:292]
																							 (10) [Npcs.dm:292]
													 [Npcs.dm:292]
														get_step [Npcs.dm:292]
															 (src) [Npcs.dm:292]
															 (src.dir) [Npcs.dm:292]
													 (L) [Npcs.dm:292]
												var [Npcs.dm:293]
													obj [Npcs.dm:293]
														Effects [Npcs.dm:293]
															Flame1 [Npcs.dm:293]
																Y [Npcs.dm:293]
																	 [Npcs.dm:293]
																		= [Npcs.dm:293]
																			new [Npcs.dm:293]
																				 [Npcs.dm:293]
																				 (src.loc) [Npcs.dm:293]
												= [Npcs.dm:294]
													 (Y.Owner) [Npcs.dm:294]
													 (src) [Npcs.dm:294]
												walk_towards [Npcs.dm:295]
													 (Y) [Npcs.dm:295]
													 (L) [Npcs.dm:295]
												sleep [Npcs.dm:296]
													 (1) [Npcs.dm:296]
						spawn [Npcs.dm:297]
							 (10) [Npcs.dm:297]
						 [Npcs.dm:297]
							.call (src.Defiler) [Npcs.dm:297]
						return [Npcs.dm:297]
					if [Npcs.dm:298]
						 [Npcs.dm:298]
							isnull [Npcs.dm:298]
								 (src.Target) [Npcs.dm:298]
					 [Npcs.dm:299]
						= [Npcs.dm:299]
							 (Delay) [Npcs.dm:299]
							 (20) [Npcs.dm:299]
						step_rand [Npcs.dm:300]
							 (src) [Npcs.dm:300]
					spawn [Npcs.dm:301]
						 (Delay) [Npcs.dm:301]
					 [Npcs.dm:301]
						.call (src.Defiler) [Npcs.dm:301]
			New [Npcs.dm:302]
				var [Npcs.dm:303]
					.arg [Npcs.dm:303]
				.call (..) [Npcs.dm:303]
				spawn [Npcs.dm:304]
					 (Delay) [Npcs.dm:304]
				 [Npcs.dm:304]
					.call (src.Defiler) [Npcs.dm:304]
		Maggot [Npcs.dm:306]
			= [Npcs.dm:307]
				 (name) [Npcs.dm:307]
				 ("Maggot") [Npcs.dm:307]
			= [Npcs.dm:308]
				 (icon_state) [Npcs.dm:308]
				 ("Maggot") [Npcs.dm:308]
			= [Npcs.dm:309]
				 (Health) [Npcs.dm:309]
				 (10) [Npcs.dm:309]
			= [Npcs.dm:310]
				 (HealthMax) [Npcs.dm:310]
				 (10) [Npcs.dm:310]
			= [Npcs.dm:311]
				 (Delay) [Npcs.dm:311]
				 (20) [Npcs.dm:311]
			= [Npcs.dm:312]
				 (Range) [Npcs.dm:312]
				 (5) [Npcs.dm:312]
			= [Npcs.dm:313]
				 (Comm) [Npcs.dm:313]
				 (8) [Npcs.dm:313]
			= [Npcs.dm:314]
				 (Damage) [Npcs.dm:314]
				 (1) [Npcs.dm:314]
			= [Npcs.dm:315]
				 (Size) [Npcs.dm:315]
				 ("Small") [Npcs.dm:315]
			= [Npcs.dm:316]
				 (Value) [Npcs.dm:316]
				 (5) [Npcs.dm:316]
			proc [Npcs.dm:317]
				Maggot [Npcs.dm:317]
					var [Npcs.dm:318]
						.arg [Npcs.dm:318]
					.call (src.Attack) [Npcs.dm:318]
					if [Npcs.dm:319]
						 [Npcs.dm:319]
							! [Npcs.dm:319]
								isnull [Npcs.dm:319]
									 (src.Target) [Npcs.dm:319]
					 [Npcs.dm:320]
						if [Npcs.dm:320]
							 [Npcs.dm:320]
								! [Npcs.dm:320]
									 [Npcs.dm:320]
										in [Npcs.dm:320]
											 (src.Target) [Npcs.dm:320]
											 [Npcs.dm:320]
												view [Npcs.dm:320]
													 [Npcs.dm:320]
														+ [Npcs.dm:320]
															 (6) [Npcs.dm:320]
															 (src.Range) [Npcs.dm:320]
													 (src) [Npcs.dm:320]
						 [Npcs.dm:321]
							= [Npcs.dm:321]
								 (src.Target) [Npcs.dm:321]
								 (null) [Npcs.dm:321]
							= [Npcs.dm:322]
								 (src.Delay) [Npcs.dm:322]
								 (15) [Npcs.dm:322]
						else [Npcs.dm:323]
							if [Npcs.dm:323]
								 [Npcs.dm:323]
									> [Npcs.dm:323]
										 [Npcs.dm:323]
											get_dist [Npcs.dm:323]
												 (src) [Npcs.dm:323]
												 (src.Target) [Npcs.dm:323]
										 (1) [Npcs.dm:323]
							 [Npcs.dm:324]
								step_to [Npcs.dm:324]
									 (src) [Npcs.dm:324]
									 (src.Target) [Npcs.dm:324]
									 (1) [Npcs.dm:324]
								= [Npcs.dm:325]
									 (Delay) [Npcs.dm:325]
									 (5) [Npcs.dm:325]
								if [Npcs.dm:326]
									 [Npcs.dm:326]
										> [Npcs.dm:326]
											 (Comm) [Npcs.dm:326]
											 (0) [Npcs.dm:326]
								 [Npcs.dm:326]
									_block [Npcs.dm:326]
										var [Npcs.dm:326]
											mob [Npcs.dm:326]
												Monsters [Npcs.dm:326]
													Maggot [Npcs.dm:326]
														X [Npcs.dm:326]
										for [Npcs.dm:326]
											 [Npcs.dm:326]
												in [Npcs.dm:326]
													 (X) [Npcs.dm:326]
													 [Npcs.dm:326]
														oview [Npcs.dm:326]
															 (Comm) [Npcs.dm:326]
															 (src) [Npcs.dm:326]
										 [Npcs.dm:327]
											if [Npcs.dm:327]
												 [Npcs.dm:327]
													isnull [Npcs.dm:327]
														 (X.Target) [Npcs.dm:327]
											 [Npcs.dm:328]
												= [Npcs.dm:328]
													 (X.Target) [Npcs.dm:328]
													 (src.Target) [Npcs.dm:328]
												flick [Npcs.dm:329]
													 ("Maggot Alert") [Npcs.dm:329]
													 (X) [Npcs.dm:329]
							else [Npcs.dm:330]
								= [Npcs.dm:331]
									 (src.dir) [Npcs.dm:331]
									 [Npcs.dm:331]
										get_dir [Npcs.dm:331]
											 (src) [Npcs.dm:331]
											 (src.Target) [Npcs.dm:331]
								flick [Npcs.dm:331]
									 ("Maggot Fire") [Npcs.dm:331]
									 (src) [Npcs.dm:331]
								.call (Damage) [Npcs.dm:332]
									 (src) [Npcs.dm:332]
									 (src.Target) [Npcs.dm:332]
									 (src.Damage) [Npcs.dm:332]
									 ("Chop") [Npcs.dm:332]
									 (15) [Npcs.dm:332]
						spawn [Npcs.dm:333]
							 (5) [Npcs.dm:333]
						 [Npcs.dm:333]
							.call (src.Maggot) [Npcs.dm:333]
						return [Npcs.dm:333]
					if [Npcs.dm:334]
						 [Npcs.dm:334]
							isnull [Npcs.dm:334]
								 (src.Target) [Npcs.dm:334]
					 [Npcs.dm:335]
						= [Npcs.dm:335]
							 (Delay) [Npcs.dm:335]
							 (20) [Npcs.dm:335]
						step_rand [Npcs.dm:336]
							 (src) [Npcs.dm:336]
					spawn [Npcs.dm:337]
						 (Delay) [Npcs.dm:337]
					 [Npcs.dm:337]
						.call (src.Maggot) [Npcs.dm:337]
			New [Npcs.dm:338]
				var [Npcs.dm:339]
					.arg [Npcs.dm:339]
				.call (..) [Npcs.dm:339]
				.call (src.Maggot) [Npcs.dm:340]
		CarrionDervish [Npcs.dm:342]
			= [Npcs.dm:343]
				 (name) [Npcs.dm:343]
				 ("Carrion Dervish") [Npcs.dm:343]
			= [Npcs.dm:344]
				 (icon_state) [Npcs.dm:344]
				 ("Carrion Dervish") [Npcs.dm:344]
			= [Npcs.dm:345]
				 (Health) [Npcs.dm:345]
				 (5) [Npcs.dm:345]
			= [Npcs.dm:346]
				 (HealthMax) [Npcs.dm:346]
				 (5) [Npcs.dm:346]
			= [Npcs.dm:347]
				 (Delay) [Npcs.dm:347]
				 (5) [Npcs.dm:347]
			= [Npcs.dm:348]
				 (Range) [Npcs.dm:348]
				 (10) [Npcs.dm:348]
			= [Npcs.dm:349]
				 (Damage) [Npcs.dm:349]
				 (1) [Npcs.dm:349]
			= [Npcs.dm:350]
				 (Size) [Npcs.dm:350]
				 ("Small") [Npcs.dm:350]
			= [Npcs.dm:351]
				 (Value) [Npcs.dm:351]
				 (5) [Npcs.dm:351]
			= [Npcs.dm:352]
				 (density) [Npcs.dm:352]
				 (0) [Npcs.dm:352]
			proc [Npcs.dm:353]
				Dervish [Npcs.dm:353]
					var [Npcs.dm:354]
						.arg [Npcs.dm:354]
					.call (src.Attack) [Npcs.dm:354]
					if [Npcs.dm:355]
						 [Npcs.dm:355]
							! [Npcs.dm:355]
								isnull [Npcs.dm:355]
									 (src.Target) [Npcs.dm:355]
					 [Npcs.dm:356]
						if [Npcs.dm:356]
							 [Npcs.dm:356]
								! [Npcs.dm:356]
									 [Npcs.dm:356]
										in [Npcs.dm:356]
											 (src.Target) [Npcs.dm:356]
											 [Npcs.dm:356]
												view [Npcs.dm:356]
													 [Npcs.dm:356]
														+ [Npcs.dm:356]
															 (6) [Npcs.dm:356]
															 (src.Range) [Npcs.dm:356]
													 (src) [Npcs.dm:356]
						 [Npcs.dm:357]
							= [Npcs.dm:357]
								 (src.Target) [Npcs.dm:357]
								 (null) [Npcs.dm:357]
						else [Npcs.dm:358]
							if [Npcs.dm:358]
								 [Npcs.dm:358]
									> [Npcs.dm:358]
										 [Npcs.dm:358]
											get_dist [Npcs.dm:358]
												 (src) [Npcs.dm:358]
												 (src.Target) [Npcs.dm:358]
										 (1) [Npcs.dm:358]
							 [Npcs.dm:359]
								step_to [Npcs.dm:359]
									 (src) [Npcs.dm:359]
									 (src.Target) [Npcs.dm:359]
									 (1) [Npcs.dm:359]
							else [Npcs.dm:360]
								.call (Damage) [Npcs.dm:361]
									 (src) [Npcs.dm:361]
									 (src.Target) [Npcs.dm:361]
									 (src.Damage) [Npcs.dm:361]
									 ("Chop") [Npcs.dm:361]
									 (25) [Npcs.dm:361]
						spawn [Npcs.dm:362]
							 (5) [Npcs.dm:362]
						 [Npcs.dm:362]
							.call (src.Dervish) [Npcs.dm:362]
						return [Npcs.dm:362]
					if [Npcs.dm:363]
						 [Npcs.dm:363]
							isnull [Npcs.dm:363]
								 (src.Target) [Npcs.dm:363]
					 [Npcs.dm:363]
						step_rand [Npcs.dm:363]
							 (src) [Npcs.dm:363]
					spawn [Npcs.dm:364]
						 (Delay) [Npcs.dm:364]
					 [Npcs.dm:364]
						.call (src.Dervish) [Npcs.dm:364]
			New [Npcs.dm:365]
				var [Npcs.dm:366]
					.arg [Npcs.dm:366]
				.call (..) [Npcs.dm:366]
				.call (src.Dervish) [Npcs.dm:367]
				spawn [Npcs.dm:368]
					 (300) [Npcs.dm:368]
				 [Npcs.dm:368]
					del [Npcs.dm:368]
						 (src) [Npcs.dm:368]
		Bump [Npcs.dm:370]
			var [Npcs.dm:371]
				.arg [Npcs.dm:371]
					atom [Npcs.dm:370]
						X [Npcs.dm:370]
			if [Npcs.dm:371]
				 [Npcs.dm:371]
					istype [Npcs.dm:371]
						 (X) [Npcs.dm:371]
						 (/mob/Monsters) [Npcs.dm:371]
			 [Npcs.dm:371]
				= [Npcs.dm:371]
					 (src.loc) [Npcs.dm:371]
					 (X.loc) [Npcs.dm:371]
		proc [Npcs.dm:373]
			Attack [Npcs.dm:373]
				var [Npcs.dm:373]
					.arg [Npcs.dm:373]
				if [Npcs.dm:373]
					 [Npcs.dm:373]
						!= [Npcs.dm:373]
							 (src.desc) [Npcs.dm:373]
							 ("CutScene") [Npcs.dm:373]
				 [Npcs.dm:375]
					_block [Npcs.dm:375]
						var [Npcs.dm:375]
							atom [Npcs.dm:375]
								movable [Npcs.dm:375]
									X [Npcs.dm:375]
						for [Npcs.dm:375]
							 [Npcs.dm:375]
								in [Npcs.dm:375]
									 (X) [Npcs.dm:375]
									 [Npcs.dm:375]
										view [Npcs.dm:375]
											 (src.Range) [Npcs.dm:375]
											 (src) [Npcs.dm:375]
						 [Npcs.dm:375]
							if [Npcs.dm:375]
								 [Npcs.dm:375]
									&& [Npcs.dm:375]
										 [Npcs.dm:375]
											> [Npcs.dm:375]
												 (X.Health) [Npcs.dm:375]
												 (0) [Npcs.dm:375]
										 (X.Attackible) [Npcs.dm:375]
							 [Npcs.dm:376]
								if [Npcs.dm:376]
									 [Npcs.dm:376]
										|| [Npcs.dm:376]
											 [Npcs.dm:376]
												isnull [Npcs.dm:376]
													 (src.Target) [Npcs.dm:376]
											 [Npcs.dm:376]
												isobj [Npcs.dm:376]
													 (src.Target) [Npcs.dm:376]
											 [Npcs.dm:376]
												> [Npcs.dm:376]
													 [Npcs.dm:376]
														get_dist [Npcs.dm:376]
															 (src) [Npcs.dm:376]
															 (src.Target) [Npcs.dm:376]
													 [Npcs.dm:376]
														get_dist [Npcs.dm:376]
															 (src) [Npcs.dm:376]
															 (X) [Npcs.dm:376]
								 [Npcs.dm:377]
									= [Npcs.dm:377]
										 (src.Target) [Npcs.dm:377]
										 (X) [Npcs.dm:377]
					if [Npcs.dm:378]
						 [Npcs.dm:378]
							! [Npcs.dm:378]
								isnull [Npcs.dm:378]
									 (src.Target) [Npcs.dm:378]
					 [Npcs.dm:379]
						_block [Npcs.dm:379]
							var [Npcs.dm:379]
								turf [Npcs.dm:379]
									A [Npcs.dm:379]
							for [Npcs.dm:379]
								 [Npcs.dm:379]
									in [Npcs.dm:379]
										 (A) [Npcs.dm:379]
										 [Npcs.dm:379]
											.call (getline) [Npcs.dm:379]
												 (src.Target) [Npcs.dm:379]
												 (src) [Npcs.dm:379]
							 [Npcs.dm:379]
								_block [Npcs.dm:379]
									var [Npcs.dm:379]
										obj [Npcs.dm:379]
											X [Npcs.dm:379]
									for [Npcs.dm:379]
										 [Npcs.dm:379]
											in [Npcs.dm:379]
												 (X) [Npcs.dm:379]
												 (A) [Npcs.dm:379]
									 [Npcs.dm:380]
										if [Npcs.dm:380]
											 [Npcs.dm:380]
												&& [Npcs.dm:380]
													 (X.density) [Npcs.dm:380]
													 [Npcs.dm:380]
														> [Npcs.dm:380]
															 (X.Health) [Npcs.dm:380]
															 (0) [Npcs.dm:380]
										 [Npcs.dm:380]
											= [Npcs.dm:380]
												 (src.Target) [Npcs.dm:380]
												 (X) [Npcs.dm:380]
		New [Npcs.dm:382]
			var [Npcs.dm:383]
				.arg [Npcs.dm:383]
			.post++ (MobCount) [Npcs.dm:383]
			.call (..) [Npcs.dm:384]
		Del [Npcs.dm:385]
			var [Npcs.dm:386]
				.arg [Npcs.dm:386]
			.post-- (MobCount) [Npcs.dm:386]
			if [Npcs.dm:387]
				 (src.loc) [Npcs.dm:387]
			 [Npcs.dm:388]
				+= [Npcs.dm:388]
					 (src.loc.underlays) [Npcs.dm:388]
					 [Npcs.dm:388]
						image [Npcs.dm:388]
							 [Npcs.dm:388]
								arglist [Npcs.dm:388]
									 [Npcs.dm:388]
										list [Npcs.dm:388]
											 ('Monsters.dmi') [Npcs.dm:388]
											 [Npcs.dm:388]
												= [Npcs.dm:388]
													 ("icon_state") [Npcs.dm:388]
													 [Npcs.dm:388]
														text ("\[] Dead") [Npcs.dm:388]
															 [Npcs.dm:388]
																 (src.icon_state) [Npcs.dm:388]
											 [Npcs.dm:388]
												= [Npcs.dm:388]
													 ("layer") [Npcs.dm:388]
													 (3) [Npcs.dm:388]
											 [Npcs.dm:388]
												= [Npcs.dm:388]
													 ("pixel_y") [Npcs.dm:388]
													 [Npcs.dm:388]
														rand [Npcs.dm:388]
															 (8) [Npcs.dm:388]
															 (8) [Npcs.dm:388]
											 [Npcs.dm:388]
												= [Npcs.dm:388]
													 ("pixel_x") [Npcs.dm:388]
													 [Npcs.dm:388]
														rand [Npcs.dm:388]
															 (8) [Npcs.dm:388]
															 (8) [Npcs.dm:388]
				.post++ (src.loc.Carrion) [Npcs.dm:389]
			.call (..) [Npcs.dm:390]
		MouseDown [Npcs.dm:392]
			var [Npcs.dm:392]
				.arg [Npcs.dm:392]
					atom [Npcs.dm:392]
						Location [Npcs.dm:392]
			if [Npcs.dm:392]
				 [Npcs.dm:392]
					istype [Npcs.dm:392]
						 (usr) [Npcs.dm:392]
						 (/mob/Player) [Npcs.dm:392]
			 [Npcs.dm:393]
				var [Npcs.dm:393]
					mob [Npcs.dm:393]
						Player [Npcs.dm:393]
							X [Npcs.dm:393]
								 [Npcs.dm:393]
									= [Npcs.dm:393]
										 (usr) [Npcs.dm:393]
				= [Npcs.dm:394]
					 (X.Firing) [Npcs.dm:394]
					 (1) [Npcs.dm:394]
				= [Npcs.dm:395]
					 (X.Target) [Npcs.dm:395]
					 (src.loc) [Npcs.dm:395]
				.call (X.Shooting) [Npcs.dm:396]
					 (X.Target) [Npcs.dm:396]
	Characters [Player and Weapons.dm:1]
		= [Player and Weapons.dm:2]
			 (name) [Player and Weapons.dm:2]
			 ("NPC Character") [Player and Weapons.dm:2]
		= [Player and Weapons.dm:3]
			 (icon) [Player and Weapons.dm:3]
			 ('Marine.dmi') [Player and Weapons.dm:3]
		= [Player and Weapons.dm:4]
			 (icon_state) [Player and Weapons.dm:4]
			 ("Hunter") [Player and Weapons.dm:4]
		= [Player and Weapons.dm:5]
			 (Health) [Player and Weapons.dm:5]
			 (40) [Player and Weapons.dm:5]
		= [Player and Weapons.dm:6]
			 (HealthMax) [Player and Weapons.dm:6]
			 (40) [Player and Weapons.dm:6]
		= [Player and Weapons.dm:7]
			 (Armor) [Player and Weapons.dm:7]
			 (10) [Player and Weapons.dm:7]
		= [Player and Weapons.dm:8]
			 (ArmorMax) [Player and Weapons.dm:8]
			 (10) [Player and Weapons.dm:8]
		= [Player and Weapons.dm:9]
			 (Attackible) [Player and Weapons.dm:9]
			 (1) [Player and Weapons.dm:9]
		DblClick [Player and Weapons.dm:10]
			var [Player and Weapons.dm:10]
				.arg [Player and Weapons.dm:10]
			if [Player and Weapons.dm:10]
				 [Player and Weapons.dm:10]
					istype [Player and Weapons.dm:10]
						 (usr) [Player and Weapons.dm:10]
						 (/mob/Player) [Player and Weapons.dm:10]
			 [Player and Weapons.dm:10]
				if [Player and Weapons.dm:10]
					 [Player and Weapons.dm:10]
						|| [Player and Weapons.dm:10]
							 [Player and Weapons.dm:10]
								isnull [Player and Weapons.dm:10]
									 (src.Target) [Player and Weapons.dm:10]
							 [Player and Weapons.dm:10]
								> [Player and Weapons.dm:10]
									 [Player and Weapons.dm:10]
										get_dist [Player and Weapons.dm:10]
											 (src) [Player and Weapons.dm:10]
											 (src.Target) [Player and Weapons.dm:10]
									 (6) [Player and Weapons.dm:10]
				 [Player and Weapons.dm:11]
					= [Player and Weapons.dm:11]
						 (src.Target) [Player and Weapons.dm:11]
						 (usr) [Player and Weapons.dm:11]
					<< [Player and Weapons.dm:12]
						 (usr) [Player and Weapons.dm:12]
						 [Player and Weapons.dm:12]
							text ("<font color = green>\[] follows you...</font>") [Player and Weapons.dm:12]
								 [Player and Weapons.dm:12]
									 (src) [Player and Weapons.dm:12]
					walk_to [Player and Weapons.dm:13]
						 (src) [Player and Weapons.dm:13]
						 (usr) [Player and Weapons.dm:13]
						 (1) [Player and Weapons.dm:13]
						 (4) [Player and Weapons.dm:13]
		New [Player and Weapons.dm:14]
			var [Player and Weapons.dm:15]
				.arg [Player and Weapons.dm:15]
			+= [Player and Weapons.dm:15]
				 (src.overlays) [Player and Weapons.dm:15]
				 [Player and Weapons.dm:15]
					image [Player and Weapons.dm:15]
						 [Player and Weapons.dm:15]
							arglist [Player and Weapons.dm:15]
								 [Player and Weapons.dm:15]
									list [Player and Weapons.dm:15]
										 ('Effects.dmi') [Player and Weapons.dm:15]
										 [Player and Weapons.dm:15]
											= [Player and Weapons.dm:15]
												 ("icon_state") [Player and Weapons.dm:15]
												 ("Pointer") [Player and Weapons.dm:15]
										 [Player and Weapons.dm:15]
											= [Player and Weapons.dm:15]
												 ("pixel_y") [Player and Weapons.dm:15]
												 (20) [Player and Weapons.dm:15]
			.call (..) [Player and Weapons.dm:16]
	Observer [Player and Weapons.dm:18]
		= [Player and Weapons.dm:19]
			 (Attackible) [Player and Weapons.dm:19]
			 (0) [Player and Weapons.dm:19]
		= [Player and Weapons.dm:20]
			 (density) [Player and Weapons.dm:20]
			 (0) [Player and Weapons.dm:20]
		verb [Player and Weapons.dm:21]
			Start [Player and Weapons.dm:21]
				var [Player and Weapons.dm:22]
					.arg [Player and Weapons.dm:22]
				var [Player and Weapons.dm:22]
					I [Player and Weapons.dm:22]
						 [Player and Weapons.dm:22]
							= [Player and Weapons.dm:22]
								 (src) [Player and Weapons.dm:22]
				var [Player and Weapons.dm:23]
					mob [Player and Weapons.dm:23]
						Player [Player and Weapons.dm:23]
							X [Player and Weapons.dm:23]
								 [Player and Weapons.dm:23]
									= [Player and Weapons.dm:23]
										new [Player and Weapons.dm:23]
											 [Player and Weapons.dm:23]
				= [Player and Weapons.dm:24]
					 (X.key) [Player and Weapons.dm:24]
					 (src.key) [Player and Weapons.dm:24]
				= [Player and Weapons.dm:25]
					 (X.name) [Player and Weapons.dm:25]
					 (src.name) [Player and Weapons.dm:25]
				del [Player and Weapons.dm:25]
					 (I) [Player and Weapons.dm:25]
		New [Player and Weapons.dm:26]
			var [Player and Weapons.dm:27]
				.arg [Player and Weapons.dm:27]
			.call (..) [Player and Weapons.dm:27]
			= [Player and Weapons.dm:28]
				 (src.loc) [Player and Weapons.dm:28]
				 [Player and Weapons.dm:28]
					locate [Player and Weapons.dm:28]
						 [Player and Weapons.dm:28]
							text ("Starting Area \[]") [Player and Weapons.dm:28]
								 [Player and Weapons.dm:28]
									 (Map) [Player and Weapons.dm:28]
	Player [Player and Weapons.dm:30]
		= [Player and Weapons.dm:33]
			 (Health) [Player and Weapons.dm:33]
			 (100) [Player and Weapons.dm:33]
		= [Player and Weapons.dm:34]
			 (HealthMax) [Player and Weapons.dm:34]
			 (100) [Player and Weapons.dm:34]
		= [Player and Weapons.dm:35]
			 (Armor) [Player and Weapons.dm:35]
			 (20) [Player and Weapons.dm:35]
		= [Player and Weapons.dm:36]
			 (ArmorMax) [Player and Weapons.dm:36]
			 (20) [Player and Weapons.dm:36]
		= [Player and Weapons.dm:37]
			 (Attackible) [Player and Weapons.dm:37]
			 (1) [Player and Weapons.dm:37]
		var [Player and Weapons.dm:39]
			Firing [Player and Weapons.dm:39]
				 [Player and Weapons.dm:39]
					= [Player and Weapons.dm:39]
						 (0) [Player and Weapons.dm:39]
		var [Player and Weapons.dm:41]
			Lights [Player and Weapons.dm:41]
				 [Player and Weapons.dm:41]
					= [Player and Weapons.dm:41]
						 (0) [Player and Weapons.dm:41]
		var [Player and Weapons.dm:42]
			Credits [Player and Weapons.dm:42]
				 [Player and Weapons.dm:42]
					= [Player and Weapons.dm:42]
						 (0) [Player and Weapons.dm:42]
		var [Player and Weapons.dm:43]
			Kills [Player and Weapons.dm:43]
				 [Player and Weapons.dm:43]
					= [Player and Weapons.dm:43]
						 (0) [Player and Weapons.dm:43]
		var [Player and Weapons.dm:45]
			WeaponMode [Player and Weapons.dm:45]
				 [Player and Weapons.dm:45]
					= [Player and Weapons.dm:45]
						 (0) [Player and Weapons.dm:45]
		var [Player and Weapons.dm:46]
			InvMode [Player and Weapons.dm:46]
				 [Player and Weapons.dm:46]
					= [Player and Weapons.dm:46]
						 (0) [Player and Weapons.dm:46]
		var [Player and Weapons.dm:47]
			Inv [Player and Weapons.dm:47]
				 [Player and Weapons.dm:47]
					= [Player and Weapons.dm:47]
						 (1) [Player and Weapons.dm:47]
		var [Player and Weapons.dm:48]
			Inv2 [Player and Weapons.dm:48]
				 [Player and Weapons.dm:48]
					= [Player and Weapons.dm:48]
						 (1) [Player and Weapons.dm:48]
		var [Player and Weapons.dm:49]
			list [Player and Weapons.dm:49]
				Inventory [Player and Weapons.dm:49]
					 [Player and Weapons.dm:49]
						= [Player and Weapons.dm:49]
							list [Player and Weapons.dm:49]
		var [Player and Weapons.dm:50]
			list [Player and Weapons.dm:50]
				Inventory2 [Player and Weapons.dm:50]
					 [Player and Weapons.dm:50]
						= [Player and Weapons.dm:50]
							list [Player and Weapons.dm:50]
		var [Player and Weapons.dm:51]
			obj [Player and Weapons.dm:51]
				Items [Player and Weapons.dm:51]
					Weapons [Player and Weapons.dm:51]
						Wep [Player and Weapons.dm:51]
							 [Player and Weapons.dm:51]
								= [Player and Weapons.dm:51]
									 (null) [Player and Weapons.dm:51]
		var [Player and Weapons.dm:52]
			GunMax [Player and Weapons.dm:52]
				 [Player and Weapons.dm:52]
					= [Player and Weapons.dm:52]
						 (3) [Player and Weapons.dm:52]
		var [Player and Weapons.dm:53]
			ItemMax [Player and Weapons.dm:53]
				 [Player and Weapons.dm:53]
					= [Player and Weapons.dm:53]
						 (8) [Player and Weapons.dm:53]
		= [Player and Weapons.dm:55]
			 (icon) [Player and Weapons.dm:55]
			 ('Marine.dmi') [Player and Weapons.dm:55]
		= [Player and Weapons.dm:56]
			 (icon_state) [Player and Weapons.dm:56]
			 ("Hunter") [Player and Weapons.dm:56]
		= [Player and Weapons.dm:57]
			 (see_in_dark) [Player and Weapons.dm:57]
			 (2) [Player and Weapons.dm:57]
		Move [Player and Weapons.dm:59]
			var [Player and Weapons.dm:59]
				.arg [Player and Weapons.dm:59]
					O [Player and Weapons.dm:59]
					OO [Player and Weapons.dm:59]
			if [Player and Weapons.dm:59]
				 (MAction) [Player and Weapons.dm:59]
			 [Player and Weapons.dm:60]
				var [Player and Weapons.dm:60]
					X [Player and Weapons.dm:60]
						 [Player and Weapons.dm:60]
							= [Player and Weapons.dm:60]
								 (src.dir) [Player and Weapons.dm:60]
				if [Player and Weapons.dm:61]
					 [Player and Weapons.dm:61]
						&& [Player and Weapons.dm:61]
							 [Player and Weapons.dm:61]
								! [Player and Weapons.dm:61]
									isnull [Player and Weapons.dm:61]
										 (src.Target) [Player and Weapons.dm:61]
							 [Player and Weapons.dm:61]
								! [Player and Weapons.dm:61]
									 [Player and Weapons.dm:61]
										in [Player and Weapons.dm:61]
											 (src.Target) [Player and Weapons.dm:61]
											 [Player and Weapons.dm:61]
												view [Player and Weapons.dm:61]
				 [Player and Weapons.dm:62]
					= [Player and Weapons.dm:62]
						 (src.Target) [Player and Weapons.dm:62]
						 (null) [Player and Weapons.dm:62]
					= [Player and Weapons.dm:63]
						 (src.Firing) [Player and Weapons.dm:63]
						 (0) [Player and Weapons.dm:63]
				.call (..) [Player and Weapons.dm:64]
				= [Player and Weapons.dm:65]
					 (src.dir) [Player and Weapons.dm:65]
					 (X) [Player and Weapons.dm:65]
		Bump [Player and Weapons.dm:66]
			var [Player and Weapons.dm:67]
				.arg [Player and Weapons.dm:67]
					atom [Player and Weapons.dm:66]
						X [Player and Weapons.dm:66]
			if [Player and Weapons.dm:67]
				 [Player and Weapons.dm:67]
					istype [Player and Weapons.dm:67]
						 (X) [Player and Weapons.dm:67]
						 (/mob/Characters) [Player and Weapons.dm:67]
			 [Player and Weapons.dm:68]
				= [Player and Weapons.dm:68]
					 (src.loc) [Player and Weapons.dm:68]
					 (X.loc) [Player and Weapons.dm:68]
		Login [Player and Weapons.dm:69]
			var [Player and Weapons.dm:70]
				.arg [Player and Weapons.dm:70]
			if [Player and Weapons.dm:70]
				 [Player and Weapons.dm:70]
					|| [Player and Weapons.dm:70]
						 (locked) [Player and Weapons.dm:70]
						 [Player and Weapons.dm:70]
							&& [Player and Weapons.dm:70]
								 [Player and Weapons.dm:70]
									>= [Player and Weapons.dm:70]
										 (Players) [Player and Weapons.dm:70]
										 (playerz) [Player and Weapons.dm:70]
								 [Player and Weapons.dm:70]
									!= [Player and Weapons.dm:70]
										 (Players) [Player and Weapons.dm:70]
										 (0) [Player and Weapons.dm:70]
			 [Player and Weapons.dm:71]
				<< [Player and Weapons.dm:71]
					 (src) [Player and Weapons.dm:71]
					 ("<font color=blue><b>Sorry, but the server is locked or has reached player capacity.") [Player and Weapons.dm:71]
				del [Player and Weapons.dm:72]
					 (src) [Player and Weapons.dm:72]
			else [Player and Weapons.dm:73]
				if [Player and Weapons.dm:74]
					 [Player and Weapons.dm:74]
						! [Player and Weapons.dm:74]
							 (Started) [Player and Weapons.dm:74]
				 [Player and Weapons.dm:75]
					= [Player and Weapons.dm:75]
						 (src.loc) [Player and Weapons.dm:75]
						 [Player and Weapons.dm:75]
							locate [Player and Weapons.dm:75]
								 (11) [Player and Weapons.dm:75]
								 (11) [Player and Weapons.dm:75]
								 (2) [Player and Weapons.dm:75]
				else [Player and Weapons.dm:76]
					if [Player and Weapons.dm:76]
						 (Started) [Player and Weapons.dm:76]
					 [Player and Weapons.dm:77]
						<< [Player and Weapons.dm:77]
							 (src) [Player and Weapons.dm:77]
							 ("<font color = blue>Game already in progress. Entering Observer Mode.</font>") [Player and Weapons.dm:77]
						var [Player and Weapons.dm:78]
							mob [Player and Weapons.dm:78]
								O [Player and Weapons.dm:78]
									 [Player and Weapons.dm:78]
										= [Player and Weapons.dm:78]
											 (src) [Player and Weapons.dm:78]
						var [Player and Weapons.dm:79]
							mob [Player and Weapons.dm:79]
								Observer [Player and Weapons.dm:79]
									Y [Player and Weapons.dm:79]
										 [Player and Weapons.dm:79]
											= [Player and Weapons.dm:79]
												new [Player and Weapons.dm:79]
													 [Player and Weapons.dm:79]
													 [Player and Weapons.dm:79]
														locate [Player and Weapons.dm:79]
															 [Player and Weapons.dm:79]
																text ("Starting Area \[]") [Player and Weapons.dm:79]
																	 [Player and Weapons.dm:79]
																		 (Map) [Player and Weapons.dm:79]
						= [Player and Weapons.dm:80]
							 (src.client/:/mob) [Player and Weapons.dm:80]
							 (Y) [Player and Weapons.dm:80]
						= [Player and Weapons.dm:80]
							 (Y.name) [Player and Weapons.dm:80]
							 (O.name) [Player and Weapons.dm:80]
						del [Player and Weapons.dm:81]
							 (src) [Player and Weapons.dm:81]
			.call (..) [Player and Weapons.dm:82]
			<< [Player and Weapons.dm:83]
				 (world) [Player and Weapons.dm:83]
				 [Player and Weapons.dm:83]
					text ("<TT>\[] has logged in.") [Player and Weapons.dm:83]
						 [Player and Weapons.dm:83]
							 (src) [Player and Weapons.dm:83]
		Logout [Player and Weapons.dm:84]
			var [Player and Weapons.dm:85]
				.arg [Player and Weapons.dm:85]
			-= [Player and Weapons.dm:85]
				 (ObserverList) [Player and Weapons.dm:85]
				 (src) [Player and Weapons.dm:85]
			-= [Player and Weapons.dm:86]
				 (PlayerList) [Player and Weapons.dm:86]
				 (src) [Player and Weapons.dm:86]
			.call (..) [Player and Weapons.dm:87]
		New [Player and Weapons.dm:90]
			var [Player and Weapons.dm:91]
				.arg [Player and Weapons.dm:91]
			.call (..) [Player and Weapons.dm:91]
			spawn [Player and Weapons.dm:91]
				 (5) [Player and Weapons.dm:91]
			 [Player and Weapons.dm:92]
				_block [Player and Weapons.dm:92]
					var [Player and Weapons.dm:92]
						I [Player and Weapons.dm:92]
					for [Player and Weapons.dm:92]
						 [Player and Weapons.dm:92]
							in [Player and Weapons.dm:92]
								 (I) [Player and Weapons.dm:92]
								 [Player and Weapons.dm:92]
									typesof [Player and Weapons.dm:92]
										 (/obj/Hud/) [Player and Weapons.dm:92]
					 [Player and Weapons.dm:93]
						var [Player and Weapons.dm:93]
							obj [Player and Weapons.dm:93]
								Hud [Player and Weapons.dm:93]
									Z [Player and Weapons.dm:93]
										 [Player and Weapons.dm:93]
											= [Player and Weapons.dm:93]
												new [Player and Weapons.dm:93]
													 (I) [Player and Weapons.dm:93]
													 (src.client) [Player and Weapons.dm:93]
						= [Player and Weapons.dm:94]
							 (Z.Owner) [Player and Weapons.dm:94]
							 (src) [Player and Weapons.dm:94]
			+= [Player and Weapons.dm:95]
				 (src.Inventory2) [Player and Weapons.dm:95]
				 [Player and Weapons.dm:95]
					new [Player and Weapons.dm:95]
						 (/obj/Items/Weapons/DualScorpians) [Player and Weapons.dm:95]
						 (src) [Player and Weapons.dm:95]
			spawn [Player and Weapons.dm:96]
				 (5) [Player and Weapons.dm:96]
			 [Player and Weapons.dm:96]
				.call (HPARM) [Player and Weapons.dm:96]
					 (src) [Player and Weapons.dm:96]
					 (src.Armor) [Player and Weapons.dm:96]
					 (src.Health) [Player and Weapons.dm:96]
		Entered [Player and Weapons.dm:98]
			var [Player and Weapons.dm:99]
				.arg [Player and Weapons.dm:99]
					obj [Player and Weapons.dm:98]
						X [Player and Weapons.dm:98]
			if [Player and Weapons.dm:99]
				 [Player and Weapons.dm:99]
					&& [Player and Weapons.dm:99]
						 [Player and Weapons.dm:99]
							istype [Player and Weapons.dm:99]
								 (X) [Player and Weapons.dm:99]
								 (/obj/Items/Weapons) [Player and Weapons.dm:99]
						 [Player and Weapons.dm:99]
							< [Player and Weapons.dm:99]
								 [Player and Weapons.dm:99]
									length [Player and Weapons.dm:99]
										 (src.Inventory2) [Player and Weapons.dm:99]
								 (src.GunMax) [Player and Weapons.dm:99]
			 [Player and Weapons.dm:100]
				= [Player and Weapons.dm:100]
					 (X.Owner) [Player and Weapons.dm:100]
					 (src) [Player and Weapons.dm:100]
				+= [Player and Weapons.dm:101]
					 (src.Inventory2) [Player and Weapons.dm:101]
					 (X) [Player and Weapons.dm:101]
			else [Player and Weapons.dm:102]
				if [Player and Weapons.dm:102]
					 [Player and Weapons.dm:102]
						&& [Player and Weapons.dm:102]
							 [Player and Weapons.dm:102]
								! [Player and Weapons.dm:102]
									istype [Player and Weapons.dm:102]
										 (X) [Player and Weapons.dm:102]
										 (/obj/Items/Weapons) [Player and Weapons.dm:102]
							 [Player and Weapons.dm:102]
								< [Player and Weapons.dm:102]
									 [Player and Weapons.dm:102]
										length [Player and Weapons.dm:102]
											 (src.Inventory) [Player and Weapons.dm:102]
									 (src.ItemMax) [Player and Weapons.dm:102]
				 [Player and Weapons.dm:103]
					= [Player and Weapons.dm:103]
						 (X.Owner) [Player and Weapons.dm:103]
						 (src) [Player and Weapons.dm:103]
					+= [Player and Weapons.dm:104]
						 (src.Inventory) [Player and Weapons.dm:104]
						 (X) [Player and Weapons.dm:104]
				else [Player and Weapons.dm:105]
					= [Player and Weapons.dm:105]
						 (X.loc) [Player and Weapons.dm:105]
						 (src.loc) [Player and Weapons.dm:105]
			if [Player and Weapons.dm:106]
				 [Player and Weapons.dm:106]
					! [Player and Weapons.dm:106]
						isnull [Player and Weapons.dm:106]
							 (src.client) [Player and Weapons.dm:106]
			 [Player and Weapons.dm:106]
				_block [Player and Weapons.dm:106]
					var [Player and Weapons.dm:106]
						obj [Player and Weapons.dm:106]
							Hud [Player and Weapons.dm:106]
								Inv [Player and Weapons.dm:106]
									Y [Player and Weapons.dm:106]
					for [Player and Weapons.dm:106]
						 [Player and Weapons.dm:106]
							in [Player and Weapons.dm:106]
								 (Y) [Player and Weapons.dm:106]
								 (src.client.screen) [Player and Weapons.dm:106]
					 [Player and Weapons.dm:106]
						.call (Y.Updating) [Player and Weapons.dm:106]
			.call (..) [Player and Weapons.dm:107]
		Exited [Player and Weapons.dm:109]
			var [Player and Weapons.dm:110]
				.arg [Player and Weapons.dm:110]
					obj [Player and Weapons.dm:109]
						X [Player and Weapons.dm:109]
			.call (..) [Player and Weapons.dm:110]
			if [Player and Weapons.dm:111]
				 [Player and Weapons.dm:111]
					istype [Player and Weapons.dm:111]
						 (X) [Player and Weapons.dm:111]
						 (/obj/Items/Weapons) [Player and Weapons.dm:111]
			 [Player and Weapons.dm:112]
				-= [Player and Weapons.dm:112]
					 (src.Inventory2) [Player and Weapons.dm:112]
					 (X) [Player and Weapons.dm:112]
				if [Player and Weapons.dm:113]
					 [Player and Weapons.dm:113]
						> [Player and Weapons.dm:113]
							 [Player and Weapons.dm:113]
								length [Player and Weapons.dm:113]
									 (src.Inventory2) [Player and Weapons.dm:113]
							 (0) [Player and Weapons.dm:113]
				 [Player and Weapons.dm:114]
					if [Player and Weapons.dm:114]
						 [Player and Weapons.dm:114]
							< [Player and Weapons.dm:114]
								 [Player and Weapons.dm:114]
									length [Player and Weapons.dm:114]
										 (src.Inventory2) [Player and Weapons.dm:114]
								 (src.Inv2) [Player and Weapons.dm:114]
					 [Player and Weapons.dm:114]
						.post-- (src.Inv2) [Player and Weapons.dm:114]
					= [Player and Weapons.dm:115]
						 (src.Wep) [Player and Weapons.dm:115]
						 [Player and Weapons.dm:115]
							.index (src.Inventory2) [Player and Weapons.dm:115]
								 (src.Inv2) [Player and Weapons.dm:115]
					= [Player and Weapons.dm:116]
						 (src.icon_state) [Player and Weapons.dm:116]
						 [Player and Weapons.dm:116]
							text ("Hunter \[]") [Player and Weapons.dm:116]
								 [Player and Weapons.dm:116]
									 (src.Wep) [Player and Weapons.dm:116]
					= [Player and Weapons.dm:117]
						 (src.Firing) [Player and Weapons.dm:117]
						 (0) [Player and Weapons.dm:117]
					= [Player and Weapons.dm:118]
						 (src.WeaponMode) [Player and Weapons.dm:118]
						 (0) [Player and Weapons.dm:118]
				else [Player and Weapons.dm:119]
					= [Player and Weapons.dm:119]
						 (src.icon_state) [Player and Weapons.dm:119]
						 ("Hunter") [Player and Weapons.dm:119]
			else [Player and Weapons.dm:120]
				-= [Player and Weapons.dm:121]
					 (src.Inventory) [Player and Weapons.dm:121]
					 (X) [Player and Weapons.dm:121]
				if [Player and Weapons.dm:122]
					 [Player and Weapons.dm:122]
						< [Player and Weapons.dm:122]
							 [Player and Weapons.dm:122]
								length [Player and Weapons.dm:122]
									 (src.Inventory) [Player and Weapons.dm:122]
							 (src.Inv) [Player and Weapons.dm:122]
				 [Player and Weapons.dm:122]
					.post-- (src.Inv) [Player and Weapons.dm:122]
			if [Player and Weapons.dm:123]
				 [Player and Weapons.dm:123]
					! [Player and Weapons.dm:123]
						isnull [Player and Weapons.dm:123]
							 (src.client) [Player and Weapons.dm:123]
			 [Player and Weapons.dm:123]
				_block [Player and Weapons.dm:123]
					var [Player and Weapons.dm:123]
						obj [Player and Weapons.dm:123]
							Hud [Player and Weapons.dm:123]
								Inv [Player and Weapons.dm:123]
									Y [Player and Weapons.dm:123]
					for [Player and Weapons.dm:123]
						 [Player and Weapons.dm:123]
							in [Player and Weapons.dm:123]
								 (Y) [Player and Weapons.dm:123]
								 (src.client.screen) [Player and Weapons.dm:123]
					 [Player and Weapons.dm:123]
						.call (Y.Updating) [Player and Weapons.dm:123]
		proc [Player and Weapons.dm:126]
			Shooting [Player and Weapons.dm:126]
				var [Player and Weapons.dm:127]
					.arg [Player and Weapons.dm:127]
				var [Player and Weapons.dm:127]
					atom [Player and Weapons.dm:127]
						movable [Player and Weapons.dm:127]
							MTarget [Player and Weapons.dm:127]
				= [Player and Weapons.dm:128]
					 (src.dir) [Player and Weapons.dm:128]
					 [Player and Weapons.dm:128]
						get_dir [Player and Weapons.dm:128]
							 (src) [Player and Weapons.dm:128]
							 (src.Target) [Player and Weapons.dm:128]
				_block [Player and Weapons.dm:130]
					var [Player and Weapons.dm:130]
						atom [Player and Weapons.dm:130]
							A [Player and Weapons.dm:130]
					for [Player and Weapons.dm:130]
						 [Player and Weapons.dm:130]
							in [Player and Weapons.dm:130]
								 (A) [Player and Weapons.dm:130]
								 [Player and Weapons.dm:130]
									.call (getline) [Player and Weapons.dm:130]
										 (src) [Player and Weapons.dm:130]
										 (Target) [Player and Weapons.dm:130]
					 [Player and Weapons.dm:131]
						if [Player and Weapons.dm:131]
							 [Player and Weapons.dm:131]
								|| [Player and Weapons.dm:131]
									 (A.density) [Player and Weapons.dm:131]
									 [Player and Weapons.dm:131]
										! [Player and Weapons.dm:131]
											.call (A.Enter) [Player and Weapons.dm:131]
												 (src) [Player and Weapons.dm:131]
						 [Player and Weapons.dm:132]
							= [Player and Weapons.dm:132]
								 (Target) [Player and Weapons.dm:132]
								 (A) [Player and Weapons.dm:132]
							= [Player and Weapons.dm:132]
								 (MTarget) [Player and Weapons.dm:132]
								 (A) [Player and Weapons.dm:132]
							break [Player and Weapons.dm:133]
				_block [Player and Weapons.dm:135]
					var [Player and Weapons.dm:135]
						atom [Player and Weapons.dm:135]
							movable [Player and Weapons.dm:135]
								X [Player and Weapons.dm:135]
					for [Player and Weapons.dm:135]
						 [Player and Weapons.dm:135]
							in [Player and Weapons.dm:135]
								 (X) [Player and Weapons.dm:135]
								 (src.Target) [Player and Weapons.dm:135]
					 [Player and Weapons.dm:135]
						if [Player and Weapons.dm:135]
							 [Player and Weapons.dm:135]
								! [Player and Weapons.dm:135]
									istype [Player and Weapons.dm:135]
										 (MTarget) [Player and Weapons.dm:135]
										 (/mob/Player) [Player and Weapons.dm:135]
						 [Player and Weapons.dm:136]
							= [Player and Weapons.dm:136]
								 (MTarget) [Player and Weapons.dm:136]
								 (X) [Player and Weapons.dm:136]
				if [Player and Weapons.dm:137]
					 [Player and Weapons.dm:137]
						|| [Player and Weapons.dm:137]
							 [Player and Weapons.dm:137]
								isnull [Player and Weapons.dm:137]
									 (src.Wep) [Player and Weapons.dm:137]
							 [Player and Weapons.dm:137]
								! [Player and Weapons.dm:137]
									 (src.Action) [Player and Weapons.dm:137]
							 [Player and Weapons.dm:137]
								<= [Player and Weapons.dm:137]
									 (src.Health) [Player and Weapons.dm:137]
									 (0) [Player and Weapons.dm:137]
				 [Player and Weapons.dm:137]
					return [Player and Weapons.dm:137]
				if [Player and Weapons.dm:138]
					 (src.invisibility) [Player and Weapons.dm:138]
				 [Player and Weapons.dm:138]
					= [Player and Weapons.dm:138]
						 (src.invisibility) [Player and Weapons.dm:138]
						 (0) [Player and Weapons.dm:138]
				else [Player and Weapons.dm:140]
					if [Player and Weapons.dm:140]
						 [Player and Weapons.dm:140]
							&& [Player and Weapons.dm:140]
								 [Player and Weapons.dm:140]
									== [Player and Weapons.dm:140]
										 (src.Wep.name) [Player and Weapons.dm:140]
										 ("Dual Scorpians") [Player and Weapons.dm:140]
								 [Player and Weapons.dm:140]
									> [Player and Weapons.dm:140]
										 (src.Wep.Ammo) [Player and Weapons.dm:140]
										 (0) [Player and Weapons.dm:140]
					 [Player and Weapons.dm:141]
						flick [Player and Weapons.dm:141]
							 [Player and Weapons.dm:141]
								text ("\[] Fire") [Player and Weapons.dm:141]
									 [Player and Weapons.dm:141]
										 (src.icon_state) [Player and Weapons.dm:141]
							 (src) [Player and Weapons.dm:141]
						<< [Player and Weapons.dm:142]
							 [Player and Weapons.dm:142]
								view [Player and Weapons.dm:142]
							 [Player and Weapons.dm:142]
								sound [Player and Weapons.dm:142]
									 ('gunshot1.wav') [Player and Weapons.dm:142]
									 (0) [Player and Weapons.dm:142]
						if [Player and Weapons.dm:143]
							 [Player and Weapons.dm:143]
								! [Player and Weapons.dm:143]
									 (src.WeaponMode) [Player and Weapons.dm:143]
						 [Player and Weapons.dm:144]
							missile [Player and Weapons.dm:144]
								 [Player and Weapons.dm:144]
									image [Player and Weapons.dm:144]
										 [Player and Weapons.dm:144]
											arglist [Player and Weapons.dm:144]
												 [Player and Weapons.dm:144]
													list [Player and Weapons.dm:144]
														 ('Effects.dmi') [Player and Weapons.dm:144]
														 [Player and Weapons.dm:144]
															= [Player and Weapons.dm:144]
																 ("icon_state") [Player and Weapons.dm:144]
																 ("Bullet") [Player and Weapons.dm:144]
														 [Player and Weapons.dm:144]
															= [Player and Weapons.dm:144]
																 ("pixel_y") [Player and Weapons.dm:144]
																 [Player and Weapons.dm:144]
																	rand [Player and Weapons.dm:144]
																		 (-5) [Player and Weapons.dm:144]
																		 (5) [Player and Weapons.dm:144]
														 [Player and Weapons.dm:144]
															= [Player and Weapons.dm:144]
																 ("pixel_x") [Player and Weapons.dm:144]
																 [Player and Weapons.dm:144]
																	rand [Player and Weapons.dm:144]
																		 (-5) [Player and Weapons.dm:144]
																		 (5) [Player and Weapons.dm:144]
								 (src) [Player and Weapons.dm:144]
								 (src.Target) [Player and Weapons.dm:144]
							if [Player and Weapons.dm:145]
								 [Player and Weapons.dm:145]
									! [Player and Weapons.dm:145]
										isnull [Player and Weapons.dm:145]
											 (MTarget) [Player and Weapons.dm:145]
							 [Player and Weapons.dm:145]
								.call (Damage) [Player and Weapons.dm:145]
									 (src) [Player and Weapons.dm:145]
									 (MTarget) [Player and Weapons.dm:145]
									 (0.5) [Player and Weapons.dm:145]
									 ("Slash") [Player and Weapons.dm:145]
									 (25) [Player and Weapons.dm:145]
							.call (Combat) [Player and Weapons.dm:146]
								 (3) [Player and Weapons.dm:146]
								 (src.Wep) [Player and Weapons.dm:146]
							return [Player and Weapons.dm:146]
					else [Player and Weapons.dm:148]
						if [Player and Weapons.dm:148]
							 [Player and Weapons.dm:148]
								&& [Player and Weapons.dm:148]
									 [Player and Weapons.dm:148]
										== [Player and Weapons.dm:148]
											 (src.Wep.name) [Player and Weapons.dm:148]
											 ("Rocket Launcher") [Player and Weapons.dm:148]
									 [Player and Weapons.dm:148]
										> [Player and Weapons.dm:148]
											 (src.Wep.Ammo) [Player and Weapons.dm:148]
											 (0) [Player and Weapons.dm:148]
						 [Player and Weapons.dm:149]
							.call (Combat) [Player and Weapons.dm:149]
								 (15) [Player and Weapons.dm:149]
								 (src.Wep) [Player and Weapons.dm:149]
							flick [Player and Weapons.dm:150]
								 [Player and Weapons.dm:150]
									text ("\[] Fire") [Player and Weapons.dm:150]
										 [Player and Weapons.dm:150]
											 (src.icon_state) [Player and Weapons.dm:150]
								 (src) [Player and Weapons.dm:150]
							sleep [Player and Weapons.dm:150]
								 (7) [Player and Weapons.dm:150]
							.post-- (src.Wep.Counter) [Player and Weapons.dm:151]
							if [Player and Weapons.dm:152]
								 [Player and Weapons.dm:152]
									isnull [Player and Weapons.dm:152]
										 (MTarget) [Player and Weapons.dm:152]
							 [Player and Weapons.dm:153]
								missile [Player and Weapons.dm:153]
									 [Player and Weapons.dm:153]
										image [Player and Weapons.dm:153]
											 [Player and Weapons.dm:153]
												arglist [Player and Weapons.dm:153]
													 [Player and Weapons.dm:153]
														list [Player and Weapons.dm:153]
															 ('Effects.dmi') [Player and Weapons.dm:153]
															 [Player and Weapons.dm:153]
																= [Player and Weapons.dm:153]
																	 ("icon_state") [Player and Weapons.dm:153]
																	 ("Missile") [Player and Weapons.dm:153]
									 (src) [Player and Weapons.dm:153]
									 (src.Target) [Player and Weapons.dm:153]
								spawn [Player and Weapons.dm:154]
									 [Player and Weapons.dm:154]
										get_dist [Player and Weapons.dm:154]
											 (src) [Player and Weapons.dm:154]
											 (src.Target) [Player and Weapons.dm:154]
								 [Player and Weapons.dm:155]
									.call (Explode) [Player and Weapons.dm:155]
										 (Target) [Player and Weapons.dm:155]
										 (20) [Player and Weapons.dm:155]
										 (1) [Player and Weapons.dm:155]
										 (25) [Player and Weapons.dm:155]
							else [Player and Weapons.dm:156]
								var [Player and Weapons.dm:157]
									obj [Player and Weapons.dm:157]
										Effects [Player and Weapons.dm:157]
											Missile [Player and Weapons.dm:157]
												Y [Player and Weapons.dm:157]
													 [Player and Weapons.dm:157]
														= [Player and Weapons.dm:157]
															new [Player and Weapons.dm:157]
																 [Player and Weapons.dm:157]
																 (src.loc) [Player and Weapons.dm:157]
								walk_towards [Player and Weapons.dm:158]
									 (Y) [Player and Weapons.dm:158]
									 (MTarget) [Player and Weapons.dm:158]
									 (2) [Player and Weapons.dm:158]
							if [Player and Weapons.dm:159]
								 [Player and Weapons.dm:159]
									<= [Player and Weapons.dm:159]
										 (src.Wep.Counter) [Player and Weapons.dm:159]
										 (0) [Player and Weapons.dm:159]
							 [Player and Weapons.dm:159]
								del [Player and Weapons.dm:159]
									 (src.Wep) [Player and Weapons.dm:159]
						else [Player and Weapons.dm:161]
							if [Player and Weapons.dm:161]
								 [Player and Weapons.dm:161]
									== [Player and Weapons.dm:161]
										 (src.Wep.name) [Player and Weapons.dm:161]
										 ("Knife") [Player and Weapons.dm:161]
							 [Player and Weapons.dm:162]
								flick [Player and Weapons.dm:162]
									 [Player and Weapons.dm:162]
										text ("\[] Fire") [Player and Weapons.dm:162]
											 [Player and Weapons.dm:162]
												 (src.icon_state) [Player and Weapons.dm:162]
									 (src) [Player and Weapons.dm:162]
								if [Player and Weapons.dm:163]
									 [Player and Weapons.dm:163]
										&& [Player and Weapons.dm:163]
											 [Player and Weapons.dm:163]
												! [Player and Weapons.dm:163]
													 (src.WeaponMode) [Player and Weapons.dm:163]
											 [Player and Weapons.dm:163]
												<= [Player and Weapons.dm:163]
													 [Player and Weapons.dm:163]
														get_dist [Player and Weapons.dm:163]
															 (src) [Player and Weapons.dm:163]
															 (src.Target) [Player and Weapons.dm:163]
													 (1) [Player and Weapons.dm:163]
								 [Player and Weapons.dm:164]
									if [Player and Weapons.dm:164]
										 [Player and Weapons.dm:164]
											! [Player and Weapons.dm:164]
												isnull [Player and Weapons.dm:164]
													 (MTarget) [Player and Weapons.dm:164]
									 [Player and Weapons.dm:164]
										.call (Damage) [Player and Weapons.dm:164]
											 (src) [Player and Weapons.dm:164]
											 (MTarget) [Player and Weapons.dm:164]
											 (1) [Player and Weapons.dm:164]
											 ("Slash") [Player and Weapons.dm:164]
											 (25) [Player and Weapons.dm:164]
									.call (Combat) [Player and Weapons.dm:165]
										 (3) [Player and Weapons.dm:165]
										 (src.Wep) [Player and Weapons.dm:165]
									return [Player and Weapons.dm:165]
								else [Player and Weapons.dm:166]
									if [Player and Weapons.dm:166]
										 (src.WeaponMode) [Player and Weapons.dm:166]
									 [Player and Weapons.dm:167]
										missile [Player and Weapons.dm:167]
											 [Player and Weapons.dm:167]
												image [Player and Weapons.dm:167]
													 [Player and Weapons.dm:167]
														arglist [Player and Weapons.dm:167]
															 [Player and Weapons.dm:167]
																list [Player and Weapons.dm:167]
																	 ('Effects.dmi') [Player and Weapons.dm:167]
																	 [Player and Weapons.dm:167]
																		= [Player and Weapons.dm:167]
																			 ("icon_state") [Player and Weapons.dm:167]
																			 ("Knife") [Player and Weapons.dm:167]
																	 [Player and Weapons.dm:167]
																		= [Player and Weapons.dm:167]
																			 ("layer") [Player and Weapons.dm:167]
																			 (5) [Player and Weapons.dm:167]
											 (src) [Player and Weapons.dm:167]
											 (src.Target) [Player and Weapons.dm:167]
										if [Player and Weapons.dm:168]
											 [Player and Weapons.dm:168]
												! [Player and Weapons.dm:168]
													isnull [Player and Weapons.dm:168]
														 (MTarget) [Player and Weapons.dm:168]
										 [Player and Weapons.dm:168]
											.call (Damage) [Player and Weapons.dm:168]
												 (src) [Player and Weapons.dm:168]
												 (MTarget) [Player and Weapons.dm:168]
												 (8) [Player and Weapons.dm:168]
												 ("Slash") [Player and Weapons.dm:168]
												 (30) [Player and Weapons.dm:168]
										del [Player and Weapons.dm:168]
											 (src.Wep) [Player and Weapons.dm:168]
										return [Player and Weapons.dm:169]
							else [Player and Weapons.dm:171]
								if [Player and Weapons.dm:171]
									 [Player and Weapons.dm:171]
										&& [Player and Weapons.dm:171]
											 [Player and Weapons.dm:171]
												== [Player and Weapons.dm:171]
													 (src.Wep.name) [Player and Weapons.dm:171]
													 ("Chainsaw") [Player and Weapons.dm:171]
											 [Player and Weapons.dm:171]
												< [Player and Weapons.dm:171]
													 [Player and Weapons.dm:171]
														get_dist [Player and Weapons.dm:171]
															 (src) [Player and Weapons.dm:171]
															 (src.Target) [Player and Weapons.dm:171]
													 (2) [Player and Weapons.dm:171]
								 [Player and Weapons.dm:172]
									flick [Player and Weapons.dm:172]
										 [Player and Weapons.dm:172]
											text ("\[] Fire") [Player and Weapons.dm:172]
												 [Player and Weapons.dm:172]
													 (src.icon_state) [Player and Weapons.dm:172]
										 (src) [Player and Weapons.dm:172]
									<< [Player and Weapons.dm:173]
										 [Player and Weapons.dm:173]
											view [Player and Weapons.dm:173]
										 [Player and Weapons.dm:173]
											sound [Player and Weapons.dm:173]
												 ('chainsaw3.wav') [Player and Weapons.dm:173]
												 (0) [Player and Weapons.dm:173]
									if [Player and Weapons.dm:174]
										 [Player and Weapons.dm:174]
											! [Player and Weapons.dm:174]
												 (src.WeaponMode) [Player and Weapons.dm:174]
									 [Player and Weapons.dm:175]
										if [Player and Weapons.dm:175]
											 [Player and Weapons.dm:175]
												! [Player and Weapons.dm:175]
													isnull [Player and Weapons.dm:175]
														 (MTarget) [Player and Weapons.dm:175]
										 [Player and Weapons.dm:175]
											.call (Damage) [Player and Weapons.dm:175]
												 (src) [Player and Weapons.dm:175]
												 (MTarget) [Player and Weapons.dm:175]
												 (4) [Player and Weapons.dm:175]
												 ("Chop") [Player and Weapons.dm:175]
												 (75) [Player and Weapons.dm:175]
										.call (Combat) [Player and Weapons.dm:176]
											 (6) [Player and Weapons.dm:176]
											 (src.Wep) [Player and Weapons.dm:176]
										return [Player and Weapons.dm:176]
									else [Player and Weapons.dm:177]
										if [Player and Weapons.dm:177]
											 (src.WeaponMode) [Player and Weapons.dm:177]
										 [Player and Weapons.dm:178]
											if [Player and Weapons.dm:178]
												 [Player and Weapons.dm:178]
													! [Player and Weapons.dm:178]
														isnull [Player and Weapons.dm:178]
															 (MTarget) [Player and Weapons.dm:178]
											 [Player and Weapons.dm:178]
												.call (Damage) [Player and Weapons.dm:178]
													 (src) [Player and Weapons.dm:178]
													 (MTarget) [Player and Weapons.dm:178]
													 (6) [Player and Weapons.dm:178]
													 ("Chop") [Player and Weapons.dm:178]
													 (95) [Player and Weapons.dm:178]
											.call (Combat) [Player and Weapons.dm:179]
												 (10) [Player and Weapons.dm:179]
												 (src.Wep) [Player and Weapons.dm:179]
											return [Player and Weapons.dm:179]
								else [Player and Weapons.dm:181]
									if [Player and Weapons.dm:181]
										 [Player and Weapons.dm:181]
											&& [Player and Weapons.dm:181]
												 [Player and Weapons.dm:181]
													== [Player and Weapons.dm:181]
														 (src.Wep.name) [Player and Weapons.dm:181]
														 ("Chaingun") [Player and Weapons.dm:181]
												 [Player and Weapons.dm:181]
													> [Player and Weapons.dm:181]
														 (src.Wep.Ammo) [Player and Weapons.dm:181]
														 (0) [Player and Weapons.dm:181]
									 [Player and Weapons.dm:182]
										flick [Player and Weapons.dm:182]
											 [Player and Weapons.dm:182]
												text ("\[] Fire") [Player and Weapons.dm:182]
													 [Player and Weapons.dm:182]
														 (src.icon_state) [Player and Weapons.dm:182]
											 (src) [Player and Weapons.dm:182]
										<< [Player and Weapons.dm:183]
											 [Player and Weapons.dm:183]
												view [Player and Weapons.dm:183]
											 [Player and Weapons.dm:183]
												sound [Player and Weapons.dm:183]
													 ('mgun.wav') [Player and Weapons.dm:183]
													 (0) [Player and Weapons.dm:183]
										if [Player and Weapons.dm:184]
											 [Player and Weapons.dm:184]
												! [Player and Weapons.dm:184]
													 (src.WeaponMode) [Player and Weapons.dm:184]
										 [Player and Weapons.dm:185]
											missile [Player and Weapons.dm:185]
												 [Player and Weapons.dm:185]
													image [Player and Weapons.dm:185]
														 [Player and Weapons.dm:185]
															arglist [Player and Weapons.dm:185]
																 [Player and Weapons.dm:185]
																	list [Player and Weapons.dm:185]
																		 ('Effects.dmi') [Player and Weapons.dm:185]
																		 [Player and Weapons.dm:185]
																			= [Player and Weapons.dm:185]
																				 ("icon_state") [Player and Weapons.dm:185]
																				 ("Bullet") [Player and Weapons.dm:185]
																		 [Player and Weapons.dm:185]
																			= [Player and Weapons.dm:185]
																				 ("pixel_y") [Player and Weapons.dm:185]
																				 [Player and Weapons.dm:185]
																					rand [Player and Weapons.dm:185]
																						 (-5) [Player and Weapons.dm:185]
																						 (5) [Player and Weapons.dm:185]
																		 [Player and Weapons.dm:185]
																			= [Player and Weapons.dm:185]
																				 ("pixel_x") [Player and Weapons.dm:185]
																				 [Player and Weapons.dm:185]
																					rand [Player and Weapons.dm:185]
																						 (-5) [Player and Weapons.dm:185]
																						 (5) [Player and Weapons.dm:185]
												 (src) [Player and Weapons.dm:185]
												 (src.Target) [Player and Weapons.dm:185]
											if [Player and Weapons.dm:186]
												 [Player and Weapons.dm:186]
													! [Player and Weapons.dm:186]
														isnull [Player and Weapons.dm:186]
															 (MTarget) [Player and Weapons.dm:186]
											 [Player and Weapons.dm:186]
												.call (Damage) [Player and Weapons.dm:186]
													 (src) [Player and Weapons.dm:186]
													 (MTarget) [Player and Weapons.dm:186]
													 [Player and Weapons.dm:186]
														rand [Player and Weapons.dm:186]
															 (1) [Player and Weapons.dm:186]
															 (2) [Player and Weapons.dm:186]
													 ("Slash") [Player and Weapons.dm:186]
													 (25) [Player and Weapons.dm:186]
											.call (Combat) [Player and Weapons.dm:187]
												 (3) [Player and Weapons.dm:187]
												 (src.Wep) [Player and Weapons.dm:187]
											return [Player and Weapons.dm:187]
										else [Player and Weapons.dm:188]
											if [Player and Weapons.dm:188]
												 (src.WeaponMode) [Player and Weapons.dm:188]
											 [Player and Weapons.dm:189]
												missile [Player and Weapons.dm:189]
													 [Player and Weapons.dm:189]
														image [Player and Weapons.dm:189]
															 [Player and Weapons.dm:189]
																arglist [Player and Weapons.dm:189]
																	 [Player and Weapons.dm:189]
																		list [Player and Weapons.dm:189]
																			 ('Effects.dmi') [Player and Weapons.dm:189]
																			 [Player and Weapons.dm:189]
																				= [Player and Weapons.dm:189]
																					 ("icon_state") [Player and Weapons.dm:189]
																					 ("Bullet") [Player and Weapons.dm:189]
																			 [Player and Weapons.dm:189]
																				= [Player and Weapons.dm:189]
																					 ("pixel_y") [Player and Weapons.dm:189]
																					 [Player and Weapons.dm:189]
																						rand [Player and Weapons.dm:189]
																							 (-5) [Player and Weapons.dm:189]
																							 (5) [Player and Weapons.dm:189]
																			 [Player and Weapons.dm:189]
																				= [Player and Weapons.dm:189]
																					 ("pixel_x") [Player and Weapons.dm:189]
																					 [Player and Weapons.dm:189]
																						rand [Player and Weapons.dm:189]
																							 (-5) [Player and Weapons.dm:189]
																							 (5) [Player and Weapons.dm:189]
													 (src) [Player and Weapons.dm:189]
													 (src.Target) [Player and Weapons.dm:189]
												if [Player and Weapons.dm:190]
													 [Player and Weapons.dm:190]
														! [Player and Weapons.dm:190]
															isnull [Player and Weapons.dm:190]
																 (MTarget) [Player and Weapons.dm:190]
												 [Player and Weapons.dm:190]
													.call (Damage) [Player and Weapons.dm:190]
														 (src) [Player and Weapons.dm:190]
														 (MTarget) [Player and Weapons.dm:190]
														 (1) [Player and Weapons.dm:190]
														 ("Slash") [Player and Weapons.dm:190]
														 (35) [Player and Weapons.dm:190]
												.call (Combat) [Player and Weapons.dm:191]
													 (1) [Player and Weapons.dm:191]
													 (src.Wep) [Player and Weapons.dm:191]
													 (2) [Player and Weapons.dm:191]
												return [Player and Weapons.dm:191]
									else [Player and Weapons.dm:193]
										if [Player and Weapons.dm:193]
											 [Player and Weapons.dm:193]
												&& [Player and Weapons.dm:193]
													 [Player and Weapons.dm:193]
														== [Player and Weapons.dm:193]
															 (src.Wep.name) [Player and Weapons.dm:193]
															 ("Shotgun") [Player and Weapons.dm:193]
													 [Player and Weapons.dm:193]
														> [Player and Weapons.dm:193]
															 (src.Wep.Ammo) [Player and Weapons.dm:193]
															 (0) [Player and Weapons.dm:193]
										 [Player and Weapons.dm:194]
											flick [Player and Weapons.dm:194]
												 [Player and Weapons.dm:194]
													text ("\[] Fire") [Player and Weapons.dm:194]
														 [Player and Weapons.dm:194]
															 (src.icon_state) [Player and Weapons.dm:194]
												 (src) [Player and Weapons.dm:194]
											<< [Player and Weapons.dm:195]
												 [Player and Weapons.dm:195]
													view [Player and Weapons.dm:195]
												 [Player and Weapons.dm:195]
													sound [Player and Weapons.dm:195]
														 ('shotgun.wav') [Player and Weapons.dm:195]
														 (0) [Player and Weapons.dm:195]
											if [Player and Weapons.dm:196]
												 [Player and Weapons.dm:196]
													|| [Player and Weapons.dm:196]
														 [Player and Weapons.dm:196]
															! [Player and Weapons.dm:196]
																 (src.WeaponMode) [Player and Weapons.dm:196]
														 [Player and Weapons.dm:196]
															== [Player and Weapons.dm:196]
																 (src.Wep.Ammo) [Player and Weapons.dm:196]
																 (1) [Player and Weapons.dm:196]
											 [Player and Weapons.dm:197]
												if [Player and Weapons.dm:197]
													 [Player and Weapons.dm:197]
														! [Player and Weapons.dm:197]
															isnull [Player and Weapons.dm:197]
																 (MTarget) [Player and Weapons.dm:197]
												 [Player and Weapons.dm:197]
													.call (Damage) [Player and Weapons.dm:197]
														 (src) [Player and Weapons.dm:197]
														 (MTarget) [Player and Weapons.dm:197]
														 [Player and Weapons.dm:197]
															- [Player and Weapons.dm:197]
																 (7) [Player and Weapons.dm:197]
																 [Player and Weapons.dm:197]
																	get_dist [Player and Weapons.dm:197]
																		 (src) [Player and Weapons.dm:197]
																		 (MTarget) [Player and Weapons.dm:197]
														 ("Slash") [Player and Weapons.dm:197]
														 (25) [Player and Weapons.dm:197]
												if [Player and Weapons.dm:198]
													 (src.Firing) [Player and Weapons.dm:198]
												 [Player and Weapons.dm:198]
													.call (Combat) [Player and Weapons.dm:198]
														 (10) [Player and Weapons.dm:198]
														 (src.Wep) [Player and Weapons.dm:198]
												return [Player and Weapons.dm:198]
											else [Player and Weapons.dm:199]
												if [Player and Weapons.dm:199]
													 [Player and Weapons.dm:199]
														&& [Player and Weapons.dm:199]
															 (src.WeaponMode) [Player and Weapons.dm:199]
															 [Player and Weapons.dm:199]
																> [Player and Weapons.dm:199]
																	 (src.Wep.Ammo) [Player and Weapons.dm:199]
																	 (1) [Player and Weapons.dm:199]
												 [Player and Weapons.dm:200]
													if [Player and Weapons.dm:200]
														 [Player and Weapons.dm:200]
															! [Player and Weapons.dm:200]
																isnull [Player and Weapons.dm:200]
																	 (MTarget) [Player and Weapons.dm:200]
													 [Player and Weapons.dm:201]
														.call (Combat) [Player and Weapons.dm:201]
															 (20) [Player and Weapons.dm:201]
															 (src.Wep) [Player and Weapons.dm:201]
															 (src.Wep.Ammo) [Player and Weapons.dm:201]
															 (10) [Player and Weapons.dm:201]
														if [Player and Weapons.dm:202]
															 [Player and Weapons.dm:202]
																|| [Player and Weapons.dm:202]
																	 (MTarget.Draggible) [Player and Weapons.dm:202]
																	 [Player and Weapons.dm:202]
																		ismob [Player and Weapons.dm:202]
																			 (MTarget) [Player and Weapons.dm:202]
														 [Player and Weapons.dm:203]
															var [Player and Weapons.dm:203]
																I [Player and Weapons.dm:203]
																	 [Player and Weapons.dm:203]
																		= [Player and Weapons.dm:203]
																			 (MTarget.dir) [Player and Weapons.dm:203]
															step [Player and Weapons.dm:204]
																 (MTarget) [Player and Weapons.dm:204]
																 [Player and Weapons.dm:204]
																	get_dir [Player and Weapons.dm:204]
																		 (src) [Player and Weapons.dm:204]
																		 (MTarget) [Player and Weapons.dm:204]
															= [Player and Weapons.dm:205]
																 (MTarget.dir) [Player and Weapons.dm:205]
																 (I) [Player and Weapons.dm:205]
														.call (Damage) [Player and Weapons.dm:206]
															 (src) [Player and Weapons.dm:206]
															 (MTarget) [Player and Weapons.dm:206]
															 [Player and Weapons.dm:206]
																- [Player and Weapons.dm:206]
																	 (12) [Player and Weapons.dm:206]
																	 [Player and Weapons.dm:206]
																		get_dist [Player and Weapons.dm:206]
																			 (src) [Player and Weapons.dm:206]
																			 (MTarget) [Player and Weapons.dm:206]
															 ("Slash") [Player and Weapons.dm:206]
															 (85) [Player and Weapons.dm:206]
														return [Player and Weapons.dm:207]
										else [Player and Weapons.dm:209]
											if [Player and Weapons.dm:209]
												 [Player and Weapons.dm:209]
													&& [Player and Weapons.dm:209]
														 [Player and Weapons.dm:209]
															== [Player and Weapons.dm:209]
																 (src.Wep.name) [Player and Weapons.dm:209]
																 ("Mk1 Laser") [Player and Weapons.dm:209]
														 [Player and Weapons.dm:209]
															> [Player and Weapons.dm:209]
																 (src.Wep.Ammo) [Player and Weapons.dm:209]
																 (0) [Player and Weapons.dm:209]
											 [Player and Weapons.dm:210]
												flick [Player and Weapons.dm:210]
													 [Player and Weapons.dm:210]
														text ("\[] Fire") [Player and Weapons.dm:210]
															 [Player and Weapons.dm:210]
																 (src.icon_state) [Player and Weapons.dm:210]
													 (src) [Player and Weapons.dm:210]
												if [Player and Weapons.dm:211]
													 [Player and Weapons.dm:211]
														! [Player and Weapons.dm:211]
															isnull [Player and Weapons.dm:211]
																 (MTarget) [Player and Weapons.dm:211]
												 [Player and Weapons.dm:211]
													.call (Damage) [Player and Weapons.dm:211]
														 (src) [Player and Weapons.dm:211]
														 (MTarget) [Player and Weapons.dm:211]
														 [Player and Weapons.dm:211]
															rand [Player and Weapons.dm:211]
																 (2) [Player and Weapons.dm:211]
																 (3) [Player and Weapons.dm:211]
														 ("Zap") [Player and Weapons.dm:211]
														 (0) [Player and Weapons.dm:211]
														 (1) [Player and Weapons.dm:211]
												.call (Combat) [Player and Weapons.dm:212]
													 (6) [Player and Weapons.dm:212]
													 (src.Wep) [Player and Weapons.dm:212]
												return [Player and Weapons.dm:212]
											else [Player and Weapons.dm:214]
												if [Player and Weapons.dm:214]
													 [Player and Weapons.dm:214]
														&& [Player and Weapons.dm:214]
															 [Player and Weapons.dm:214]
																== [Player and Weapons.dm:214]
																	 (src.Wep.name) [Player and Weapons.dm:214]
																	 ("Mk2 Laser") [Player and Weapons.dm:214]
															 [Player and Weapons.dm:214]
																> [Player and Weapons.dm:214]
																	 (src.Wep.Ammo) [Player and Weapons.dm:214]
																	 (0) [Player and Weapons.dm:214]
												 [Player and Weapons.dm:215]
													flick [Player and Weapons.dm:215]
														 [Player and Weapons.dm:215]
															text ("\[] Fire") [Player and Weapons.dm:215]
																 [Player and Weapons.dm:215]
																	 (src.icon_state) [Player and Weapons.dm:215]
														 (src) [Player and Weapons.dm:215]
													var [Player and Weapons.dm:216]
														obj [Player and Weapons.dm:216]
															Effects [Player and Weapons.dm:216]
																EnergyBall [Player and Weapons.dm:216]
																	X [Player and Weapons.dm:216]
																		 [Player and Weapons.dm:216]
																			= [Player and Weapons.dm:216]
																				new [Player and Weapons.dm:216]
																					 [Player and Weapons.dm:216]
																					 (src.loc) [Player and Weapons.dm:216]
													= [Player and Weapons.dm:217]
														 (X.Owner) [Player and Weapons.dm:217]
														 (src) [Player and Weapons.dm:217]
													= [Player and Weapons.dm:218]
														 (X.Target) [Player and Weapons.dm:218]
														 (src.Target) [Player and Weapons.dm:218]
													walk_towards [Player and Weapons.dm:219]
														 (X) [Player and Weapons.dm:219]
														 (src.Target) [Player and Weapons.dm:219]
														 (6) [Player and Weapons.dm:219]
													.call (Combat) [Player and Weapons.dm:220]
														 (40) [Player and Weapons.dm:220]
														 (src.Wep) [Player and Weapons.dm:220]
													return [Player and Weapons.dm:220]
												else [Player and Weapons.dm:222]
													if [Player and Weapons.dm:222]
														 [Player and Weapons.dm:222]
															&& [Player and Weapons.dm:222]
																 [Player and Weapons.dm:222]
																	== [Player and Weapons.dm:222]
																		 (src.Wep.name) [Player and Weapons.dm:222]
																		 ("Flame Thrower") [Player and Weapons.dm:222]
																 [Player and Weapons.dm:222]
																	> [Player and Weapons.dm:222]
																		 (src.Wep.Ammo) [Player and Weapons.dm:222]
																		 (0) [Player and Weapons.dm:222]
																 [Player and Weapons.dm:222]
																	<= [Player and Weapons.dm:222]
																		 [Player and Weapons.dm:222]
																			get_dist [Player and Weapons.dm:222]
																				 (src) [Player and Weapons.dm:222]
																				 (src.Target) [Player and Weapons.dm:222]
																		 (4) [Player and Weapons.dm:222]
													 [Player and Weapons.dm:223]
														flick [Player and Weapons.dm:223]
															 [Player and Weapons.dm:223]
																text ("\[] Fire") [Player and Weapons.dm:223]
																	 [Player and Weapons.dm:223]
																		 (src.icon_state) [Player and Weapons.dm:223]
															 (src) [Player and Weapons.dm:223]
														<< [Player and Weapons.dm:224]
															 [Player and Weapons.dm:224]
																view [Player and Weapons.dm:224]
															 [Player and Weapons.dm:224]
																sound [Player and Weapons.dm:224]
																	 ('Flamer.wav') [Player and Weapons.dm:224]
																	 (0) [Player and Weapons.dm:224]
														if [Player and Weapons.dm:225]
															 [Player and Weapons.dm:225]
																! [Player and Weapons.dm:225]
																	 (src.WeaponMode) [Player and Weapons.dm:225]
														 [Player and Weapons.dm:226]
															.call (Combat) [Player and Weapons.dm:226]
																 (5) [Player and Weapons.dm:226]
																 (src.Wep) [Player and Weapons.dm:226]
															_block [Player and Weapons.dm:227]
																var [Player and Weapons.dm:227]
																	I [Player and Weapons.dm:227]
																for [Player and Weapons.dm:227]
																	 [Player and Weapons.dm:227]
																		= [Player and Weapons.dm:227]
																			 (I) [Player and Weapons.dm:227]
																			 (6) [Player and Weapons.dm:227]
																	 [Player and Weapons.dm:227]
																		> [Player and Weapons.dm:227]
																			 (I) [Player and Weapons.dm:227]
																			 (0) [Player and Weapons.dm:227]
																	 [Player and Weapons.dm:227]
																		.post-- (I) [Player and Weapons.dm:227]
																 [Player and Weapons.dm:228]
																	missile [Player and Weapons.dm:228]
																		 [Player and Weapons.dm:228]
																			image [Player and Weapons.dm:228]
																				 [Player and Weapons.dm:228]
																					arglist [Player and Weapons.dm:228]
																						 [Player and Weapons.dm:228]
																							list [Player and Weapons.dm:228]
																								 ('Effects.dmi') [Player and Weapons.dm:228]
																								 [Player and Weapons.dm:228]
																									= [Player and Weapons.dm:228]
																										 ("icon_state") [Player and Weapons.dm:228]
																										 ("Flame 1") [Player and Weapons.dm:228]
																								 [Player and Weapons.dm:228]
																									= [Player and Weapons.dm:228]
																										 ("layer") [Player and Weapons.dm:228]
																										 (4) [Player and Weapons.dm:228]
																								 [Player and Weapons.dm:228]
																									= [Player and Weapons.dm:228]
																										 ("pixel_y") [Player and Weapons.dm:228]
																										 [Player and Weapons.dm:228]
																											rand [Player and Weapons.dm:228]
																												 (-10) [Player and Weapons.dm:228]
																												 (10) [Player and Weapons.dm:228]
																								 [Player and Weapons.dm:228]
																									= [Player and Weapons.dm:228]
																										 ("pixel_x") [Player and Weapons.dm:228]
																										 [Player and Weapons.dm:228]
																											rand [Player and Weapons.dm:228]
																												 (-10) [Player and Weapons.dm:228]
																												 (10) [Player and Weapons.dm:228]
																		 [Player and Weapons.dm:228]
																			get_step [Player and Weapons.dm:228]
																				 (src) [Player and Weapons.dm:228]
																				 (src.dir) [Player and Weapons.dm:228]
																		 (src.Target) [Player and Weapons.dm:228]
																	var [Player and Weapons.dm:229]
																		obj [Player and Weapons.dm:229]
																			Effects [Player and Weapons.dm:229]
																				Flame1 [Player and Weapons.dm:229]
																					Y [Player and Weapons.dm:229]
																						 [Player and Weapons.dm:229]
																							= [Player and Weapons.dm:229]
																								new [Player and Weapons.dm:229]
																									 [Player and Weapons.dm:229]
																									 (src.loc) [Player and Weapons.dm:229]
																	= [Player and Weapons.dm:230]
																		 (Y.Owner) [Player and Weapons.dm:230]
																		 (src) [Player and Weapons.dm:230]
																	walk_towards [Player and Weapons.dm:231]
																		 (Y) [Player and Weapons.dm:231]
																		 (src.Target) [Player and Weapons.dm:231]
																	sleep [Player and Weapons.dm:232]
																		 (1) [Player and Weapons.dm:232]
														else [Player and Weapons.dm:233]
															if [Player and Weapons.dm:233]
																 (src.WeaponMode) [Player and Weapons.dm:233]
															 [Player and Weapons.dm:234]
																if [Player and Weapons.dm:234]
																	 (src.Firing) [Player and Weapons.dm:234]
																 [Player and Weapons.dm:234]
																	.call (Combat) [Player and Weapons.dm:234]
																		 (5) [Player and Weapons.dm:234]
																		 (src.Wep) [Player and Weapons.dm:234]
																		 (1) [Player and Weapons.dm:234]
																		 (10) [Player and Weapons.dm:234]
																_block [Player and Weapons.dm:235]
																	var [Player and Weapons.dm:235]
																		turf [Player and Weapons.dm:235]
																			X [Player and Weapons.dm:235]
																	for [Player and Weapons.dm:235]
																		 [Player and Weapons.dm:235]
																			in [Player and Weapons.dm:235]
																				 (X) [Player and Weapons.dm:235]
																				 [Player and Weapons.dm:235]
																					range [Player and Weapons.dm:235]
																						 (1) [Player and Weapons.dm:235]
																						 (src.Target) [Player and Weapons.dm:235]
																	 [Player and Weapons.dm:236]
																		missile [Player and Weapons.dm:236]
																			 [Player and Weapons.dm:236]
																				image [Player and Weapons.dm:236]
																					 [Player and Weapons.dm:236]
																						arglist [Player and Weapons.dm:236]
																							 [Player and Weapons.dm:236]
																								list [Player and Weapons.dm:236]
																									 ('Effects.dmi') [Player and Weapons.dm:236]
																									 [Player and Weapons.dm:236]
																										= [Player and Weapons.dm:236]
																											 ("icon_state") [Player and Weapons.dm:236]
																											 ("Flame 1") [Player and Weapons.dm:236]
																									 [Player and Weapons.dm:236]
																										= [Player and Weapons.dm:236]
																											 ("layer") [Player and Weapons.dm:236]
																											 (4) [Player and Weapons.dm:236]
																									 [Player and Weapons.dm:236]
																										= [Player and Weapons.dm:236]
																											 ("pixel_y") [Player and Weapons.dm:236]
																											 [Player and Weapons.dm:236]
																												rand [Player and Weapons.dm:236]
																													 (-10) [Player and Weapons.dm:236]
																													 (10) [Player and Weapons.dm:236]
																									 [Player and Weapons.dm:236]
																										= [Player and Weapons.dm:236]
																											 ("pixel_x") [Player and Weapons.dm:236]
																											 [Player and Weapons.dm:236]
																												rand [Player and Weapons.dm:236]
																													 (-10) [Player and Weapons.dm:236]
																													 (10) [Player and Weapons.dm:236]
																			 [Player and Weapons.dm:236]
																				get_step [Player and Weapons.dm:236]
																					 (src) [Player and Weapons.dm:236]
																					 (src.dir) [Player and Weapons.dm:236]
																			 (X) [Player and Weapons.dm:236]
																		var [Player and Weapons.dm:237]
																			obj [Player and Weapons.dm:237]
																				Effects [Player and Weapons.dm:237]
																					Flame1 [Player and Weapons.dm:237]
																						Y [Player and Weapons.dm:237]
																							 [Player and Weapons.dm:237]
																								= [Player and Weapons.dm:237]
																									new [Player and Weapons.dm:237]
																										 [Player and Weapons.dm:237]
																										 (src.loc) [Player and Weapons.dm:237]
																		= [Player and Weapons.dm:238]
																			 (Y.Owner) [Player and Weapons.dm:238]
																			 (src) [Player and Weapons.dm:238]
																		walk_towards [Player and Weapons.dm:239]
																			 (Y) [Player and Weapons.dm:239]
																			 (X) [Player and Weapons.dm:239]
													else [Player and Weapons.dm:241]
														if [Player and Weapons.dm:241]
															 [Player and Weapons.dm:241]
																&& [Player and Weapons.dm:241]
																	 [Player and Weapons.dm:241]
																		== [Player and Weapons.dm:241]
																			 (src.Wep.name) [Player and Weapons.dm:241]
																			 ("Partical Launcher") [Player and Weapons.dm:241]
																	 [Player and Weapons.dm:241]
																		> [Player and Weapons.dm:241]
																			 (src.Wep.Ammo) [Player and Weapons.dm:241]
																			 (0) [Player and Weapons.dm:241]
														 [Player and Weapons.dm:242]
															if [Player and Weapons.dm:242]
																 [Player and Weapons.dm:242]
																	! [Player and Weapons.dm:242]
																		 (src.WeaponMode) [Player and Weapons.dm:242]
															 [Player and Weapons.dm:243]
																flick [Player and Weapons.dm:243]
																	 [Player and Weapons.dm:243]
																		text ("\[] Fire") [Player and Weapons.dm:243]
																			 [Player and Weapons.dm:243]
																				 (src.icon_state) [Player and Weapons.dm:243]
																	 (src) [Player and Weapons.dm:243]
																.call (Combat) [Player and Weapons.dm:244]
																	 (12) [Player and Weapons.dm:244]
																	 (src.Wep) [Player and Weapons.dm:244]
																missile [Player and Weapons.dm:245]
																	 [Player and Weapons.dm:245]
																		image [Player and Weapons.dm:245]
																			 [Player and Weapons.dm:245]
																				arglist [Player and Weapons.dm:245]
																					 [Player and Weapons.dm:245]
																						list [Player and Weapons.dm:245]
																							 ('Effects.dmi') [Player and Weapons.dm:245]
																							 [Player and Weapons.dm:245]
																								= [Player and Weapons.dm:245]
																									 ("icon_state") [Player and Weapons.dm:245]
																									 ("Big Blast") [Player and Weapons.dm:245]
																							 [Player and Weapons.dm:245]
																								= [Player and Weapons.dm:245]
																									 ("layer") [Player and Weapons.dm:245]
																									 (4) [Player and Weapons.dm:245]
																	 (src) [Player and Weapons.dm:245]
																	 (src.Target) [Player and Weapons.dm:245]
																spawn [Player and Weapons.dm:246]
																	 [Player and Weapons.dm:246]
																		get_dist [Player and Weapons.dm:246]
																			 (src) [Player and Weapons.dm:246]
																			 (src.Target) [Player and Weapons.dm:246]
																 [Player and Weapons.dm:247]
																	+= [Player and Weapons.dm:247]
																		 (src.Target/:/overlays) [Player and Weapons.dm:247]
																		 [Player and Weapons.dm:247]
																			image [Player and Weapons.dm:247]
																				 [Player and Weapons.dm:247]
																					arglist [Player and Weapons.dm:247]
																						 [Player and Weapons.dm:247]
																							list [Player and Weapons.dm:247]
																								 ('Effects.dmi') [Player and Weapons.dm:247]
																								 [Player and Weapons.dm:247]
																									= [Player and Weapons.dm:247]
																										 ("icon_state") [Player and Weapons.dm:247]
																										 ("Flame 3") [Player and Weapons.dm:247]
																								 [Player and Weapons.dm:247]
																									= [Player and Weapons.dm:247]
																										 ("layer") [Player and Weapons.dm:247]
																										 (6) [Player and Weapons.dm:247]
																								 [Player and Weapons.dm:247]
																									= [Player and Weapons.dm:247]
																										 ("pixel_y") [Player and Weapons.dm:247]
																										 [Player and Weapons.dm:247]
																											rand [Player and Weapons.dm:247]
																												 (-15) [Player and Weapons.dm:247]
																												 (15) [Player and Weapons.dm:247]
																								 [Player and Weapons.dm:247]
																									= [Player and Weapons.dm:247]
																										 ("pixel_x") [Player and Weapons.dm:247]
																										 [Player and Weapons.dm:247]
																											rand [Player and Weapons.dm:247]
																												 (-15) [Player and Weapons.dm:247]
																												 (15) [Player and Weapons.dm:247]
																	.call (src.Target/:/Flaming) [Player and Weapons.dm:248]
																		 (25) [Player and Weapons.dm:248]
																		 (src.Target) [Player and Weapons.dm:248]
																_block [Player and Weapons.dm:249]
																	var [Player and Weapons.dm:249]
																		mob [Player and Weapons.dm:249]
																			Monsters [Player and Weapons.dm:249]
																				X [Player and Weapons.dm:249]
																	for [Player and Weapons.dm:249]
																		 [Player and Weapons.dm:249]
																			in [Player and Weapons.dm:249]
																				 (X) [Player and Weapons.dm:249]
																				 [Player and Weapons.dm:249]
																					range [Player and Weapons.dm:249]
																						 (2) [Player and Weapons.dm:249]
																						 (src.Target) [Player and Weapons.dm:249]
																	 [Player and Weapons.dm:250]
																		missile [Player and Weapons.dm:250]
																			 [Player and Weapons.dm:250]
																				image [Player and Weapons.dm:250]
																					 [Player and Weapons.dm:250]
																						arglist [Player and Weapons.dm:250]
																							 [Player and Weapons.dm:250]
																								list [Player and Weapons.dm:250]
																									 ('Effects.dmi') [Player and Weapons.dm:250]
																									 [Player and Weapons.dm:250]
																										= [Player and Weapons.dm:250]
																											 ("icon_state") [Player and Weapons.dm:250]
																											 ("Small Blast") [Player and Weapons.dm:250]
																									 [Player and Weapons.dm:250]
																										= [Player and Weapons.dm:250]
																											 ("layer") [Player and Weapons.dm:250]
																											 (4) [Player and Weapons.dm:250]
																									 [Player and Weapons.dm:250]
																										= [Player and Weapons.dm:250]
																											 ("pixel_y") [Player and Weapons.dm:250]
																											 [Player and Weapons.dm:250]
																												rand [Player and Weapons.dm:250]
																													 (-10) [Player and Weapons.dm:250]
																													 (10) [Player and Weapons.dm:250]
																									 [Player and Weapons.dm:250]
																										= [Player and Weapons.dm:250]
																											 ("pixel_x") [Player and Weapons.dm:250]
																											 [Player and Weapons.dm:250]
																												rand [Player and Weapons.dm:250]
																													 (-10) [Player and Weapons.dm:250]
																													 (10) [Player and Weapons.dm:250]
																			 (src.Target) [Player and Weapons.dm:250]
																			 (X) [Player and Weapons.dm:250]
																		.call (Damage) [Player and Weapons.dm:251]
																			 (src) [Player and Weapons.dm:251]
																			 (X) [Player and Weapons.dm:251]
																			 [Player and Weapons.dm:251]
																				rand [Player and Weapons.dm:251]
																					 (2) [Player and Weapons.dm:251]
																					 (4) [Player and Weapons.dm:251]
																			 ("Zap2") [Player and Weapons.dm:251]
																			 (0) [Player and Weapons.dm:251]
																		sleep [Player and Weapons.dm:252]
																			 (1) [Player and Weapons.dm:252]
															else [Player and Weapons.dm:253]
																if [Player and Weapons.dm:253]
																	 (src.WeaponMode) [Player and Weapons.dm:253]
																 [Player and Weapons.dm:254]
																	= [Player and Weapons.dm:254]
																		 (src.Wep.Grab) [Player and Weapons.dm:254]
																		 (0) [Player and Weapons.dm:254]
																	del [Player and Weapons.dm:255]
																		 (src.Wep) [Player and Weapons.dm:255]
														else [Player and Weapons.dm:257]
															if [Player and Weapons.dm:257]
																 [Player and Weapons.dm:257]
																	&& [Player and Weapons.dm:257]
																		 [Player and Weapons.dm:257]
																			== [Player and Weapons.dm:257]
																				 (src.Wep.name) [Player and Weapons.dm:257]
																				 ("Sniper Rifle") [Player and Weapons.dm:257]
																		 [Player and Weapons.dm:257]
																			> [Player and Weapons.dm:257]
																				 (src.Wep.Ammo) [Player and Weapons.dm:257]
																				 (0) [Player and Weapons.dm:257]
															 [Player and Weapons.dm:258]
																= [Player and Weapons.dm:258]
																	 (src.MAction) [Player and Weapons.dm:258]
																	 (0) [Player and Weapons.dm:258]
																if [Player and Weapons.dm:259]
																	 [Player and Weapons.dm:259]
																		! [Player and Weapons.dm:259]
																			 (src.WeaponMode) [Player and Weapons.dm:259]
																 [Player and Weapons.dm:260]
																	flick [Player and Weapons.dm:260]
																		 [Player and Weapons.dm:260]
																			text ("\[] Fire") [Player and Weapons.dm:260]
																				 [Player and Weapons.dm:260]
																					 (src.icon_state) [Player and Weapons.dm:260]
																		 (src) [Player and Weapons.dm:260]
																	spawn [Player and Weapons.dm:261]
																		 (15) [Player and Weapons.dm:261]
																	 [Player and Weapons.dm:262]
																		if [Player and Weapons.dm:262]
																			 [Player and Weapons.dm:262]
																				! [Player and Weapons.dm:262]
																					isnull [Player and Weapons.dm:262]
																						 (MTarget) [Player and Weapons.dm:262]
																		 [Player and Weapons.dm:263]
																			<< [Player and Weapons.dm:263]
																				 [Player and Weapons.dm:263]
																					view [Player and Weapons.dm:263]
																				 [Player and Weapons.dm:263]
																					sound [Player and Weapons.dm:263]
																						 ('sniper.wav') [Player and Weapons.dm:263]
																						 (0) [Player and Weapons.dm:263]
																			if [Player and Weapons.dm:264]
																				 [Player and Weapons.dm:264]
																					in [Player and Weapons.dm:264]
																						 [Player and Weapons.dm:264]
																							&& [Player and Weapons.dm:264]
																								 [Player and Weapons.dm:264]
																									ismob [Player and Weapons.dm:264]
																										 (MTarget) [Player and Weapons.dm:264]
																								 [Player and Weapons.dm:264]
																									prob [Player and Weapons.dm:264]
																										 (40) [Player and Weapons.dm:264]
																								 (MTarget.Size) [Player and Weapons.dm:264]
																						 [Player and Weapons.dm:264]
																							list [Player and Weapons.dm:264]
																								 ("Small") [Player and Weapons.dm:264]
																								 ("Normal") [Player and Weapons.dm:264]
																			 [Player and Weapons.dm:265]
																				.call (Damage) [Player and Weapons.dm:265]
																					 (src) [Player and Weapons.dm:265]
																					 (MTarget) [Player and Weapons.dm:265]
																					 (100) [Player and Weapons.dm:265]
																					 ("BBang") [Player and Weapons.dm:265]
																					 (100) [Player and Weapons.dm:265]
																					 (1) [Player and Weapons.dm:265]
																				_block [Player and Weapons.dm:266]
																					var [Player and Weapons.dm:266]
																						turf [Player and Weapons.dm:266]
																							Z [Player and Weapons.dm:266]
																					for [Player and Weapons.dm:266]
																						 [Player and Weapons.dm:266]
																							in [Player and Weapons.dm:266]
																								 (Z) [Player and Weapons.dm:266]
																								 [Player and Weapons.dm:266]
																									oview [Player and Weapons.dm:266]
																										 (1) [Player and Weapons.dm:266]
																										 (MTarget) [Player and Weapons.dm:266]
																					 [Player and Weapons.dm:266]
																						missile [Player and Weapons.dm:266]
																							 [Player and Weapons.dm:266]
																								image [Player and Weapons.dm:266]
																									 [Player and Weapons.dm:266]
																										arglist [Player and Weapons.dm:266]
																											 [Player and Weapons.dm:266]
																												list [Player and Weapons.dm:266]
																													 ('Effects.dmi') [Player and Weapons.dm:266]
																													 [Player and Weapons.dm:266]
																														= [Player and Weapons.dm:266]
																															 ("icon_state") [Player and Weapons.dm:266]
																															 ("Splatter") [Player and Weapons.dm:266]
																													 [Player and Weapons.dm:266]
																														= [Player and Weapons.dm:266]
																															 ("layer") [Player and Weapons.dm:266]
																															 (5) [Player and Weapons.dm:266]
																													 [Player and Weapons.dm:266]
																														= [Player and Weapons.dm:266]
																															 ("pixel_y") [Player and Weapons.dm:266]
																															 [Player and Weapons.dm:266]
																																rand [Player and Weapons.dm:266]
																																	 (-10) [Player and Weapons.dm:266]
																																	 (10) [Player and Weapons.dm:266]
																													 [Player and Weapons.dm:266]
																														= [Player and Weapons.dm:266]
																															 ("pixel_x") [Player and Weapons.dm:266]
																															 [Player and Weapons.dm:266]
																																rand [Player and Weapons.dm:266]
																																	 (-10) [Player and Weapons.dm:266]
																																	 (10) [Player and Weapons.dm:266]
																							 (MTarget) [Player and Weapons.dm:266]
																							 (Z) [Player and Weapons.dm:266]
																			else [Player and Weapons.dm:267]
																				.call (Damage) [Player and Weapons.dm:267]
																					 (src) [Player and Weapons.dm:267]
																					 (MTarget) [Player and Weapons.dm:267]
																					 [Player and Weapons.dm:267]
																						rand [Player and Weapons.dm:267]
																							 (10) [Player and Weapons.dm:267]
																							 (14) [Player and Weapons.dm:267]
																					 ("BBang") [Player and Weapons.dm:267]
																					 (55) [Player and Weapons.dm:267]
																		= [Player and Weapons.dm:268]
																			 (src.MAction) [Player and Weapons.dm:268]
																			 (1) [Player and Weapons.dm:268]
																else [Player and Weapons.dm:269]
																	if [Player and Weapons.dm:269]
																		 (src.WeaponMode) [Player and Weapons.dm:269]
																	 [Player and Weapons.dm:270]
																		flick [Player and Weapons.dm:270]
																			 [Player and Weapons.dm:270]
																				text ("\[] Fire 1") [Player and Weapons.dm:270]
																					 [Player and Weapons.dm:270]
																						 (src.icon_state) [Player and Weapons.dm:270]
																			 (src) [Player and Weapons.dm:270]
																		spawn [Player and Weapons.dm:271]
																			 (30) [Player and Weapons.dm:271]
																		 [Player and Weapons.dm:272]
																			if [Player and Weapons.dm:272]
																				 [Player and Weapons.dm:272]
																					! [Player and Weapons.dm:272]
																						isnull [Player and Weapons.dm:272]
																							 (MTarget) [Player and Weapons.dm:272]
																			 [Player and Weapons.dm:273]
																				<< [Player and Weapons.dm:273]
																					 [Player and Weapons.dm:273]
																						view [Player and Weapons.dm:273]
																					 [Player and Weapons.dm:273]
																						sound [Player and Weapons.dm:273]
																							 ('sniper.wav') [Player and Weapons.dm:273]
																							 (0) [Player and Weapons.dm:273]
																				if [Player and Weapons.dm:274]
																					 [Player and Weapons.dm:274]
																						in [Player and Weapons.dm:274]
																							 [Player and Weapons.dm:274]
																								&& [Player and Weapons.dm:274]
																									 [Player and Weapons.dm:274]
																										ismob [Player and Weapons.dm:274]
																											 (MTarget) [Player and Weapons.dm:274]
																									 [Player and Weapons.dm:274]
																										prob [Player and Weapons.dm:274]
																											 (65) [Player and Weapons.dm:274]
																									 (MTarget.Size) [Player and Weapons.dm:274]
																							 [Player and Weapons.dm:274]
																								list [Player and Weapons.dm:274]
																									 ("Small") [Player and Weapons.dm:274]
																									 ("Normal") [Player and Weapons.dm:274]
																				 [Player and Weapons.dm:275]
																					.call (Damage) [Player and Weapons.dm:275]
																						 (src) [Player and Weapons.dm:275]
																						 (MTarget) [Player and Weapons.dm:275]
																						 (100) [Player and Weapons.dm:275]
																						 ("BBang") [Player and Weapons.dm:275]
																						 (100) [Player and Weapons.dm:275]
																						 (1) [Player and Weapons.dm:275]
																					_block [Player and Weapons.dm:276]
																						var [Player and Weapons.dm:276]
																							turf [Player and Weapons.dm:276]
																								Z [Player and Weapons.dm:276]
																						for [Player and Weapons.dm:276]
																							 [Player and Weapons.dm:276]
																								in [Player and Weapons.dm:276]
																									 (Z) [Player and Weapons.dm:276]
																									 [Player and Weapons.dm:276]
																										oview [Player and Weapons.dm:276]
																											 (1) [Player and Weapons.dm:276]
																											 (MTarget) [Player and Weapons.dm:276]
																						 [Player and Weapons.dm:276]
																							missile [Player and Weapons.dm:276]
																								 [Player and Weapons.dm:276]
																									image [Player and Weapons.dm:276]
																										 [Player and Weapons.dm:276]
																											arglist [Player and Weapons.dm:276]
																												 [Player and Weapons.dm:276]
																													list [Player and Weapons.dm:276]
																														 ('Effects.dmi') [Player and Weapons.dm:276]
																														 [Player and Weapons.dm:276]
																															= [Player and Weapons.dm:276]
																																 ("icon_state") [Player and Weapons.dm:276]
																																 ("Splatter") [Player and Weapons.dm:276]
																														 [Player and Weapons.dm:276]
																															= [Player and Weapons.dm:276]
																																 ("layer") [Player and Weapons.dm:276]
																																 (5) [Player and Weapons.dm:276]
																														 [Player and Weapons.dm:276]
																															= [Player and Weapons.dm:276]
																																 ("pixel_y") [Player and Weapons.dm:276]
																																 [Player and Weapons.dm:276]
																																	rand [Player and Weapons.dm:276]
																																		 (-10) [Player and Weapons.dm:276]
																																		 (10) [Player and Weapons.dm:276]
																														 [Player and Weapons.dm:276]
																															= [Player and Weapons.dm:276]
																																 ("pixel_x") [Player and Weapons.dm:276]
																																 [Player and Weapons.dm:276]
																																	rand [Player and Weapons.dm:276]
																																		 (-10) [Player and Weapons.dm:276]
																																		 (10) [Player and Weapons.dm:276]
																								 (MTarget) [Player and Weapons.dm:276]
																								 (Z) [Player and Weapons.dm:276]
																				else [Player and Weapons.dm:277]
																					.call (Damage) [Player and Weapons.dm:277]
																						 (src) [Player and Weapons.dm:277]
																						 (MTarget) [Player and Weapons.dm:277]
																						 [Player and Weapons.dm:277]
																							rand [Player and Weapons.dm:277]
																								 (18) [Player and Weapons.dm:277]
																								 (22) [Player and Weapons.dm:277]
																						 ("BBang") [Player and Weapons.dm:277]
																						 (75) [Player and Weapons.dm:277]
																			= [Player and Weapons.dm:278]
																				 (src.MAction) [Player and Weapons.dm:278]
																				 (1) [Player and Weapons.dm:278]
																.call (Combat) [Player and Weapons.dm:279]
																	 (40) [Player and Weapons.dm:279]
																	 (src.Wep) [Player and Weapons.dm:279]
																	 (1) [Player and Weapons.dm:279]
																	 (5) [Player and Weapons.dm:279]
																return [Player and Weapons.dm:279]
			Combat [Player and Weapons.dm:281]
				var [Player and Weapons.dm:282]
					.arg [Player and Weapons.dm:282]
						Delay [Player and Weapons.dm:281]
						obj [Player and Weapons.dm:281]
							Items [Player and Weapons.dm:281]
								Weapons [Player and Weapons.dm:281]
									Gun [Player and Weapons.dm:281]
										 [Player and Weapons.dm:282]
											= [Player and Weapons.dm:281]
												 (null) [Player and Weapons.dm:281]
						Fired [Player and Weapons.dm:281]
							 [Player and Weapons.dm:282]
								= [Player and Weapons.dm:281]
									 (1) [Player and Weapons.dm:281]
						RDelay [Player and Weapons.dm:281]
							 [Player and Weapons.dm:282]
								= [Player and Weapons.dm:281]
									 (0) [Player and Weapons.dm:281]
				if [Player and Weapons.dm:282]
					 [Player and Weapons.dm:282]
						! [Player and Weapons.dm:282]
							isnull [Player and Weapons.dm:282]
								 (Gun) [Player and Weapons.dm:282]
				 [Player and Weapons.dm:283]
					= [Player and Weapons.dm:283]
						 (src.Action) [Player and Weapons.dm:283]
						 (0) [Player and Weapons.dm:283]
					if [Player and Weapons.dm:284]
						 [Player and Weapons.dm:284]
							!= [Player and Weapons.dm:284]
								 (Gun.Type) [Player and Weapons.dm:284]
								 ("Melee") [Player and Weapons.dm:284]
					 [Player and Weapons.dm:284]
						-= [Player and Weapons.dm:284]
							 (Gun.Ammo) [Player and Weapons.dm:284]
							 (Fired) [Player and Weapons.dm:284]
					if [Player and Weapons.dm:285]
						 [Player and Weapons.dm:285]
							<= [Player and Weapons.dm:285]
								 (Gun.Ammo) [Player and Weapons.dm:285]
								 (0) [Player and Weapons.dm:285]
					 [Player and Weapons.dm:286]
						+= [Player and Weapons.dm:286]
							 (src.overlays) [Player and Weapons.dm:286]
							 (/obj/Effects/Reload) [Player and Weapons.dm:286]
						spawn [Player and Weapons.dm:287]
							 [Player and Weapons.dm:287]
								+ [Player and Weapons.dm:287]
									 (Gun.Reload) [Player and Weapons.dm:287]
									 (RDelay) [Player and Weapons.dm:287]
						 [Player and Weapons.dm:288]
							if [Player and Weapons.dm:288]
								 [Player and Weapons.dm:288]
									! [Player and Weapons.dm:288]
										isnull [Player and Weapons.dm:288]
											 (Gun) [Player and Weapons.dm:288]
							 [Player and Weapons.dm:289]
								= [Player and Weapons.dm:289]
									 (Gun.Ammo) [Player and Weapons.dm:289]
									 (Gun.AmmoMax) [Player and Weapons.dm:289]
								-= [Player and Weapons.dm:290]
									 (src.overlays) [Player and Weapons.dm:290]
									 (/obj/Effects/Reload) [Player and Weapons.dm:290]
							= [Player and Weapons.dm:291]
								 (src.Action) [Player and Weapons.dm:291]
								 (1) [Player and Weapons.dm:291]
					else [Player and Weapons.dm:292]
						if [Player and Weapons.dm:292]
							 [Player and Weapons.dm:292]
								&& [Player and Weapons.dm:292]
									 (src.Firing) [Player and Weapons.dm:292]
									 [Player and Weapons.dm:292]
										> [Player and Weapons.dm:292]
											 (Gun.Ammo) [Player and Weapons.dm:292]
											 (0) [Player and Weapons.dm:292]
						 [Player and Weapons.dm:293]
							spawn [Player and Weapons.dm:293]
								 (Delay) [Player and Weapons.dm:293]
							 [Player and Weapons.dm:294]
								= [Player and Weapons.dm:294]
									 (src.Action) [Player and Weapons.dm:294]
									 (1) [Player and Weapons.dm:294]
								if [Player and Weapons.dm:295]
									 (src.Firing) [Player and Weapons.dm:295]
								 [Player and Weapons.dm:295]
									.call (src.Shooting) [Player and Weapons.dm:295]
		verb [Player and Weapons.dm:298]
			ScrollRight [Player and Weapons.dm:300]
				var [Player and Weapons.dm:301]
					.arg [Player and Weapons.dm:301]
				set [Player and Weapons.dm:301]
					= [Player and Weapons.dm:301]
						 (hidden) [Player and Weapons.dm:301]
						 (1) [Player and Weapons.dm:301]
				if [Player and Weapons.dm:302]
					 [Player and Weapons.dm:302]
						&& [Player and Weapons.dm:302]
							 [Player and Weapons.dm:302]
								! [Player and Weapons.dm:302]
									 (src.InvMode) [Player and Weapons.dm:302]
							 [Player and Weapons.dm:302]
								> [Player and Weapons.dm:302]
									 [Player and Weapons.dm:302]
										length [Player and Weapons.dm:302]
											 (src.Inventory) [Player and Weapons.dm:302]
									 (0) [Player and Weapons.dm:302]
							 (src.Action) [Player and Weapons.dm:302]
				 [Player and Weapons.dm:303]
					if [Player and Weapons.dm:303]
						 [Player and Weapons.dm:303]
							< [Player and Weapons.dm:303]
								 (src.Inv) [Player and Weapons.dm:303]
								 [Player and Weapons.dm:303]
									length [Player and Weapons.dm:303]
										 (src.Inventory) [Player and Weapons.dm:303]
					 [Player and Weapons.dm:303]
						.post++ (src.Inv) [Player and Weapons.dm:303]
					else [Player and Weapons.dm:304]
						= [Player and Weapons.dm:304]
							 (src.Inv) [Player and Weapons.dm:304]
							 (1) [Player and Weapons.dm:304]
				else [Player and Weapons.dm:305]
					if [Player and Weapons.dm:305]
						 [Player and Weapons.dm:305]
							&& [Player and Weapons.dm:305]
								 (src.InvMode) [Player and Weapons.dm:305]
								 [Player and Weapons.dm:305]
									> [Player and Weapons.dm:305]
										 [Player and Weapons.dm:305]
											length [Player and Weapons.dm:305]
												 (src.Inventory2) [Player and Weapons.dm:305]
										 (0) [Player and Weapons.dm:305]
								 (src.Action) [Player and Weapons.dm:305]
					 [Player and Weapons.dm:306]
						if [Player and Weapons.dm:306]
							 [Player and Weapons.dm:306]
								> [Player and Weapons.dm:306]
									 [Player and Weapons.dm:306]
										< [Player and Weapons.dm:306]
											 (src.Inv2) [Player and Weapons.dm:306]
											 [Player and Weapons.dm:306]
												length [Player and Weapons.dm:306]
													 (src.Inventory2) [Player and Weapons.dm:306]
									 (0) [Player and Weapons.dm:306]
						 [Player and Weapons.dm:306]
							.post++ (src.Inv2) [Player and Weapons.dm:306]
						else [Player and Weapons.dm:307]
							= [Player and Weapons.dm:307]
								 (src.Inv2) [Player and Weapons.dm:307]
								 (1) [Player and Weapons.dm:307]
						= [Player and Weapons.dm:308]
							 (src.Wep) [Player and Weapons.dm:308]
							 [Player and Weapons.dm:308]
								.index (src.Inventory2) [Player and Weapons.dm:308]
									 (src.Inv2) [Player and Weapons.dm:308]
						= [Player and Weapons.dm:309]
							 (src.icon_state) [Player and Weapons.dm:309]
							 [Player and Weapons.dm:309]
								text ("Hunter \[]") [Player and Weapons.dm:309]
									 [Player and Weapons.dm:309]
										 (src.Wep) [Player and Weapons.dm:309]
						= [Player and Weapons.dm:310]
							 (src.Firing) [Player and Weapons.dm:310]
							 (0) [Player and Weapons.dm:310]
						= [Player and Weapons.dm:311]
							 (src.WeaponMode) [Player and Weapons.dm:311]
							 (0) [Player and Weapons.dm:311]
				if [Player and Weapons.dm:312]
					 [Player and Weapons.dm:312]
						! [Player and Weapons.dm:312]
							isnull [Player and Weapons.dm:312]
								 (src.client) [Player and Weapons.dm:312]
				 [Player and Weapons.dm:312]
					_block [Player and Weapons.dm:312]
						var [Player and Weapons.dm:312]
							obj [Player and Weapons.dm:312]
								Hud [Player and Weapons.dm:312]
									Inv [Player and Weapons.dm:312]
										Y [Player and Weapons.dm:312]
						for [Player and Weapons.dm:312]
							 [Player and Weapons.dm:312]
								in [Player and Weapons.dm:312]
									 (Y) [Player and Weapons.dm:312]
									 (src.client.screen) [Player and Weapons.dm:312]
						 [Player and Weapons.dm:312]
							.call (Y.Updating) [Player and Weapons.dm:312]
			InvMode [Player and Weapons.dm:314]
				var [Player and Weapons.dm:315]
					.arg [Player and Weapons.dm:315]
				set [Player and Weapons.dm:315]
					= [Player and Weapons.dm:315]
						 (hidden) [Player and Weapons.dm:315]
						 (1) [Player and Weapons.dm:315]
				= [Player and Weapons.dm:316]
					 (src.InvMode) [Player and Weapons.dm:316]
					 [Player and Weapons.dm:316]
						! [Player and Weapons.dm:316]
							 (src.InvMode) [Player and Weapons.dm:316]
				_block [Player and Weapons.dm:317]
					var [Player and Weapons.dm:317]
						obj [Player and Weapons.dm:317]
							Hud [Player and Weapons.dm:317]
								Inv [Player and Weapons.dm:317]
									X [Player and Weapons.dm:317]
					for [Player and Weapons.dm:317]
						 [Player and Weapons.dm:317]
							in [Player and Weapons.dm:317]
								 (X) [Player and Weapons.dm:317]
								 (src.client.screen) [Player and Weapons.dm:317]
					 [Player and Weapons.dm:318]
						.call (X.Updating) [Player and Weapons.dm:318]
			Light [Player and Weapons.dm:320]
				var [Player and Weapons.dm:321]
					.arg [Player and Weapons.dm:321]
				set [Player and Weapons.dm:321]
					= [Player and Weapons.dm:321]
						 (hidden) [Player and Weapons.dm:321]
						 (1) [Player and Weapons.dm:321]
				= [Player and Weapons.dm:322]
					 (Lights) [Player and Weapons.dm:322]
					 [Player and Weapons.dm:322]
						! [Player and Weapons.dm:322]
							 (Lights) [Player and Weapons.dm:322]
				if [Player and Weapons.dm:323]
					 (Lights) [Player and Weapons.dm:323]
				 [Player and Weapons.dm:323]
					= [Player and Weapons.dm:323]
						 (luminosity) [Player and Weapons.dm:323]
						 (4) [Player and Weapons.dm:323]
				else [Player and Weapons.dm:324]
					= [Player and Weapons.dm:324]
						 (luminosity) [Player and Weapons.dm:324]
						 (0) [Player and Weapons.dm:324]
			Reload [Player and Weapons.dm:326]
				var [Player and Weapons.dm:327]
					.arg [Player and Weapons.dm:327]
				set [Player and Weapons.dm:327]
					= [Player and Weapons.dm:327]
						 (hidden) [Player and Weapons.dm:327]
						 (1) [Player and Weapons.dm:327]
				if [Player and Weapons.dm:328]
					 [Player and Weapons.dm:328]
						! [Player and Weapons.dm:328]
							isnull [Player and Weapons.dm:328]
								 (src.Wep) [Player and Weapons.dm:328]
				 [Player and Weapons.dm:329]
					= [Player and Weapons.dm:329]
						 (src.Action) [Player and Weapons.dm:329]
						 (0) [Player and Weapons.dm:329]
					+= [Player and Weapons.dm:330]
						 (src.overlays) [Player and Weapons.dm:330]
						 (/obj/Effects/Reload) [Player and Weapons.dm:330]
					spawn [Player and Weapons.dm:331]
						 (src.Wep/:/Reload) [Player and Weapons.dm:331]
					 [Player and Weapons.dm:332]
						if [Player and Weapons.dm:332]
							 [Player and Weapons.dm:332]
								! [Player and Weapons.dm:332]
									isnull [Player and Weapons.dm:332]
										 (src.Wep) [Player and Weapons.dm:332]
						 [Player and Weapons.dm:333]
							= [Player and Weapons.dm:333]
								 (src.Wep/:/Ammo) [Player and Weapons.dm:333]
								 (src.Wep/:/AmmoMax) [Player and Weapons.dm:333]
							-= [Player and Weapons.dm:334]
								 (src.overlays) [Player and Weapons.dm:334]
								 (/obj/Effects/Reload) [Player and Weapons.dm:334]
							= [Player and Weapons.dm:335]
								 (src.Action) [Player and Weapons.dm:335]
								 (1) [Player and Weapons.dm:335]
			AutoAim [Player and Weapons.dm:337]
				var [Player and Weapons.dm:338]
					.arg [Player and Weapons.dm:338]
				set [Player and Weapons.dm:338]
					= [Player and Weapons.dm:338]
						 (hidden) [Player and Weapons.dm:338]
						 (1) [Player and Weapons.dm:338]
				if [Player and Weapons.dm:339]
					 [Player and Weapons.dm:339]
						! [Player and Weapons.dm:339]
							 (AAAllowed) [Player and Weapons.dm:339]
				 [Player and Weapons.dm:339]
					return [Player and Weapons.dm:339]
				if [Player and Weapons.dm:340]
					 [Player and Weapons.dm:340]
						&& [Player and Weapons.dm:340]
							 [Player and Weapons.dm:340]
								! [Player and Weapons.dm:340]
									isnull [Player and Weapons.dm:340]
										 (src.Target) [Player and Weapons.dm:340]
							 [Player and Weapons.dm:340]
								|| [Player and Weapons.dm:340]
									 [Player and Weapons.dm:340]
										> [Player and Weapons.dm:340]
											 [Player and Weapons.dm:340]
												get_dist [Player and Weapons.dm:340]
													 (src) [Player and Weapons.dm:340]
													 (src.Target) [Player and Weapons.dm:340]
											 (6) [Player and Weapons.dm:340]
									 [Player and Weapons.dm:340]
										! [Player and Weapons.dm:340]
											locate [Player and Weapons.dm:340]
												 (/mob/Monsters) [Player and Weapons.dm:340]
												 (src.Target) [Player and Weapons.dm:340]
				 [Player and Weapons.dm:341]
					= [Player and Weapons.dm:341]
						 (src.Target) [Player and Weapons.dm:341]
						 (null) [Player and Weapons.dm:341]
					= [Player and Weapons.dm:342]
						 (src.Firing) [Player and Weapons.dm:342]
						 (0) [Player and Weapons.dm:342]
				if [Player and Weapons.dm:343]
					 [Player and Weapons.dm:343]
						isnull [Player and Weapons.dm:343]
							 (src.Target) [Player and Weapons.dm:343]
				 [Player and Weapons.dm:344]
					_block [Player and Weapons.dm:344]
						var [Player and Weapons.dm:344]
							mob [Player and Weapons.dm:344]
								Monsters [Player and Weapons.dm:344]
									X [Player and Weapons.dm:344]
						for [Player and Weapons.dm:344]
							 [Player and Weapons.dm:344]
								in [Player and Weapons.dm:344]
									 (X) [Player and Weapons.dm:344]
									 [Player and Weapons.dm:344]
										oview [Player and Weapons.dm:344]
						 [Player and Weapons.dm:345]
							if [Player and Weapons.dm:345]
								 [Player and Weapons.dm:345]
									isnull [Player and Weapons.dm:345]
										 (src.Target) [Player and Weapons.dm:345]
							 [Player and Weapons.dm:346]
								= [Player and Weapons.dm:346]
									 (src.Target) [Player and Weapons.dm:346]
									 (X.loc) [Player and Weapons.dm:346]
							else [Player and Weapons.dm:347]
								if [Player and Weapons.dm:347]
									 [Player and Weapons.dm:347]
										< [Player and Weapons.dm:347]
											 [Player and Weapons.dm:347]
												get_dist [Player and Weapons.dm:347]
													 (src) [Player and Weapons.dm:347]
													 (X) [Player and Weapons.dm:347]
											 [Player and Weapons.dm:347]
												get_dist [Player and Weapons.dm:347]
													 (src) [Player and Weapons.dm:347]
													 (src.Target) [Player and Weapons.dm:347]
								 [Player and Weapons.dm:348]
									if [Player and Weapons.dm:348]
										 [Player and Weapons.dm:348]
											prob [Player and Weapons.dm:348]
												 (src.Wep/:/Accuracy) [Player and Weapons.dm:348]
									 [Player and Weapons.dm:348]
										= [Player and Weapons.dm:348]
											 (src.Target) [Player and Weapons.dm:348]
											 (X.loc) [Player and Weapons.dm:348]
									else [Player and Weapons.dm:349]
										= [Player and Weapons.dm:349]
											 (src.Target) [Player and Weapons.dm:349]
											 [Player and Weapons.dm:349]
												pick [Player and Weapons.dm:349]
													 [Player and Weapons.dm:349]
														in [Player and Weapons.dm:349]
															 [Player and Weapons.dm:349]
																typesof [Player and Weapons.dm:349]
																	 (/turf) [Player and Weapons.dm:349]
															 [Player and Weapons.dm:349]
																oview [Player and Weapons.dm:349]
																	 (1) [Player and Weapons.dm:349]
																	 (X) [Player and Weapons.dm:349]
				if [Player and Weapons.dm:351]
					 [Player and Weapons.dm:351]
						! [Player and Weapons.dm:351]
							isnull [Player and Weapons.dm:351]
								 (src.Target) [Player and Weapons.dm:351]
				 [Player and Weapons.dm:352]
					= [Player and Weapons.dm:352]
						 (src.Firing) [Player and Weapons.dm:352]
						 (1) [Player and Weapons.dm:352]
					= [Player and Weapons.dm:353]
						 (src.dir) [Player and Weapons.dm:353]
						 [Player and Weapons.dm:353]
							get_dir [Player and Weapons.dm:353]
								 (src) [Player and Weapons.dm:353]
								 (src.Target) [Player and Weapons.dm:353]
					.call (src.Shooting) [Player and Weapons.dm:354]
			Drop [Player and Weapons.dm:356]
				var [Player and Weapons.dm:357]
					.arg [Player and Weapons.dm:357]
				set [Player and Weapons.dm:357]
					= [Player and Weapons.dm:357]
						 (hidden) [Player and Weapons.dm:357]
						 (1) [Player and Weapons.dm:357]
				var [Player and Weapons.dm:358]
					obj [Player and Weapons.dm:358]
						Items [Player and Weapons.dm:358]
							 [Player and Weapons.dm:358]
								= [Player and Weapons.dm:358]
									 (null) [Player and Weapons.dm:358]
				if [Player and Weapons.dm:359]
					 [Player and Weapons.dm:359]
						&& [Player and Weapons.dm:359]
							 [Player and Weapons.dm:359]
								! [Player and Weapons.dm:359]
									 (InvMode) [Player and Weapons.dm:359]
							 [Player and Weapons.dm:359]
								length [Player and Weapons.dm:359]
									 (Inventory) [Player and Weapons.dm:359]
							 (Action) [Player and Weapons.dm:359]
				 [Player and Weapons.dm:360]
					= [Player and Weapons.dm:360]
						 (Items) [Player and Weapons.dm:360]
						 [Player and Weapons.dm:360]
							.index (Inventory) [Player and Weapons.dm:360]
								 (Inv) [Player and Weapons.dm:360]
					= [Player and Weapons.dm:361]
						 (Inv) [Player and Weapons.dm:361]
						 (1) [Player and Weapons.dm:361]
					if [Player and Weapons.dm:362]
						 [Player and Weapons.dm:362]
							! [Player and Weapons.dm:362]
								isnull [Player and Weapons.dm:362]
									 (Items) [Player and Weapons.dm:362]
					 [Player and Weapons.dm:362]
						.call (Items.Move) [Player and Weapons.dm:362]
							 (src.loc) [Player and Weapons.dm:362]
				else [Player and Weapons.dm:363]
					if [Player and Weapons.dm:363]
						 [Player and Weapons.dm:363]
							&& [Player and Weapons.dm:363]
								 (InvMode) [Player and Weapons.dm:363]
								 [Player and Weapons.dm:363]
									length [Player and Weapons.dm:363]
										 (Inventory2) [Player and Weapons.dm:363]
								 (Action) [Player and Weapons.dm:363]
					 [Player and Weapons.dm:364]
						= [Player and Weapons.dm:364]
							 (Items) [Player and Weapons.dm:364]
							 [Player and Weapons.dm:364]
								.index (Inventory2) [Player and Weapons.dm:364]
									 (Inv2) [Player and Weapons.dm:364]
						= [Player and Weapons.dm:365]
							 (Inv2) [Player and Weapons.dm:365]
							 (1) [Player and Weapons.dm:365]
						if [Player and Weapons.dm:366]
							 [Player and Weapons.dm:366]
								! [Player and Weapons.dm:366]
									isnull [Player and Weapons.dm:366]
										 (Items) [Player and Weapons.dm:366]
						 [Player and Weapons.dm:366]
							.call (Items.Move) [Player and Weapons.dm:366]
								 (src.loc) [Player and Weapons.dm:366]
			Use [Player and Weapons.dm:368]
				var [Player and Weapons.dm:368]
					.arg [Player and Weapons.dm:368]
				if [Player and Weapons.dm:368]
					 [Player and Weapons.dm:368]
						istype [Player and Weapons.dm:368]
							 (src) [Player and Weapons.dm:368]
							 (/mob/Player) [Player and Weapons.dm:368]
				 [Player and Weapons.dm:369]
					set [Player and Weapons.dm:369]
						= [Player and Weapons.dm:369]
							 (hidden) [Player and Weapons.dm:369]
							 (1) [Player and Weapons.dm:369]
					if [Player and Weapons.dm:370]
						 [Player and Weapons.dm:370]
							&& [Player and Weapons.dm:370]
								 (src.Action) [Player and Weapons.dm:370]
								 [Player and Weapons.dm:370]
									! [Player and Weapons.dm:370]
										 (src.InvMode) [Player and Weapons.dm:370]
								 [Player and Weapons.dm:370]
									> [Player and Weapons.dm:370]
										 [Player and Weapons.dm:370]
											length [Player and Weapons.dm:370]
												 (src.Inventory) [Player and Weapons.dm:370]
										 (0) [Player and Weapons.dm:370]
								 [Player and Weapons.dm:370]
									<= [Player and Weapons.dm:370]
										 [Player and Weapons.dm:370]
											get_dist [Player and Weapons.dm:370]
												 (usr) [Player and Weapons.dm:370]
												 (src) [Player and Weapons.dm:370]
										 (1) [Player and Weapons.dm:370]
					 [Player and Weapons.dm:371]
						var [Player and Weapons.dm:371]
							turf [Player and Weapons.dm:371]
								I [Player and Weapons.dm:371]
									 [Player and Weapons.dm:371]
										= [Player and Weapons.dm:371]
											get_step [Player and Weapons.dm:371]
												 (src) [Player and Weapons.dm:371]
												 (src.dir) [Player and Weapons.dm:371]
						var [Player and Weapons.dm:372]
							atom [Player and Weapons.dm:372]
								movable [Player and Weapons.dm:372]
									I2 [Player and Weapons.dm:372]
										 [Player and Weapons.dm:372]
											= [Player and Weapons.dm:372]
												locate [Player and Weapons.dm:372]
													 (/atom/movable) [Player and Weapons.dm:372]
													 (I) [Player and Weapons.dm:372]
						var [Player and Weapons.dm:373]
							obj [Player and Weapons.dm:373]
								Items [Player and Weapons.dm:373]
									I3 [Player and Weapons.dm:373]
										 [Player and Weapons.dm:373]
											= [Player and Weapons.dm:373]
												.index (src.Inventory) [Player and Weapons.dm:373]
													 (src.Inv) [Player and Weapons.dm:373]
						= [Player and Weapons.dm:375]
							 (src.Action) [Player and Weapons.dm:375]
							 (0) [Player and Weapons.dm:375]
						if [Player and Weapons.dm:377]
							 [Player and Weapons.dm:377]
								&& [Player and Weapons.dm:377]
									 [Player and Weapons.dm:377]
										== [Player and Weapons.dm:377]
											 (I3.name) [Player and Weapons.dm:377]
											 ("Trip Bomb") [Player and Weapons.dm:377]
									 [Player and Weapons.dm:377]
										== [Player and Weapons.dm:377]
											 (I.suffix) [Player and Weapons.dm:377]
											 ("Wall") [Player and Weapons.dm:377]
						 [Player and Weapons.dm:378]
							var [Player and Weapons.dm:378]
								obj [Player and Weapons.dm:378]
									Effects [Player and Weapons.dm:378]
										ArmedTripBomb [Player and Weapons.dm:378]
											Z [Player and Weapons.dm:378]
												 [Player and Weapons.dm:378]
													= [Player and Weapons.dm:378]
														new [Player and Weapons.dm:378]
															 [Player and Weapons.dm:378]
															 (I) [Player and Weapons.dm:378]
							= [Player and Weapons.dm:379]
								 (Z.Owner) [Player and Weapons.dm:379]
								 (src) [Player and Weapons.dm:379]
							= [Player and Weapons.dm:380]
								 (Z.dir) [Player and Weapons.dm:380]
								 [Player and Weapons.dm:380]
									get_dir [Player and Weapons.dm:380]
										 (I) [Player and Weapons.dm:380]
										 (Z.Owner) [Player and Weapons.dm:380]
							del [Player and Weapons.dm:381]
								 (I3) [Player and Weapons.dm:381]
						else [Player and Weapons.dm:383]
							if [Player and Weapons.dm:383]
								 [Player and Weapons.dm:383]
									== [Player and Weapons.dm:383]
										 (I3.name) [Player and Weapons.dm:383]
										 ("Hypo Spray") [Player and Weapons.dm:383]
							 [Player and Weapons.dm:384]
								if [Player and Weapons.dm:384]
									 [Player and Weapons.dm:384]
										&& [Player and Weapons.dm:384]
											 [Player and Weapons.dm:384]
												! [Player and Weapons.dm:384]
													isnull [Player and Weapons.dm:384]
														 (I2) [Player and Weapons.dm:384]
											 [Player and Weapons.dm:384]
												istype [Player and Weapons.dm:384]
													 (I2) [Player and Weapons.dm:384]
													 (/mob/Player) [Player and Weapons.dm:384]
								 [Player and Weapons.dm:385]
									+= [Player and Weapons.dm:385]
										 (I2.Health) [Player and Weapons.dm:385]
										 (25) [Player and Weapons.dm:385]
									.call (HPARM) [Player and Weapons.dm:385]
										 (I2) [Player and Weapons.dm:385]
										 (I2.Armor) [Player and Weapons.dm:385]
										 (I2.Health) [Player and Weapons.dm:385]
								else [Player and Weapons.dm:386]
									+= [Player and Weapons.dm:387]
										 (src.Health) [Player and Weapons.dm:387]
										 (25) [Player and Weapons.dm:387]
									.call (HPARM) [Player and Weapons.dm:387]
										 (src) [Player and Weapons.dm:387]
										 (src.Armor) [Player and Weapons.dm:387]
										 (src.Health) [Player and Weapons.dm:387]
								del [Player and Weapons.dm:388]
									 (I3) [Player and Weapons.dm:388]
							else [Player and Weapons.dm:390]
								if [Player and Weapons.dm:390]
									 [Player and Weapons.dm:390]
										== [Player and Weapons.dm:390]
											 (I3.name) [Player and Weapons.dm:390]
											 ("Turbo Spray") [Player and Weapons.dm:390]
								 [Player and Weapons.dm:391]
									if [Player and Weapons.dm:391]
										 [Player and Weapons.dm:391]
											&& [Player and Weapons.dm:391]
												 [Player and Weapons.dm:391]
													! [Player and Weapons.dm:391]
														isnull [Player and Weapons.dm:391]
															 (I2) [Player and Weapons.dm:391]
												 [Player and Weapons.dm:391]
													istype [Player and Weapons.dm:391]
														 (I2) [Player and Weapons.dm:391]
														 (/mob/Player) [Player and Weapons.dm:391]
									 [Player and Weapons.dm:392]
										+= [Player and Weapons.dm:392]
											 (I2.Health) [Player and Weapons.dm:392]
											 (45) [Player and Weapons.dm:392]
										.call (HPARM) [Player and Weapons.dm:392]
											 (I2) [Player and Weapons.dm:392]
											 (I2.Armor) [Player and Weapons.dm:392]
											 (I2.Health) [Player and Weapons.dm:392]
									else [Player and Weapons.dm:393]
										+= [Player and Weapons.dm:394]
											 (src.Health) [Player and Weapons.dm:394]
											 (45) [Player and Weapons.dm:394]
										.call (HPARM) [Player and Weapons.dm:394]
											 (src) [Player and Weapons.dm:394]
											 (src.Armor) [Player and Weapons.dm:394]
											 (src.Health) [Player and Weapons.dm:394]
									del [Player and Weapons.dm:395]
										 (I3) [Player and Weapons.dm:395]
								else [Player and Weapons.dm:397]
									if [Player and Weapons.dm:397]
										 [Player and Weapons.dm:397]
											== [Player and Weapons.dm:397]
												 (I3.name) [Player and Weapons.dm:397]
												 ("Armor Plating") [Player and Weapons.dm:397]
									 [Player and Weapons.dm:398]
										if [Player and Weapons.dm:398]
											 [Player and Weapons.dm:398]
												&& [Player and Weapons.dm:398]
													 [Player and Weapons.dm:398]
														! [Player and Weapons.dm:398]
															isnull [Player and Weapons.dm:398]
																 (I2) [Player and Weapons.dm:398]
													 [Player and Weapons.dm:398]
														istype [Player and Weapons.dm:398]
															 (I2) [Player and Weapons.dm:398]
															 (/mob/Player) [Player and Weapons.dm:398]
										 [Player and Weapons.dm:399]
											+= [Player and Weapons.dm:399]
												 (I2.Armor) [Player and Weapons.dm:399]
												 (20) [Player and Weapons.dm:399]
											.call (HPARM) [Player and Weapons.dm:399]
												 (I2) [Player and Weapons.dm:399]
												 (I2.Armor) [Player and Weapons.dm:399]
												 (I2.Health) [Player and Weapons.dm:399]
										else [Player and Weapons.dm:400]
											+= [Player and Weapons.dm:401]
												 (src.Armor) [Player and Weapons.dm:401]
												 (20) [Player and Weapons.dm:401]
											.call (HPARM) [Player and Weapons.dm:401]
												 (src) [Player and Weapons.dm:401]
												 (src.Armor) [Player and Weapons.dm:401]
												 (src.Health) [Player and Weapons.dm:401]
										del [Player and Weapons.dm:402]
											 (I3) [Player and Weapons.dm:402]
									else [Player and Weapons.dm:404]
										if [Player and Weapons.dm:404]
											 [Player and Weapons.dm:404]
												== [Player and Weapons.dm:404]
													 (I3.name) [Player and Weapons.dm:404]
													 ("Elite Armor Plating") [Player and Weapons.dm:404]
										 [Player and Weapons.dm:405]
											if [Player and Weapons.dm:405]
												 [Player and Weapons.dm:405]
													&& [Player and Weapons.dm:405]
														 [Player and Weapons.dm:405]
															! [Player and Weapons.dm:405]
																isnull [Player and Weapons.dm:405]
																	 (I2) [Player and Weapons.dm:405]
														 [Player and Weapons.dm:405]
															istype [Player and Weapons.dm:405]
																 (I2) [Player and Weapons.dm:405]
																 (/mob/Player) [Player and Weapons.dm:405]
											 [Player and Weapons.dm:406]
												+= [Player and Weapons.dm:406]
													 (I2.Armor) [Player and Weapons.dm:406]
													 (40) [Player and Weapons.dm:406]
												.call (HPARM) [Player and Weapons.dm:406]
													 (I2) [Player and Weapons.dm:406]
													 (I2.Armor) [Player and Weapons.dm:406]
													 (I2.Health) [Player and Weapons.dm:406]
												if [Player and Weapons.dm:407]
													 [Player and Weapons.dm:407]
														< [Player and Weapons.dm:407]
															 (I2.ArmorMax) [Player and Weapons.dm:407]
															 (40) [Player and Weapons.dm:407]
												 [Player and Weapons.dm:407]
													= [Player and Weapons.dm:407]
														 (I2.ArmorMax) [Player and Weapons.dm:407]
														 (40) [Player and Weapons.dm:407]
											else [Player and Weapons.dm:408]
												if [Player and Weapons.dm:409]
													 [Player and Weapons.dm:409]
														< [Player and Weapons.dm:409]
															 (src.ArmorMax) [Player and Weapons.dm:409]
															 (40) [Player and Weapons.dm:409]
												 [Player and Weapons.dm:409]
													= [Player and Weapons.dm:409]
														 (src.ArmorMax) [Player and Weapons.dm:409]
														 (40) [Player and Weapons.dm:409]
												+= [Player and Weapons.dm:410]
													 (src.Armor) [Player and Weapons.dm:410]
													 (40) [Player and Weapons.dm:410]
												.call (HPARM) [Player and Weapons.dm:410]
													 (src) [Player and Weapons.dm:410]
													 (src.Armor) [Player and Weapons.dm:410]
													 (src.Health) [Player and Weapons.dm:410]
											del [Player and Weapons.dm:411]
												 (I3) [Player and Weapons.dm:411]
										else [Player and Weapons.dm:413]
											if [Player and Weapons.dm:413]
												 [Player and Weapons.dm:413]
													== [Player and Weapons.dm:413]
														 (I3.name) [Player and Weapons.dm:413]
														 ("P-C-D") [Player and Weapons.dm:413]
											 [Player and Weapons.dm:414]
												= [Player and Weapons.dm:414]
													 (src.MAction) [Player and Weapons.dm:414]
													 (0) [Player and Weapons.dm:414]
												+= [Player and Weapons.dm:414]
													 (src.underlays) [Player and Weapons.dm:414]
													 [Player and Weapons.dm:414]
														image [Player and Weapons.dm:414]
															 [Player and Weapons.dm:414]
																arglist [Player and Weapons.dm:414]
																	 [Player and Weapons.dm:414]
																		list [Player and Weapons.dm:414]
																			 ('Effects.dmi') [Player and Weapons.dm:414]
																			 [Player and Weapons.dm:414]
																				= [Player and Weapons.dm:414]
																					 ("icon_state") [Player and Weapons.dm:414]
																					 ("Cloak") [Player and Weapons.dm:414]
																			 [Player and Weapons.dm:414]
																				= [Player and Weapons.dm:414]
																					 ("layer") [Player and Weapons.dm:414]
																					 (7) [Player and Weapons.dm:414]
												spawn [Player and Weapons.dm:415]
													 (30) [Player and Weapons.dm:415]
												 [Player and Weapons.dm:416]
													if [Player and Weapons.dm:416]
														 [Player and Weapons.dm:416]
															! [Player and Weapons.dm:416]
																isnull [Player and Weapons.dm:416]
																	 (src) [Player and Weapons.dm:416]
													 [Player and Weapons.dm:416]
														-= [Player and Weapons.dm:416]
															 (usr.underlays) [Player and Weapons.dm:416]
															 [Player and Weapons.dm:416]
																.index (src.underlays) [Player and Weapons.dm:416]
																	 (1) [Player and Weapons.dm:416]
													= [Player and Weapons.dm:416]
														 (src.MAction) [Player and Weapons.dm:416]
														 (1) [Player and Weapons.dm:416]
													= [Player and Weapons.dm:417]
														 (src.invisibility) [Player and Weapons.dm:417]
														 (1) [Player and Weapons.dm:417]
													del [Player and Weapons.dm:417]
														 (I3) [Player and Weapons.dm:417]
													spawn [Player and Weapons.dm:418]
														 (300) [Player and Weapons.dm:418]
													 [Player and Weapons.dm:418]
														= [Player and Weapons.dm:418]
															 (src.invisibility) [Player and Weapons.dm:418]
															 (0) [Player and Weapons.dm:418]
						= [Player and Weapons.dm:419]
							 (src.Action) [Player and Weapons.dm:419]
							 (1) [Player and Weapons.dm:419]
			WeaponMode [Player and Weapons.dm:421]
				var [Player and Weapons.dm:422]
					.arg [Player and Weapons.dm:422]
				set [Player and Weapons.dm:422]
					= [Player and Weapons.dm:422]
						 (hidden) [Player and Weapons.dm:422]
						 (1) [Player and Weapons.dm:422]
				= [Player and Weapons.dm:423]
					 (src.WeaponMode) [Player and Weapons.dm:423]
					 [Player and Weapons.dm:423]
						! [Player and Weapons.dm:423]
							 (src.WeaponMode) [Player and Weapons.dm:423]
				<< [Player and Weapons.dm:424]
					 (src) [Player and Weapons.dm:424]
					 [Player and Weapons.dm:424]
						text ("You turned your weapon's secondary function <b>\[]</b>.") [Player and Weapons.dm:424]
							 [Player and Weapons.dm:424]
								? [Player and Weapons.dm:424]
									 (WeaponMode) [Player and Weapons.dm:424]
									 ("on") [Player and Weapons.dm:424]
									 ("off") [Player and Weapons.dm:424]
	Shopkeeper [Player and Weapons.dm:477]
		= [Player and Weapons.dm:478]
			 (icon) [Player and Weapons.dm:478]
			 ('Mapping.dmi') [Player and Weapons.dm:478]
		= [Player and Weapons.dm:479]
			 (icon_state) [Player and Weapons.dm:479]
			 ("Shopkeeper") [Player and Weapons.dm:479]
		= [Player and Weapons.dm:480]
			 (mouse_over_pointer) [Player and Weapons.dm:480]
			 ("Shop") [Player and Weapons.dm:480]
		var [Player and Weapons.dm:481]
			Greeting [Player and Weapons.dm:481]
				 [Player and Weapons.dm:481]
					= [Player and Weapons.dm:481]
						 ("") [Player and Weapons.dm:481]
		var [Player and Weapons.dm:482]
			Sale [Player and Weapons.dm:482]
				 [Player and Weapons.dm:482]
					= [Player and Weapons.dm:482]
						 ("") [Player and Weapons.dm:482]
		var [Player and Weapons.dm:483]
			Buy [Player and Weapons.dm:483]
				 [Player and Weapons.dm:483]
					= [Player and Weapons.dm:483]
						 ("") [Player and Weapons.dm:483]
		var [Player and Weapons.dm:484]
			Add [Player and Weapons.dm:484]
				 [Player and Weapons.dm:484]
					= [Player and Weapons.dm:484]
						 (0) [Player and Weapons.dm:484]
		var [Player and Weapons.dm:485]
			list [Player and Weapons.dm:485]
				Selection [Player and Weapons.dm:485]
					 [Player and Weapons.dm:485]
						= [Player and Weapons.dm:485]
							list [Player and Weapons.dm:485]
		var [Player and Weapons.dm:486]
			wStyle [Player and Weapons.dm:486]
				 [Player and Weapons.dm:486]
					= [Player and Weapons.dm:486]
						 ("window=shopkeeper&can_close=0&can_minimize=0") [Player and Weapons.dm:486]
		New [Player and Weapons.dm:487]
			var [Player and Weapons.dm:488]
				.arg [Player and Weapons.dm:488]
			.call (..) [Player and Weapons.dm:488]
			if [Player and Weapons.dm:489]
				 [Player and Weapons.dm:489]
					! [Player and Weapons.dm:489]
						length [Player and Weapons.dm:489]
							 (Selection) [Player and Weapons.dm:489]
			 [Player and Weapons.dm:489]
				_block [Player and Weapons.dm:489]
					var [Player and Weapons.dm:489]
						i [Player and Weapons.dm:489]
					for [Player and Weapons.dm:489]
						 [Player and Weapons.dm:489]
							in [Player and Weapons.dm:489]
								 (i) [Player and Weapons.dm:489]
								 [Player and Weapons.dm:489]
									- [Player and Weapons.dm:489]
										 [Player and Weapons.dm:489]
											typesof [Player and Weapons.dm:489]
												 (/obj/Items) [Player and Weapons.dm:489]
										 (/obj/Items) [Player and Weapons.dm:489]
					 [Player and Weapons.dm:490]
						if [Player and Weapons.dm:490]
							 [Player and Weapons.dm:490]
								! [Player and Weapons.dm:490]
									 [Player and Weapons.dm:490]
										in [Player and Weapons.dm:490]
											 (i) [Player and Weapons.dm:490]
											 (no) [Player and Weapons.dm:490]
						 [Player and Weapons.dm:490]
							+= [Player and Weapons.dm:490]
								 (Selection) [Player and Weapons.dm:490]
								 [Player and Weapons.dm:490]
									new [Player and Weapons.dm:490]
										 (i) [Player and Weapons.dm:490]
		Click [Player and Weapons.dm:492]
			var [Player and Weapons.dm:492]
				.arg [Player and Weapons.dm:492]
			if [Player and Weapons.dm:492]
				 [Player and Weapons.dm:492]
					&& [Player and Weapons.dm:492]
						 [Player and Weapons.dm:492]
							istype [Player and Weapons.dm:492]
								 (usr) [Player and Weapons.dm:492]
								 (/mob/Player) [Player and Weapons.dm:492]
						 [Player and Weapons.dm:492]
							<= [Player and Weapons.dm:492]
								 [Player and Weapons.dm:492]
									get_dist [Player and Weapons.dm:492]
										 (src) [Player and Weapons.dm:492]
										 (usr) [Player and Weapons.dm:492]
								 (1) [Player and Weapons.dm:492]
			 [Player and Weapons.dm:493]
				<< [Player and Weapons.dm:493]
					 (usr) [Player and Weapons.dm:493]
					 [Player and Weapons.dm:493]
						browse [Player and Weapons.dm:493]
							 [Player and Weapons.dm:505]
								text ("\n<HTML>\n<HEAD><TITLE>\[] Credits</TITLE></HEAD>\n\[]\n<BODY BGCOLOR=black TEXT=white>\n<B>\[]: </B>\[]<p>\n<CENTER>\n<A HREF=?\\ref\[]&buy=true> Buy Items </A><BR>\n<A HREF=?\\ref\[]&sell=true> Sell Items </A><BR>\n<HR>\n<A HREF=?\\ref\[]&leave=true> Leave </A><BR>\n</CENTER>\n") [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (usr/:/Credits) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (include) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (src.name) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (src.Greeting) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (src) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (src) [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (src) [Player and Weapons.dm:505]
							 [Player and Weapons.dm:505]
								text ("\[]") [Player and Weapons.dm:505]
									 [Player and Weapons.dm:505]
										 (wStyle) [Player and Weapons.dm:505]
		Topic [Player and Weapons.dm:507]
			var [Player and Weapons.dm:508]
				.arg [Player and Weapons.dm:508]
					h [Player and Weapons.dm:507]
					list [Player and Weapons.dm:507]
						href [Player and Weapons.dm:508]
			if [Player and Weapons.dm:508]
				 [Player and Weapons.dm:508]
					.index (href) [Player and Weapons.dm:508]
						 ("buy") [Player and Weapons.dm:508]
			 [Player and Weapons.dm:508]
				.call (buy) [Player and Weapons.dm:508]
					 (usr) [Player and Weapons.dm:508]
			else [Player and Weapons.dm:509]
				if [Player and Weapons.dm:509]
					 [Player and Weapons.dm:509]
						.index (href) [Player and Weapons.dm:509]
							 ("sell") [Player and Weapons.dm:509]
				 [Player and Weapons.dm:509]
					.call (sell) [Player and Weapons.dm:509]
						 (usr) [Player and Weapons.dm:509]
				else [Player and Weapons.dm:510]
					if [Player and Weapons.dm:510]
						 [Player and Weapons.dm:510]
							.index (href) [Player and Weapons.dm:510]
								 ("leave") [Player and Weapons.dm:510]
					 [Player and Weapons.dm:510]
						<< [Player and Weapons.dm:510]
							 (usr) [Player and Weapons.dm:510]
							 [Player and Weapons.dm:510]
								browse [Player and Weapons.dm:510]
									 (null) [Player and Weapons.dm:510]
									 [Player and Weapons.dm:510]
										text ("\[]") [Player and Weapons.dm:510]
											 [Player and Weapons.dm:510]
												 (wStyle) [Player and Weapons.dm:510]
					else [Player and Weapons.dm:511]
						if [Player and Weapons.dm:511]
							 [Player and Weapons.dm:511]
								&& [Player and Weapons.dm:511]
									 [Player and Weapons.dm:511]
										! [Player and Weapons.dm:511]
											.index (href) [Player and Weapons.dm:511]
												 ("buy1") [Player and Weapons.dm:511]
									 [Player and Weapons.dm:511]
										! [Player and Weapons.dm:511]
											.index (href) [Player and Weapons.dm:511]
												 ("sell1") [Player and Weapons.dm:511]
						 [Player and Weapons.dm:511]
							.call (src.Click) [Player and Weapons.dm:511]
								 (usr) [Player and Weapons.dm:511]
			var [Player and Weapons.dm:513]
				mob [Player and Weapons.dm:513]
					Player [Player and Weapons.dm:513]
						P [Player and Weapons.dm:513]
							 [Player and Weapons.dm:513]
								= [Player and Weapons.dm:513]
									 (usr) [Player and Weapons.dm:513]
			if [Player and Weapons.dm:515]
				 [Player and Weapons.dm:515]
					.index (href) [Player and Weapons.dm:515]
						 ("buy1") [Player and Weapons.dm:515]
			 [Player and Weapons.dm:515]
				if [Player and Weapons.dm:515]
					 [Player and Weapons.dm:515]
						|| [Player and Weapons.dm:515]
							 [Player and Weapons.dm:515]
								isnull [Player and Weapons.dm:515]
									 (src) [Player and Weapons.dm:515]
							 [Player and Weapons.dm:515]
								<= [Player and Weapons.dm:515]
									 [Player and Weapons.dm:515]
										get_dist [Player and Weapons.dm:515]
											 (src) [Player and Weapons.dm:515]
											 (usr) [Player and Weapons.dm:515]
									 (1) [Player and Weapons.dm:515]
				 [Player and Weapons.dm:516]
					var [Player and Weapons.dm:516]
						obj [Player and Weapons.dm:516]
							Items [Player and Weapons.dm:516]
								i [Player and Weapons.dm:516]
									 [Player and Weapons.dm:516]
										= [Player and Weapons.dm:516]
											.index (Selection) [Player and Weapons.dm:516]
												 [Player and Weapons.dm:516]
													text2num [Player and Weapons.dm:516]
														 [Player and Weapons.dm:516]
															.index (href) [Player and Weapons.dm:516]
																 ("buy1") [Player and Weapons.dm:516]
					var [Player and Weapons.dm:517]
						obj [Player and Weapons.dm:517]
							Items [Player and Weapons.dm:517]
								o [Player and Weapons.dm:517]
									 [Player and Weapons.dm:517]
										= [Player and Weapons.dm:517]
											new [Player and Weapons.dm:517]
												 (i.type) [Player and Weapons.dm:517]
					if [Player and Weapons.dm:518]
						 [Player and Weapons.dm:518]
							> [Player and Weapons.dm:518]
								 [Player and Weapons.dm:518]
									+ [Player and Weapons.dm:518]
										 (o.Value) [Player and Weapons.dm:518]
										 (Add) [Player and Weapons.dm:518]
								 (P.Credits) [Player and Weapons.dm:518]
					 [Player and Weapons.dm:519]
						<< [Player and Weapons.dm:519]
							 (usr) [Player and Weapons.dm:519]
							 ("<font color = red>Not enought credits.") [Player and Weapons.dm:519]
						del [Player and Weapons.dm:519]
							 (o) [Player and Weapons.dm:519]
					else [Player and Weapons.dm:520]
						-= [Player and Weapons.dm:521]
							 (P.Credits) [Player and Weapons.dm:521]
							 [Player and Weapons.dm:521]
								+ [Player and Weapons.dm:521]
									 (i.Value) [Player and Weapons.dm:521]
									 (Add) [Player and Weapons.dm:521]
						.call (o.Move) [Player and Weapons.dm:522]
							 (P) [Player and Weapons.dm:522]
						<< [Player and Weapons.dm:523]
							 (usr) [Player and Weapons.dm:523]
							 [Player and Weapons.dm:523]
								text ("<font color = green>Purchased \[].") [Player and Weapons.dm:523]
									 [Player and Weapons.dm:523]
										 (o.name) [Player and Weapons.dm:523]
						.call (buy) [Player and Weapons.dm:524]
							 (P) [Player and Weapons.dm:524]
			else [Player and Weapons.dm:525]
				if [Player and Weapons.dm:525]
					 [Player and Weapons.dm:525]
						.index (href) [Player and Weapons.dm:525]
							 ("sell1") [Player and Weapons.dm:525]
				 [Player and Weapons.dm:526]
					var [Player and Weapons.dm:526]
						obj [Player and Weapons.dm:526]
							Items [Player and Weapons.dm:526]
								I [Player and Weapons.dm:526]
									 [Player and Weapons.dm:526]
										= [Player and Weapons.dm:526]
											locate [Player and Weapons.dm:526]
												 [Player and Weapons.dm:526]
													.index (href) [Player and Weapons.dm:526]
														 ("sell1") [Player and Weapons.dm:526]
					if [Player and Weapons.dm:527]
						 [Player and Weapons.dm:527]
							|| [Player and Weapons.dm:527]
								 [Player and Weapons.dm:527]
									! [Player and Weapons.dm:527]
										 (I) [Player and Weapons.dm:527]
								 [Player and Weapons.dm:527]
									! [Player and Weapons.dm:527]
										 [Player and Weapons.dm:527]
											in [Player and Weapons.dm:527]
												 (I) [Player and Weapons.dm:527]
												 (P) [Player and Weapons.dm:527]
					 [Player and Weapons.dm:527]
						return [Player and Weapons.dm:527]
					+= [Player and Weapons.dm:528]
						 (P.Credits) [Player and Weapons.dm:528]
						 [Player and Weapons.dm:528]
							+ [Player and Weapons.dm:528]
								 [Player and Weapons.dm:528]
									round [Player and Weapons.dm:528]
										 [Player and Weapons.dm:528]
											/ [Player and Weapons.dm:528]
												 (I.Value) [Player and Weapons.dm:528]
												 (2.5) [Player and Weapons.dm:528]
								 (Add) [Player and Weapons.dm:528]
					<< [Player and Weapons.dm:529]
						 (usr) [Player and Weapons.dm:529]
						 [Player and Weapons.dm:529]
							text ("<font color = green>Sold \[].") [Player and Weapons.dm:529]
								 [Player and Weapons.dm:529]
									 (I.name) [Player and Weapons.dm:529]
					del [Player and Weapons.dm:530]
						 (I) [Player and Weapons.dm:530]
					.call (sell) [Player and Weapons.dm:531]
						 (P) [Player and Weapons.dm:531]
		proc [Player and Weapons.dm:532]
			buy [Player and Weapons.dm:532]
				var [Player and Weapons.dm:533]
					.arg [Player and Weapons.dm:533]
						mob [Player and Weapons.dm:532]
							Player [Player and Weapons.dm:532]
								Shop [Player and Weapons.dm:532]
									 [Player and Weapons.dm:533]
										= [Player and Weapons.dm:532]
											 (null) [Player and Weapons.dm:532]
				if [Player and Weapons.dm:533]
					 [Player and Weapons.dm:533]
						|| [Player and Weapons.dm:533]
							 [Player and Weapons.dm:533]
								isnull [Player and Weapons.dm:533]
									 (src) [Player and Weapons.dm:533]
							 [Player and Weapons.dm:533]
								> [Player and Weapons.dm:533]
									 [Player and Weapons.dm:533]
										get_dist [Player and Weapons.dm:533]
											 (src) [Player and Weapons.dm:533]
											 (Shop) [Player and Weapons.dm:533]
									 (1) [Player and Weapons.dm:533]
				 [Player and Weapons.dm:533]
					return [Player and Weapons.dm:533]
				var [Player and Weapons.dm:534]
					selection [Player and Weapons.dm:534]
						 [Player and Weapons.dm:534]
							= [Player and Weapons.dm:534]
								 ("") [Player and Weapons.dm:534]
				_block [Player and Weapons.dm:535]
					var [Player and Weapons.dm:535]
						obj [Player and Weapons.dm:535]
							Items [Player and Weapons.dm:535]
								i [Player and Weapons.dm:535]
					for [Player and Weapons.dm:535]
						 [Player and Weapons.dm:535]
							in [Player and Weapons.dm:535]
								 (i) [Player and Weapons.dm:535]
								 (Selection) [Player and Weapons.dm:535]
					 [Player and Weapons.dm:536]
						var [Player and Weapons.dm:536]
							red [Player and Weapons.dm:536]
								 [Player and Weapons.dm:536]
									= [Player and Weapons.dm:536]
										 ("") [Player and Weapons.dm:536]
						if [Player and Weapons.dm:537]
							 [Player and Weapons.dm:537]
								> [Player and Weapons.dm:537]
									 [Player and Weapons.dm:537]
										+ [Player and Weapons.dm:537]
											 (i.Value) [Player and Weapons.dm:537]
											 (Add) [Player and Weapons.dm:537]
									 (Shop.Credits) [Player and Weapons.dm:537]
						 [Player and Weapons.dm:537]
							= [Player and Weapons.dm:537]
								 (red) [Player and Weapons.dm:537]
								 ("<FONT COLOR = red>") [Player and Weapons.dm:537]
						<< [Player and Weapons.dm:538]
							 (usr) [Player and Weapons.dm:538]
							 [Player and Weapons.dm:538]
								browse_rsc [Player and Weapons.dm:538]
									 [Player and Weapons.dm:538]
										icon [Player and Weapons.dm:538]
											 (i.icon) [Player and Weapons.dm:538]
											 (i.icon_state) [Player and Weapons.dm:538]
									 [Player and Weapons.dm:538]
										text ("\[].png") [Player and Weapons.dm:538]
											 [Player and Weapons.dm:538]
												ckey [Player and Weapons.dm:538]
													 (i.name) [Player and Weapons.dm:538]
						+= [Player and Weapons.dm:539]
							 (selection) [Player and Weapons.dm:539]
							 [Player and Weapons.dm:539]
								text ("<TR><TD><IMG SRC=\[].png onClick=\"doit(this,'\[]')\"><BR>\[]</TD><TD>(\[]\[] credits</FONT COLOR>)</TD><TD>\\\[<A HREF=# onClick=\"doit(this,'<P><CENTER><B><BIG>Buy</BIG></B><BR><BR>Are you sure you`d like to purchase <B>\[]</B> for <B>\[]</B> credits?<BR><BR><A HREF=?\\ref\[]&buy1=\[]>Yes</A> or <FONT COLOR=blue><U><SPAN CLASS=point>No</SPAN></U></FONT></P>'); return false;\">BUY</A>]</TD><TD>\\\[<A HREF=# onClick=\"doit(this,'\[]'); return false;\">INFO</A>]</TD><TR>") [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										ckey [Player and Weapons.dm:539]
											 (i.name) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (i.desc) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (i.name) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (red) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										+ [Player and Weapons.dm:539]
											 (i.Value) [Player and Weapons.dm:539]
											 (Add) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (i.name) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										+ [Player and Weapons.dm:539]
											 (i.Value) [Player and Weapons.dm:539]
											 (Add) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (src) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										.call (Selection.Find) [Player and Weapons.dm:539]
											 (i) [Player and Weapons.dm:539]
									 [Player and Weapons.dm:539]
										 (i.desc) [Player and Weapons.dm:539]
				<< [Player and Weapons.dm:540]
					 (usr) [Player and Weapons.dm:540]
					 [Player and Weapons.dm:540]
						browse [Player and Weapons.dm:540]
							 [Player and Weapons.dm:552]
								text ("\n<HTML>\n<HEAD><TITLE>\[] Credits</TITLE></HEAD>\n\[]\n<BODY BGCOLOR=black TEXT=white>\n<B>\[]: </B>\[]<BR>\n<CENTER>\n<HR><TABLE cellpadding = 4>\n\[]\n</TABLE><HR>\n<BR>\\\[<A HREF=?\\ref\[]>Back</A>]\n</CENTER>\n") [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (Shop.Credits) [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (include) [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (src.name) [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (src.Buy) [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (selection) [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (src) [Player and Weapons.dm:552]
							 [Player and Weapons.dm:552]
								text ("\[]") [Player and Weapons.dm:552]
									 [Player and Weapons.dm:552]
										 (wStyle) [Player and Weapons.dm:552]
			sell [Player and Weapons.dm:554]
				var [Player and Weapons.dm:555]
					.arg [Player and Weapons.dm:555]
						mob [Player and Weapons.dm:554]
							Player [Player and Weapons.dm:554]
								Shop [Player and Weapons.dm:554]
									 [Player and Weapons.dm:555]
										= [Player and Weapons.dm:554]
											 (null) [Player and Weapons.dm:554]
				if [Player and Weapons.dm:555]
					 [Player and Weapons.dm:555]
						|| [Player and Weapons.dm:555]
							 [Player and Weapons.dm:555]
								isnull [Player and Weapons.dm:555]
									 (src) [Player and Weapons.dm:555]
							 [Player and Weapons.dm:555]
								> [Player and Weapons.dm:555]
									 [Player and Weapons.dm:555]
										get_dist [Player and Weapons.dm:555]
											 (src) [Player and Weapons.dm:555]
											 (Shop) [Player and Weapons.dm:555]
									 (1) [Player and Weapons.dm:555]
				 [Player and Weapons.dm:555]
					return [Player and Weapons.dm:555]
				var [Player and Weapons.dm:556]
					selection [Player and Weapons.dm:556]
						 [Player and Weapons.dm:556]
							= [Player and Weapons.dm:556]
								 ("") [Player and Weapons.dm:556]
				_block [Player and Weapons.dm:557]
					var [Player and Weapons.dm:557]
						obj [Player and Weapons.dm:557]
							Items [Player and Weapons.dm:557]
								i [Player and Weapons.dm:557]
					for [Player and Weapons.dm:557]
						 [Player and Weapons.dm:557]
							in [Player and Weapons.dm:557]
								 (i) [Player and Weapons.dm:557]
								 (Shop) [Player and Weapons.dm:557]
					 [Player and Weapons.dm:558]
						<< [Player and Weapons.dm:558]
							 (usr) [Player and Weapons.dm:558]
							 [Player and Weapons.dm:558]
								browse_rsc [Player and Weapons.dm:558]
									 [Player and Weapons.dm:558]
										icon [Player and Weapons.dm:558]
											 (i.icon) [Player and Weapons.dm:558]
											 (i.icon_state) [Player and Weapons.dm:558]
									 [Player and Weapons.dm:558]
										text ("\[].png") [Player and Weapons.dm:558]
											 [Player and Weapons.dm:558]
												ckey [Player and Weapons.dm:558]
													 (i.name) [Player and Weapons.dm:558]
						+= [Player and Weapons.dm:559]
							 (selection) [Player and Weapons.dm:559]
							 [Player and Weapons.dm:559]
								text ("<TR><TD><BR><IMG SRC=\[].png><BR>\[]</TD><TD>(\[] credits)</TD><TD>\\\[<A HREF=# onClick=\\\"show(this,'<P><CENTER><B><BIG>Sell</BIG></B><BR><BR>Are you sure you`d like to sell <B>\[]</B> for <B>\[]</B> credits?<BR><BR><A HREF=?\\ref\[]&sell1=\\ref\[]>Yes</A> or <FONT COLOR=blue><U><SPAN CLASS=point>No</SPAN></U></FONT></P>'); return false;\\\">SELL</A>]</TD></TR>") [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										ckey [Player and Weapons.dm:559]
											 (i.name) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										 (i.name) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										round [Player and Weapons.dm:559]
											 [Player and Weapons.dm:559]
												/ [Player and Weapons.dm:559]
													 (i.Value) [Player and Weapons.dm:559]
													 (2.5) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										 (i.name) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										+ [Player and Weapons.dm:559]
											 [Player and Weapons.dm:559]
												round [Player and Weapons.dm:559]
													 [Player and Weapons.dm:559]
														/ [Player and Weapons.dm:559]
															 (i.Value) [Player and Weapons.dm:559]
															 (2.5) [Player and Weapons.dm:559]
											 (Add) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										 (src) [Player and Weapons.dm:559]
									 [Player and Weapons.dm:559]
										 (i) [Player and Weapons.dm:559]
				<< [Player and Weapons.dm:560]
					 (usr) [Player and Weapons.dm:560]
					 [Player and Weapons.dm:560]
						browse [Player and Weapons.dm:560]
							 [Player and Weapons.dm:571]
								text ("\n<HTML>\n<HEAD><TITLE>\[] Credits</TITLE></HEAD>\n\[]\n<BODY BGCOLOR=black TEXT=white>\n<B>\[]:</B> \[].<BR>\n<CENTER><HR><TABLE cellpadding = 4>\n\[]\n</TABLE><HR>\n<BR>\\\[<A HREF=?\\ref\[]>Back</A>]\n</CENTER>\n") [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (Shop.Credits) [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (include) [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (src.name) [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (src.Sale) [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (selection) [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (src) [Player and Weapons.dm:571]
							 [Player and Weapons.dm:571]
								text ("\[]") [Player and Weapons.dm:571]
									 [Player and Weapons.dm:571]
										 (wStyle) [Player and Weapons.dm:571]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/atom/movable) [Darkside.dme:0]
	.. (/atom/movable) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/atom/movable) [The Base.dmp:0]
	.. (/atom/movable) [The Base.dmp:0]
	.. (/atom/movable) [The Base.dmp:0]
obj [Hud.dm:1]
	Hud [Hud.dm:1]
		= [Hud.dm:2]
			 (icon) [Hud.dm:2]
			 ('Hud.dmi') [Hud.dm:2]
		= [Hud.dm:3]
			 (layer) [Hud.dm:3]
			 (10) [Hud.dm:3]
		Odd [Hud.dm:5]
			= [Hud.dm:6]
				 (name) [Hud.dm:6]
				 ("Heads Up") [Hud.dm:6]
			InvStart [Hud.dm:7]
				= [Hud.dm:8]
					 (icon_state) [Hud.dm:8]
					 ("Inv Start0") [Hud.dm:8]
				= [Hud.dm:9]
					 (screen_loc) [Hud.dm:9]
					 ("1,13") [Hud.dm:9]
			InvEnd [Hud.dm:10]
				= [Hud.dm:11]
					 (icon_state) [Hud.dm:11]
					 ("Inv End0") [Hud.dm:11]
				= [Hud.dm:12]
					 (screen_loc) [Hud.dm:12]
					 ("5,13") [Hud.dm:12]
		Inv [Hud.dm:14]
			= [Hud.dm:15]
				 (name) [Hud.dm:15]
				 ("Inventory") [Hud.dm:15]
			var [Hud.dm:16]
				Slot [Hud.dm:16]
					 [Hud.dm:16]
						= [Hud.dm:16]
							 (0) [Hud.dm:16]
			Inv1 [Hud.dm:17]
				= [Hud.dm:18]
					 (icon_state) [Hud.dm:18]
					 ("Inv Center") [Hud.dm:18]
				= [Hud.dm:19]
					 (screen_loc) [Hud.dm:19]
					 ("2,13") [Hud.dm:19]
				= [Hud.dm:20]
					 (Slot) [Hud.dm:20]
					 (1) [Hud.dm:20]
			Inv2 [Hud.dm:21]
				= [Hud.dm:22]
					 (icon_state) [Hud.dm:22]
					 ("Inv Select") [Hud.dm:22]
				= [Hud.dm:23]
					 (screen_loc) [Hud.dm:23]
					 ("3,13") [Hud.dm:23]
				= [Hud.dm:24]
					 (Slot) [Hud.dm:24]
					 (2) [Hud.dm:24]
			Inv3 [Hud.dm:25]
				= [Hud.dm:26]
					 (icon_state) [Hud.dm:26]
					 ("Inv Center") [Hud.dm:26]
				= [Hud.dm:27]
					 (screen_loc) [Hud.dm:27]
					 ("4,13") [Hud.dm:27]
				= [Hud.dm:28]
					 (Slot) [Hud.dm:28]
					 (3) [Hud.dm:28]
			proc [Hud.dm:30]
				Updating [Hud.dm:30]
					var [Hud.dm:30]
						.arg [Hud.dm:30]
					if [Hud.dm:30]
						 [Hud.dm:30]
							! [Hud.dm:30]
								isnull [Hud.dm:30]
									 (src.Owner) [Hud.dm:30]
					 [Hud.dm:31]
						-= [Hud.dm:31]
							 (src.overlays) [Hud.dm:31]
							 (src.overlays) [Hud.dm:31]
						if [Hud.dm:32]
							 [Hud.dm:32]
								! [Hud.dm:32]
									 (src.Owner.InvMode) [Hud.dm:32]
						 [Hud.dm:33]
							if [Hud.dm:33]
								 [Hud.dm:33]
									&& [Hud.dm:33]
										 [Hud.dm:33]
											== [Hud.dm:33]
												 (Slot) [Hud.dm:33]
												 (1) [Hud.dm:33]
										 [Hud.dm:33]
											> [Hud.dm:33]
												 [Hud.dm:33]
													length [Hud.dm:33]
														 (src.Owner.Inventory) [Hud.dm:33]
												 (1) [Hud.dm:33]
										 [Hud.dm:33]
											> [Hud.dm:33]
												 (src.Owner.Inv) [Hud.dm:33]
												 (1) [Hud.dm:33]
							 [Hud.dm:34]
								+= [Hud.dm:34]
									 (src.overlays) [Hud.dm:34]
									 [Hud.dm:34]
										image [Hud.dm:34]
											 [Hud.dm:34]
												arglist [Hud.dm:34]
													 [Hud.dm:34]
														list [Hud.dm:34]
															 [Hud.dm:34]
																.index (src.Owner.Inventory) [Hud.dm:34]
																	 [Hud.dm:34]
																		- [Hud.dm:34]
																			 (src.Owner.Inv) [Hud.dm:34]
																			 (1) [Hud.dm:34]
															 [Hud.dm:34]
																= [Hud.dm:34]
																	 ("layer") [Hud.dm:34]
																	 (12) [Hud.dm:34]
							else [Hud.dm:35]
								if [Hud.dm:35]
									 [Hud.dm:35]
										&& [Hud.dm:35]
											 [Hud.dm:35]
												== [Hud.dm:35]
													 (Slot) [Hud.dm:35]
													 (2) [Hud.dm:35]
											 [Hud.dm:35]
												length [Hud.dm:35]
													 (src.Owner.Inventory) [Hud.dm:35]
								 [Hud.dm:36]
									+= [Hud.dm:36]
										 (src.overlays) [Hud.dm:36]
										 [Hud.dm:36]
											image [Hud.dm:36]
												 [Hud.dm:36]
													arglist [Hud.dm:36]
														 [Hud.dm:36]
															list [Hud.dm:36]
																 [Hud.dm:36]
																	.index (src.Owner.Inventory) [Hud.dm:36]
																		 (src.Owner.Inv) [Hud.dm:36]
																 [Hud.dm:36]
																	= [Hud.dm:36]
																		 ("layer") [Hud.dm:36]
																		 (12) [Hud.dm:36]
								else [Hud.dm:37]
									if [Hud.dm:37]
										 [Hud.dm:37]
											&& [Hud.dm:37]
												 [Hud.dm:37]
													== [Hud.dm:37]
														 (Slot) [Hud.dm:37]
														 (3) [Hud.dm:37]
												 [Hud.dm:37]
													> [Hud.dm:37]
														 [Hud.dm:37]
															length [Hud.dm:37]
																 (src.Owner.Inventory) [Hud.dm:37]
														 (src.Owner.Inv) [Hud.dm:37]
									 [Hud.dm:38]
										+= [Hud.dm:38]
											 (src.overlays) [Hud.dm:38]
											 [Hud.dm:38]
												image [Hud.dm:38]
													 [Hud.dm:38]
														arglist [Hud.dm:38]
															 [Hud.dm:38]
																list [Hud.dm:38]
																	 [Hud.dm:38]
																		.index (src.Owner.Inventory) [Hud.dm:38]
																			 [Hud.dm:38]
																				+ [Hud.dm:38]
																					 (src.Owner.Inv) [Hud.dm:38]
																					 (1) [Hud.dm:38]
																	 [Hud.dm:38]
																		= [Hud.dm:38]
																			 ("layer") [Hud.dm:38]
																			 (12) [Hud.dm:38]
						else [Hud.dm:39]
							if [Hud.dm:39]
								 (src.Owner.InvMode) [Hud.dm:39]
							 [Hud.dm:40]
								if [Hud.dm:40]
									 [Hud.dm:40]
										&& [Hud.dm:40]
											 [Hud.dm:40]
												== [Hud.dm:40]
													 (Slot) [Hud.dm:40]
													 (1) [Hud.dm:40]
											 [Hud.dm:40]
												> [Hud.dm:40]
													 [Hud.dm:40]
														length [Hud.dm:40]
															 (src.Owner.Inventory2) [Hud.dm:40]
													 (1) [Hud.dm:40]
											 [Hud.dm:40]
												> [Hud.dm:40]
													 (src.Owner.Inv2) [Hud.dm:40]
													 (1) [Hud.dm:40]
								 [Hud.dm:41]
									+= [Hud.dm:41]
										 (src.overlays) [Hud.dm:41]
										 [Hud.dm:41]
											image [Hud.dm:41]
												 [Hud.dm:41]
													arglist [Hud.dm:41]
														 [Hud.dm:41]
															list [Hud.dm:41]
																 [Hud.dm:41]
																	.index (src.Owner.Inventory2) [Hud.dm:41]
																		 [Hud.dm:41]
																			- [Hud.dm:41]
																				 (src.Owner.Inv2) [Hud.dm:41]
																				 (1) [Hud.dm:41]
																 [Hud.dm:41]
																	= [Hud.dm:41]
																		 ("layer") [Hud.dm:41]
																		 (12) [Hud.dm:41]
								else [Hud.dm:42]
									if [Hud.dm:42]
										 [Hud.dm:42]
											&& [Hud.dm:42]
												 [Hud.dm:42]
													== [Hud.dm:42]
														 (Slot) [Hud.dm:42]
														 (2) [Hud.dm:42]
												 [Hud.dm:42]
													length [Hud.dm:42]
														 (src.Owner.Inventory2) [Hud.dm:42]
									 [Hud.dm:43]
										+= [Hud.dm:43]
											 (src.overlays) [Hud.dm:43]
											 [Hud.dm:43]
												image [Hud.dm:43]
													 [Hud.dm:43]
														arglist [Hud.dm:43]
															 [Hud.dm:43]
																list [Hud.dm:43]
																	 [Hud.dm:43]
																		.index (src.Owner.Inventory2) [Hud.dm:43]
																			 (src.Owner.Inv2) [Hud.dm:43]
																	 [Hud.dm:43]
																		= [Hud.dm:43]
																			 ("layer") [Hud.dm:43]
																			 (12) [Hud.dm:43]
									else [Hud.dm:44]
										if [Hud.dm:44]
											 [Hud.dm:44]
												&& [Hud.dm:44]
													 [Hud.dm:44]
														== [Hud.dm:44]
															 (Slot) [Hud.dm:44]
															 (3) [Hud.dm:44]
													 [Hud.dm:44]
														> [Hud.dm:44]
															 [Hud.dm:44]
																length [Hud.dm:44]
																	 (src.Owner.Inventory2) [Hud.dm:44]
															 (src.Owner.Inv2) [Hud.dm:44]
										 [Hud.dm:45]
											+= [Hud.dm:45]
												 (src.overlays) [Hud.dm:45]
												 [Hud.dm:45]
													image [Hud.dm:45]
														 [Hud.dm:45]
															arglist [Hud.dm:45]
																 [Hud.dm:45]
																	list [Hud.dm:45]
																		 [Hud.dm:45]
																			.index (src.Owner.Inventory2) [Hud.dm:45]
																				 [Hud.dm:45]
																					+ [Hud.dm:45]
																						 (src.Owner.Inv2) [Hud.dm:45]
																						 (1) [Hud.dm:45]
																		 [Hud.dm:45]
																			= [Hud.dm:45]
																				 ("layer") [Hud.dm:45]
																				 (12) [Hud.dm:45]
			New [Hud.dm:46]
				var [Hud.dm:47]
					.arg [Hud.dm:47]
				.call (..) [Hud.dm:47]
				spawn [Hud.dm:48]
					 (15) [Hud.dm:48]
				 [Hud.dm:48]
					.call (src.Updating) [Hud.dm:48]
		New [Hud.dm:50]
			var [Hud.dm:50]
				.arg [Hud.dm:50]
					client [Hud.dm:50]
						C [Hud.dm:50]
			if [Hud.dm:50]
				 [Hud.dm:50]
					! [Hud.dm:50]
						isnull [Hud.dm:50]
							 (C) [Hud.dm:50]
			 [Hud.dm:51]
				+= [Hud.dm:51]
					 (C.screen) [Hud.dm:51]
					 (src) [Hud.dm:51]
	Effects [Items.dm:1]
		= [Items.dm:2]
			 (icon) [Items.dm:2]
			 ('Effects.dmi') [Items.dm:2]
		= [Items.dm:3]
			 (Health) [Items.dm:3]
			 (999) [Items.dm:3]
		Reload [Items.dm:4]
			= [Items.dm:5]
				 (name) [Items.dm:5]
				 ("Reload") [Items.dm:5]
			= [Items.dm:6]
				 (icon_state) [Items.dm:6]
				 ("Reload") [Items.dm:6]
		Flame1 [Items.dm:7]
			New [Items.dm:8]
				var [Items.dm:9]
					.arg [Items.dm:9]
				.call (..) [Items.dm:9]
				spawn [Items.dm:10]
					 (6) [Items.dm:10]
				 [Items.dm:10]
					del [Items.dm:10]
						 (src) [Items.dm:10]
			Move [Items.dm:11]
				var [Items.dm:12]
					.arg [Items.dm:12]
						turf [Items.dm:11]
							Z [Items.dm:11]
				.call (..) [Items.dm:12]
				_block [Items.dm:13]
					var [Items.dm:13]
						atom [Items.dm:13]
							movable [Items.dm:13]
								X [Items.dm:13]
					for [Items.dm:13]
						 [Items.dm:13]
							in [Items.dm:13]
								 (X) [Items.dm:13]
								 (src.loc) [Items.dm:13]
					 [Items.dm:13]
						if [Items.dm:13]
							 [Items.dm:13]
								&& [Items.dm:13]
									 [Items.dm:13]
										! [Items.dm:13]
											istype [Items.dm:13]
												 (X) [Items.dm:13]
												 (/mob/Player) [Items.dm:13]
									 [Items.dm:13]
										!= [Items.dm:13]
											 (X) [Items.dm:13]
											 (src) [Items.dm:13]
						 [Items.dm:14]
							if [Items.dm:14]
								 [Items.dm:14]
									! [Items.dm:14]
										isnull [Items.dm:14]
											 (X) [Items.dm:14]
							 [Items.dm:14]
								.call (Damage) [Items.dm:14]
									 (src.Owner) [Items.dm:14]
									 (X) [Items.dm:14]
									 (1) [Items.dm:14]
									 ("Flame 0") [Items.dm:14]
									 (0) [Items.dm:14]
		ArmedTripBomb [Items.dm:16]
			var [Items.dm:17]
				Beams [Items.dm:17]
					 [Items.dm:17]
						= [Items.dm:17]
							list [Items.dm:17]
			= [Items.dm:18]
				 (name) [Items.dm:18]
				 ("Armed Trip Bomb") [Items.dm:18]
			= [Items.dm:19]
				 (icon_state) [Items.dm:19]
				 ("Trip Bomb") [Items.dm:19]
			= [Items.dm:20]
				 (Health) [Items.dm:20]
				 (10) [Items.dm:20]
			= [Items.dm:21]
				 (layer) [Items.dm:21]
				 (6) [Items.dm:21]
			New [Items.dm:22]
				var [Items.dm:23]
					.arg [Items.dm:23]
				spawn [Items.dm:23]
					 (25) [Items.dm:23]
				 [Items.dm:24]
					var [Items.dm:24]
						obj [Items.dm:24]
							Effects [Items.dm:24]
								BeamLayer [Items.dm:24]
									Y [Items.dm:24]
										 [Items.dm:24]
											= [Items.dm:24]
												new [Items.dm:24]
													 [Items.dm:24]
													 (src.loc) [Items.dm:24]
					= [Items.dm:25]
						 (Y.Source) [Items.dm:25]
						 (src) [Items.dm:25]
					walk [Items.dm:26]
						 (Y) [Items.dm:26]
						 (src.dir) [Items.dm:26]
				if [Items.dm:27]
					 [Items.dm:27]
						!= [Items.dm:27]
							 (src.desc) [Items.dm:27]
							 ("Mapped") [Items.dm:27]
				 [Items.dm:27]
					spawn [Items.dm:27]
						 (300) [Items.dm:27]
					 [Items.dm:27]
						del [Items.dm:27]
							 (src) [Items.dm:27]
				.call (..) [Items.dm:28]
			Del [Items.dm:29]
				var [Items.dm:30]
					.arg [Items.dm:30]
				if [Items.dm:30]
					 [Items.dm:30]
						!= [Items.dm:30]
							 (src.suffix) [Items.dm:30]
							 ("Destroyed1") [Items.dm:30]
				 [Items.dm:31]
					flick [Items.dm:31]
						 ("Explode") [Items.dm:31]
						 (src) [Items.dm:31]
					_block [Items.dm:32]
						var [Items.dm:32]
							obj [Items.dm:32]
								Effects [Items.dm:32]
									Beam [Items.dm:32]
										X [Items.dm:32]
						for [Items.dm:32]
							 [Items.dm:32]
								in [Items.dm:32]
									 (X) [Items.dm:32]
									 (Beams) [Items.dm:32]
						 [Items.dm:32]
							del [Items.dm:32]
								 (X) [Items.dm:32]
					.call (Explode) [Items.dm:33]
						 (src) [Items.dm:33]
						 (6) [Items.dm:33]
						 (2) [Items.dm:33]
						 (50) [Items.dm:33]
				.call (..) [Items.dm:34]
		ThermoBomb [Items.dm:36]
			= [Items.dm:37]
				 (name) [Items.dm:37]
				 ("Armed Thermo Bomb") [Items.dm:37]
			= [Items.dm:38]
				 (icon_state) [Items.dm:38]
				 ("Thermo Bomb") [Items.dm:38]
			= [Items.dm:39]
				 (Health) [Items.dm:39]
				 (10) [Items.dm:39]
			Del [Items.dm:40]
				var [Items.dm:41]
					.arg [Items.dm:41]
				if [Items.dm:41]
					 [Items.dm:41]
						!= [Items.dm:41]
							 (src.suffix) [Items.dm:41]
							 ("Destroyed1") [Items.dm:41]
				 [Items.dm:42]
					flick [Items.dm:42]
						 ("Explode") [Items.dm:42]
						 (src) [Items.dm:42]
					.call (Explode) [Items.dm:43]
						 (src) [Items.dm:43]
						 (2) [Items.dm:43]
						 (1) [Items.dm:43]
						 (30) [Items.dm:43]
				.call (..) [Items.dm:44]
		BeamLayer [Items.dm:46]
			var [Items.dm:47]
				obj [Items.dm:47]
					Effects [Items.dm:47]
						ArmedTripBomb [Items.dm:47]
							Source [Items.dm:47]
								 [Items.dm:47]
									= [Items.dm:47]
										 (null) [Items.dm:47]
			Move [Items.dm:48]
				var [Items.dm:48]
					.arg [Items.dm:48]
				if [Items.dm:48]
					 [Items.dm:48]
						!= [Items.dm:48]
							 (src.suffix) [Items.dm:48]
							 ("Destroyed") [Items.dm:48]
				 [Items.dm:49]
					.call (..) [Items.dm:49]
					if [Items.dm:50]
						 [Items.dm:50]
							|| [Items.dm:50]
								 [Items.dm:50]
									isnull [Items.dm:50]
										 (Source) [Items.dm:50]
								 (src.loc.density) [Items.dm:50]
					 [Items.dm:50]
						del [Items.dm:50]
							 (src) [Items.dm:50]
					var [Items.dm:51]
						obj [Items.dm:51]
							Effects [Items.dm:51]
								Beam [Items.dm:51]
									Y [Items.dm:51]
										 [Items.dm:51]
											= [Items.dm:51]
												new [Items.dm:51]
													 [Items.dm:51]
													 (src.loc) [Items.dm:51]
					= [Items.dm:52]
						 (Y.dir) [Items.dm:52]
						 (src.dir) [Items.dm:52]
					= [Items.dm:53]
						 (Y.Trigger) [Items.dm:53]
						 (Source) [Items.dm:53]
					+= [Items.dm:54]
						 (Source.Beams) [Items.dm:54]
						 (Y) [Items.dm:54]
		Beam [Items.dm:56]
			var [Items.dm:57]
				obj [Items.dm:57]
					Trigger [Items.dm:57]
						 [Items.dm:57]
							= [Items.dm:57]
								 (null) [Items.dm:57]
			= [Items.dm:58]
				 (name) [Items.dm:58]
				 ("Trip Bomb Beam") [Items.dm:58]
			= [Items.dm:59]
				 (icon_state) [Items.dm:59]
				 ("Laser") [Items.dm:59]
			= [Items.dm:60]
				 (layer) [Items.dm:60]
				 (3) [Items.dm:60]
		EnergyBall [Items.dm:62]
			= [Items.dm:63]
				 (Health) [Items.dm:63]
				 (1) [Items.dm:63]
			= [Items.dm:64]
				 (icon_state) [Items.dm:64]
				 ("Green Boomer") [Items.dm:64]
			= [Items.dm:65]
				 (density) [Items.dm:65]
				 (1) [Items.dm:65]
			Bump [Items.dm:66]
				var [Items.dm:66]
					.arg [Items.dm:66]
				del [Items.dm:66]
					 (src) [Items.dm:66]
			Move [Items.dm:67]
				var [Items.dm:68]
					.arg [Items.dm:68]
				.call (..) [Items.dm:68]
				if [Items.dm:69]
					 [Items.dm:69]
						== [Items.dm:69]
							 (src.loc) [Items.dm:69]
							 (src.Target) [Items.dm:69]
				 [Items.dm:69]
					del [Items.dm:69]
						 (src) [Items.dm:69]
			Del [Items.dm:70]
				var [Items.dm:71]
					.arg [Items.dm:71]
				if [Items.dm:71]
					 (src.Health) [Items.dm:71]
				 [Items.dm:72]
					_block [Items.dm:72]
						var [Items.dm:72]
							turf [Items.dm:72]
								Z [Items.dm:72]
						for [Items.dm:72]
							 [Items.dm:72]
								in [Items.dm:72]
									 (Z) [Items.dm:72]
									 [Items.dm:72]
										range [Items.dm:72]
											 (1) [Items.dm:72]
											 (src) [Items.dm:72]
						 [Items.dm:72]
							missile [Items.dm:72]
								 [Items.dm:72]
									image [Items.dm:72]
										 [Items.dm:72]
											arglist [Items.dm:72]
												 [Items.dm:72]
													list [Items.dm:72]
														 ('Effects.dmi') [Items.dm:72]
														 [Items.dm:72]
															= [Items.dm:72]
																 ("icon_state") [Items.dm:72]
																 ("Mist1") [Items.dm:72]
														 [Items.dm:72]
															= [Items.dm:72]
																 ("layer") [Items.dm:72]
																 (5) [Items.dm:72]
														 [Items.dm:72]
															= [Items.dm:72]
																 ("pixel_y") [Items.dm:72]
																 [Items.dm:72]
																	rand [Items.dm:72]
																		 (-10) [Items.dm:72]
																		 (10) [Items.dm:72]
														 [Items.dm:72]
															= [Items.dm:72]
																 ("pixel_x") [Items.dm:72]
																 [Items.dm:72]
																	rand [Items.dm:72]
																		 (-10) [Items.dm:72]
																		 (10) [Items.dm:72]
								 (src) [Items.dm:72]
								 (Z) [Items.dm:72]
					_block [Items.dm:73]
						var [Items.dm:73]
							atom [Items.dm:73]
								movable [Items.dm:73]
									X [Items.dm:73]
						for [Items.dm:73]
							 [Items.dm:73]
								in [Items.dm:73]
									 (X) [Items.dm:73]
									 [Items.dm:73]
										range [Items.dm:73]
											 (1) [Items.dm:73]
											 (src) [Items.dm:73]
						 [Items.dm:73]
							if [Items.dm:73]
								 [Items.dm:73]
									&& [Items.dm:73]
										 [Items.dm:73]
											! [Items.dm:73]
												istype [Items.dm:73]
													 (X) [Items.dm:73]
													 (/mob/Player) [Items.dm:73]
										 [Items.dm:73]
											!= [Items.dm:73]
												 (X) [Items.dm:73]
												 (src) [Items.dm:73]
							 [Items.dm:74]
								.call (Damage) [Items.dm:74]
									 (src) [Items.dm:74]
									 (X) [Items.dm:74]
									 (4) [Items.dm:74]
									 ("Mist1") [Items.dm:74]
									 (0) [Items.dm:74]
									 (1) [Items.dm:74]
				else [Items.dm:75]
					_block [Items.dm:76]
						var [Items.dm:76]
							turf [Items.dm:76]
								Z [Items.dm:76]
						for [Items.dm:76]
							 [Items.dm:76]
								in [Items.dm:76]
									 (Z) [Items.dm:76]
									 [Items.dm:76]
										range [Items.dm:76]
											 (2) [Items.dm:76]
											 (src) [Items.dm:76]
						 [Items.dm:76]
							missile [Items.dm:76]
								 [Items.dm:76]
									image [Items.dm:76]
										 [Items.dm:76]
											arglist [Items.dm:76]
												 [Items.dm:76]
													list [Items.dm:76]
														 ('Effects.dmi') [Items.dm:76]
														 [Items.dm:76]
															= [Items.dm:76]
																 ("icon_state") [Items.dm:76]
																 ("Mist1") [Items.dm:76]
														 [Items.dm:76]
															= [Items.dm:76]
																 ("layer") [Items.dm:76]
																 (5) [Items.dm:76]
														 [Items.dm:76]
															= [Items.dm:76]
																 ("pixel_y") [Items.dm:76]
																 [Items.dm:76]
																	rand [Items.dm:76]
																		 (-10) [Items.dm:76]
																		 (10) [Items.dm:76]
														 [Items.dm:76]
															= [Items.dm:76]
																 ("pixel_x") [Items.dm:76]
																 [Items.dm:76]
																	rand [Items.dm:76]
																		 (-10) [Items.dm:76]
																		 (10) [Items.dm:76]
								 (src) [Items.dm:76]
								 (Z) [Items.dm:76]
					_block [Items.dm:77]
						var [Items.dm:77]
							atom [Items.dm:77]
								movable [Items.dm:77]
									X [Items.dm:77]
						for [Items.dm:77]
							 [Items.dm:77]
								in [Items.dm:77]
									 (X) [Items.dm:77]
									 [Items.dm:77]
										range [Items.dm:77]
											 (2) [Items.dm:77]
											 (src) [Items.dm:77]
						 [Items.dm:77]
							if [Items.dm:77]
								 [Items.dm:77]
									&& [Items.dm:77]
										 [Items.dm:77]
											! [Items.dm:77]
												istype [Items.dm:77]
													 (X) [Items.dm:77]
													 (/mob/Player) [Items.dm:77]
										 [Items.dm:77]
											!= [Items.dm:77]
												 (X) [Items.dm:77]
												 (src) [Items.dm:77]
							 [Items.dm:78]
								.call (Damage) [Items.dm:78]
									 (src) [Items.dm:78]
									 (X) [Items.dm:78]
									 (8) [Items.dm:78]
									 ("Mist1") [Items.dm:78]
									 (0) [Items.dm:78]
									 (1) [Items.dm:78]
				.call (..) [Items.dm:79]
		Missile [Items.dm:80]
			= [Items.dm:81]
				 (Health) [Items.dm:81]
				 (1) [Items.dm:81]
			= [Items.dm:82]
				 (icon_state) [Items.dm:82]
				 ("Missile") [Items.dm:82]
			= [Items.dm:83]
				 (density) [Items.dm:83]
				 (1) [Items.dm:83]
			Del [Items.dm:84]
				var [Items.dm:84]
					.arg [Items.dm:84]
				if [Items.dm:84]
					 [Items.dm:84]
						!= [Items.dm:84]
							 (src.desc) [Items.dm:84]
							 ("Destroyed") [Items.dm:84]
				 [Items.dm:85]
					= [Items.dm:85]
						 (src.desc) [Items.dm:85]
						 ("Destroyed") [Items.dm:85]
					.call (Explode) [Items.dm:86]
						 (src) [Items.dm:86]
						 (20) [Items.dm:86]
						 (1) [Items.dm:86]
						 (50) [Items.dm:86]
					.call (..) [Items.dm:87]
			Bump [Items.dm:88]
				var [Items.dm:89]
					.arg [Items.dm:89]
				del [Items.dm:89]
					 (src) [Items.dm:89]
				.call (..) [Items.dm:90]
			New [Items.dm:91]
				var [Items.dm:92]
					.arg [Items.dm:92]
				spawn [Items.dm:92]
					 (15) [Items.dm:92]
				 [Items.dm:92]
					del [Items.dm:92]
						 (src) [Items.dm:92]
				.call (..) [Items.dm:93]
		MouseDown [Items.dm:95]
			var [Items.dm:95]
				.arg [Items.dm:95]
					atom [Items.dm:95]
						Location [Items.dm:95]
			if [Items.dm:95]
				 [Items.dm:95]
					&& [Items.dm:95]
						 [Items.dm:95]
							istype [Items.dm:95]
								 (usr) [Items.dm:95]
								 (/mob/Player) [Items.dm:95]
						 [Items.dm:95]
							!= [Items.dm:95]
								 (src.Health) [Items.dm:95]
								 (999) [Items.dm:95]
			 [Items.dm:96]
				var [Items.dm:96]
					mob [Items.dm:96]
						Player [Items.dm:96]
							X [Items.dm:96]
								 [Items.dm:96]
									= [Items.dm:96]
										 (usr) [Items.dm:96]
				= [Items.dm:97]
					 (X.Firing) [Items.dm:97]
					 (1) [Items.dm:97]
				= [Items.dm:98]
					 (X.Target) [Items.dm:98]
					 (src.loc) [Items.dm:98]
				.call (X.Shooting) [Items.dm:99]
					 (X.Target) [Items.dm:99]
	var [Items.dm:101]
		Grab [Items.dm:102]
			 [Items.dm:102]
				= [Items.dm:102]
					 (0) [Items.dm:102]
	Special [Items.dm:104]
		= [Items.dm:105]
			 (Health) [Items.dm:105]
			 (150) [Items.dm:105]
		Cart [Items.dm:106]
			= [Items.dm:107]
				 (icon) [Items.dm:107]
				 ('Mapping.dmi') [Items.dm:107]
			var [Items.dm:108]
				Speed [Items.dm:108]
					 [Items.dm:108]
						= [Items.dm:108]
							 (4) [Items.dm:108]
			= [Items.dm:109]
				 (name) [Items.dm:109]
				 ("Cargo Mover") [Items.dm:109]
			= [Items.dm:110]
				 (icon_state) [Items.dm:110]
				 ("Cart") [Items.dm:110]
			= [Items.dm:111]
				 (density) [Items.dm:111]
				 (1) [Items.dm:111]
			= [Items.dm:112]
				 (layer) [Items.dm:112]
				 (4) [Items.dm:112]
			New [Items.dm:113]
				var [Items.dm:113]
					.arg [Items.dm:113]
				walk [Items.dm:113]
					 (src) [Items.dm:113]
					 (src.dir) [Items.dm:113]
					 (Speed) [Items.dm:113]
			Bump [Items.dm:114]
				var [Items.dm:115]
					.arg [Items.dm:115]
						atom [Items.dm:114]
							movable [Items.dm:114]
								X [Items.dm:114]
				if [Items.dm:115]
					 [Items.dm:115]
						== [Items.dm:115]
							 (X.suffix) [Items.dm:115]
							 ("Wall") [Items.dm:115]
				 [Items.dm:116]
					walk [Items.dm:116]
						 (src) [Items.dm:116]
						 [Items.dm:116]
							turn [Items.dm:116]
								 (src.dir) [Items.dm:116]
								 (180) [Items.dm:116]
						 (Speed) [Items.dm:116]
					= [Items.dm:117]
						 (src.Speed) [Items.dm:117]
						 [Items.dm:117]
							rand [Items.dm:117]
								 (2) [Items.dm:117]
								 (4) [Items.dm:117]
				else [Items.dm:118]
					if [Items.dm:118]
						 [Items.dm:118]
							ismob [Items.dm:118]
								 (X) [Items.dm:118]
					 [Items.dm:119]
						.call (Damage) [Items.dm:119]
							 (src) [Items.dm:119]
							 (X) [Items.dm:119]
							 (5) [Items.dm:119]
							 ("Slash") [Items.dm:119]
							 (100) [Items.dm:119]
		FakeWalls [Items.dm:121]
			= [Items.dm:122]
				 (icon) [Items.dm:122]
				 ('Mapping.dmi') [Items.dm:122]
			= [Items.dm:123]
				 (name) [Items.dm:123]
				 ("Base") [Items.dm:123]
			= [Items.dm:124]
				 (Health) [Items.dm:124]
				 (100000) [Items.dm:124]
			= [Items.dm:125]
				 (suffix) [Items.dm:125]
				 ("Wall") [Items.dm:125]
			= [Items.dm:126]
				 (density) [Items.dm:126]
				 (0) [Items.dm:126]
			= [Items.dm:127]
				 (opacity) [Items.dm:127]
				 (1) [Items.dm:127]
			Del [Items.dm:128]
				var [Items.dm:129]
					.arg [Items.dm:129]
				if [Items.dm:129]
					 [Items.dm:129]
						!= [Items.dm:129]
							 (src.suffix) [Items.dm:129]
							 ("Destroyed1") [Items.dm:129]
				 [Items.dm:130]
					flick [Items.dm:130]
						 ("Explode") [Items.dm:130]
						 (src) [Items.dm:130]
					.call (Explode) [Items.dm:131]
						 (src) [Items.dm:131]
						 (1) [Items.dm:131]
						 (1) [Items.dm:131]
						 (2) [Items.dm:131]
				.call (..) [Items.dm:132]
		Doors [Items.dm:134]
			= [Items.dm:135]
				 (suffix) [Items.dm:135]
				 ("Wall") [Items.dm:135]
			= [Items.dm:136]
				 (mouse_over_pointer) [Items.dm:136]
				 ("Open Door") [Items.dm:136]
			= [Items.dm:137]
				 (icon) [Items.dm:137]
				 ('Mapping.dmi') [Items.dm:137]
			var [Items.dm:138]
				Control [Items.dm:138]
					 [Items.dm:138]
						= [Items.dm:138]
							 (0) [Items.dm:138]
			var [Items.dm:139]
				Opened [Items.dm:139]
					 [Items.dm:139]
						= [Items.dm:139]
							 (0) [Items.dm:139]
			var [Items.dm:140]
				Delay [Items.dm:140]
					 [Items.dm:140]
						= [Items.dm:140]
							 (100) [Items.dm:140]
			var [Items.dm:141]
				Key [Items.dm:141]
					 [Items.dm:141]
						= [Items.dm:141]
							 (0) [Items.dm:141]
			var [Items.dm:142]
				Step [Items.dm:142]
					 [Items.dm:142]
						= [Items.dm:142]
							 (2) [Items.dm:142]
			= [Items.dm:143]
				 (density) [Items.dm:143]
				 (1) [Items.dm:143]
			= [Items.dm:144]
				 (layer) [Items.dm:144]
				 (5) [Items.dm:144]
			proc [Items.dm:145]
				Open [Items.dm:145]
					var [Items.dm:146]
						.arg [Items.dm:146]
					= [Items.dm:146]
						 (src.Attackible) [Items.dm:146]
						 (0) [Items.dm:146]
					= [Items.dm:147]
						 (src.Opened) [Items.dm:147]
						 (1) [Items.dm:147]
					spawn [Items.dm:148]
						 (2) [Items.dm:148]
					 [Items.dm:148]
						= [Items.dm:148]
							 (src.layer) [Items.dm:148]
							 (1) [Items.dm:148]
					= [Items.dm:149]
						 (src.loc.luminosity) [Items.dm:149]
						 (1) [Items.dm:149]
					step [Items.dm:150]
						 (src) [Items.dm:150]
						 [Items.dm:150]
							turn [Items.dm:150]
								 (Step) [Items.dm:150]
								 (180) [Items.dm:150]
					if [Items.dm:151]
						 [Items.dm:151]
							> [Items.dm:151]
								 (src.Delay) [Items.dm:151]
								 (0) [Items.dm:151]
					 [Items.dm:151]
						spawn [Items.dm:151]
							 (src.Delay) [Items.dm:151]
						 [Items.dm:151]
							.call (src.Close) [Items.dm:151]
				Close [Items.dm:152]
					var [Items.dm:153]
						.arg [Items.dm:153]
					_block [Items.dm:153]
						var [Items.dm:153]
							atom [Items.dm:153]
								a [Items.dm:153]
						for [Items.dm:153]
							 [Items.dm:153]
								in [Items.dm:153]
									 (a) [Items.dm:153]
									 [Items.dm:153]
										get_step [Items.dm:153]
											 (src) [Items.dm:153]
											 [Items.dm:153]
												turn [Items.dm:153]
													 (Step) [Items.dm:153]
													 (180) [Items.dm:153]
						 [Items.dm:154]
							if [Items.dm:154]
								 (a.density) [Items.dm:154]
							 [Items.dm:155]
								spawn [Items.dm:155]
									 (8) [Items.dm:155]
								 [Items.dm:155]
									.call (src.Close) [Items.dm:155]
								return [Items.dm:155]
					step [Items.dm:156]
						 (src) [Items.dm:156]
						 (Step) [Items.dm:156]
					= [Items.dm:157]
						 (src.Opened) [Items.dm:157]
						 (0) [Items.dm:157]
					spawn [Items.dm:158]
						 (2) [Items.dm:158]
					 [Items.dm:158]
						= [Items.dm:158]
							 (src.layer) [Items.dm:158]
							 (7) [Items.dm:158]
					= [Items.dm:159]
						 (src.density) [Items.dm:159]
						 (1) [Items.dm:159]
					= [Items.dm:160]
						 (src.loc.luminosity) [Items.dm:160]
						 (0) [Items.dm:160]
					= [Items.dm:161]
						 (src.Attackible) [Items.dm:161]
						 (1) [Items.dm:161]
					spawn [Items.dm:162]
						 (50) [Items.dm:162]
					 [Items.dm:162]
						= [Items.dm:162]
							 (src.Attackible) [Items.dm:162]
							 (0) [Items.dm:162]
			Move [Items.dm:163]
				var [Items.dm:164]
					.arg [Items.dm:164]
				var [Items.dm:164]
					I [Items.dm:164]
						 [Items.dm:164]
							= [Items.dm:164]
								 (src.dir) [Items.dm:164]
				.call (..) [Items.dm:165]
				= [Items.dm:165]
					 (src.dir) [Items.dm:165]
					 (I) [Items.dm:165]
			MouseDown [Items.dm:171]
				var [Items.dm:171]
					.arg [Items.dm:171]
				if [Items.dm:171]
					 [Items.dm:171]
						istype [Items.dm:171]
							 (usr) [Items.dm:171]
							 (/mob/Player) [Items.dm:171]
				 [Items.dm:172]
					var [Items.dm:172]
						Check [Items.dm:172]
							 [Items.dm:172]
								= [Items.dm:172]
									 (0) [Items.dm:172]
					if [Items.dm:173]
						 [Items.dm:173]
							&& [Items.dm:173]
								 [Items.dm:173]
									== [Items.dm:173]
										 [Items.dm:173]
											get_dist [Items.dm:173]
												 (src) [Items.dm:173]
												 (usr) [Items.dm:173]
										 (1) [Items.dm:173]
								 [Items.dm:173]
									! [Items.dm:173]
										 (src.Control) [Items.dm:173]
								 [Items.dm:173]
									! [Items.dm:173]
										 (src.Opened) [Items.dm:173]
					 [Items.dm:174]
						if [Items.dm:174]
							 [Items.dm:174]
								> [Items.dm:174]
									 (src.Key) [Items.dm:174]
									 (0) [Items.dm:174]
						 [Items.dm:174]
							_block [Items.dm:174]
								var [Items.dm:174]
									obj [Items.dm:174]
										Items [Items.dm:174]
											Keys [Items.dm:174]
												Y [Items.dm:174]
								for [Items.dm:174]
									 [Items.dm:174]
										in [Items.dm:174]
											 (Y) [Items.dm:174]
											 (usr) [Items.dm:174]
								 [Items.dm:175]
									if [Items.dm:175]
										 [Items.dm:175]
											== [Items.dm:175]
												 (Y.Counter) [Items.dm:175]
												 (src.Key) [Items.dm:175]
									 [Items.dm:176]
										= [Items.dm:176]
											 (Check) [Items.dm:176]
											 (1) [Items.dm:176]
										.call (Y.Move) [Items.dm:177]
											 (src) [Items.dm:177]
										del [Items.dm:177]
											 (Y) [Items.dm:177]
						else [Items.dm:178]
							= [Items.dm:178]
								 (Check) [Items.dm:178]
								 (1) [Items.dm:178]
						if [Items.dm:179]
							 [Items.dm:179]
								! [Items.dm:179]
									 (Check) [Items.dm:179]
						 [Items.dm:179]
							return [Items.dm:179]
						_block [Items.dm:180]
							var [Items.dm:180]
								obj [Items.dm:180]
									Special [Items.dm:180]
										Doors [Items.dm:180]
											X [Items.dm:180]
							for [Items.dm:180]
								 [Items.dm:180]
									in [Items.dm:180]
										 (X) [Items.dm:180]
										 [Items.dm:180]
											range [Items.dm:180]
												 (1) [Items.dm:180]
												 (src.loc) [Items.dm:180]
							 [Items.dm:181]
								= [Items.dm:181]
									 (X.Key) [Items.dm:181]
									 (0) [Items.dm:181]
								= [Items.dm:181]
									 (X.mouse_over_pointer) [Items.dm:181]
									 ("Open Door") [Items.dm:181]
								= [Items.dm:182]
									 (X.density) [Items.dm:182]
									 (0) [Items.dm:182]
								= [Items.dm:182]
									 (X.Opened) [Items.dm:182]
									 (1) [Items.dm:182]
								spawn [Items.dm:183]
									 (5) [Items.dm:183]
								 [Items.dm:183]
									.call (X.Open) [Items.dm:183]
					else [Items.dm:184]
						.call (..) [Items.dm:184]
			New [Items.dm:185]
				var [Items.dm:186]
					.arg [Items.dm:186]
				if [Items.dm:186]
					 [Items.dm:186]
						> [Items.dm:186]
							 (src.Key) [Items.dm:186]
							 (0) [Items.dm:186]
				 [Items.dm:186]
					= [Items.dm:186]
						 (src.mouse_over_pointer) [Items.dm:186]
						 ("Card Door") [Items.dm:186]
				if [Items.dm:187]
					 [Items.dm:187]
						> [Items.dm:187]
							 (src.Control) [Items.dm:187]
							 (0) [Items.dm:187]
				 [Items.dm:187]
					= [Items.dm:187]
						 (src.mouse_over_pointer) [Items.dm:187]
						 ("Controlled Door") [Items.dm:187]
				if [Items.dm:188]
					 [Items.dm:188]
						> [Items.dm:188]
							 (src.Control) [Items.dm:188]
							 (0) [Items.dm:188]
				 [Items.dm:189]
					= [Items.dm:189]
						 (src.tag) [Items.dm:189]
						 [Items.dm:189]
							text ("Door \[]") [Items.dm:189]
								 [Items.dm:189]
									 (src.Control) [Items.dm:189]
				.call (..) [Items.dm:190]
			Del [Items.dm:191]
				var [Items.dm:192]
					.arg [Items.dm:192]
				var [Items.dm:192]
					obj [Items.dm:192]
						Special [Items.dm:192]
							Furniture [Items.dm:192]
								BDoor [Items.dm:192]
									X [Items.dm:192]
										 [Items.dm:192]
											= [Items.dm:192]
												new [Items.dm:192]
													 [Items.dm:192]
													 (src.loc) [Items.dm:192]
				= [Items.dm:193]
					 (X.icon_state) [Items.dm:193]
					 [Items.dm:193]
						text ("\[] Broken") [Items.dm:193]
							 [Items.dm:193]
								 (src.icon_state) [Items.dm:193]
				walk [Items.dm:194]
					 (X) [Items.dm:194]
					 (src.dir) [Items.dm:194]
					 (1) [Items.dm:194]
				.call (..) [Items.dm:195]
		Furniture [Items.dm:197]
			= [Items.dm:198]
				 (Health) [Items.dm:198]
				 (30) [Items.dm:198]
			= [Items.dm:199]
				 (icon) [Items.dm:199]
				 ('Mapping.dmi') [Items.dm:199]
			= [Items.dm:200]
				 (mouse_drag_pointer) [Items.dm:200]
				 ("Move Item") [Items.dm:200]
			= [Items.dm:201]
				 (Draggible) [Items.dm:201]
				 (1) [Items.dm:201]
			= [Items.dm:202]
				 (density) [Items.dm:202]
				 (1) [Items.dm:202]
			PowderKeg [Items.dm:203]
				= [Items.dm:204]
					 (name) [Items.dm:204]
					 ("Powder Keg") [Items.dm:204]
				= [Items.dm:205]
					 (icon_state) [Items.dm:205]
					 ("Barrel 1") [Items.dm:205]
				Del [Items.dm:206]
					var [Items.dm:207]
						.arg [Items.dm:207]
					flick [Items.dm:207]
						 ("Explode") [Items.dm:207]
						 (src) [Items.dm:207]
					.call (Explode) [Items.dm:208]
						 (src) [Items.dm:208]
						 (6) [Items.dm:208]
						 (2) [Items.dm:208]
						 (15) [Items.dm:208]
					.call (..) [Items.dm:209]
			BDoor [Items.dm:210]
				= [Items.dm:211]
					 (name) [Items.dm:211]
					 ("Blown Door") [Items.dm:211]
				= [Items.dm:212]
					 (icon_state) [Items.dm:212]
					 ("Door Broken") [Items.dm:212]
				= [Items.dm:213]
					 (density) [Items.dm:213]
					 (1) [Items.dm:213]
				Bump [Items.dm:214]
					var [Items.dm:215]
						.arg [Items.dm:215]
							atom [Items.dm:214]
								movable [Items.dm:214]
									X [Items.dm:214]
					if [Items.dm:215]
						 [Items.dm:215]
							istype [Items.dm:215]
								 (X) [Items.dm:215]
								 (/atom/movable) [Items.dm:215]
					 [Items.dm:215]
						.call (Damage) [Items.dm:215]
							 (src) [Items.dm:215]
							 (X) [Items.dm:215]
							 (10) [Items.dm:215]
							 ("Slash") [Items.dm:215]
							 (100) [Items.dm:215]
					walk [Items.dm:216]
						 (src) [Items.dm:216]
						 (null) [Items.dm:216]
					= [Items.dm:216]
						 (src.density) [Items.dm:216]
						 (0) [Items.dm:216]
			Glass [Items.dm:217]
				= [Items.dm:218]
					 (Health) [Items.dm:218]
					 (1) [Items.dm:218]
				= [Items.dm:219]
					 (name) [Items.dm:219]
					 ("Glass") [Items.dm:219]
				= [Items.dm:220]
					 (icon_state) [Items.dm:220]
					 ("Glass") [Items.dm:220]
				= [Items.dm:221]
					 (Draggible) [Items.dm:221]
					 (0) [Items.dm:221]
				= [Items.dm:222]
					 (density) [Items.dm:222]
					 (1) [Items.dm:222]
				Del [Items.dm:223]
					var [Items.dm:224]
						.arg [Items.dm:224]
					if [Items.dm:224]
						 [Items.dm:224]
							!= [Items.dm:224]
								 (src.icon_state) [Items.dm:224]
								 ("Glass Broken") [Items.dm:224]
					 [Items.dm:225]
						_block [Items.dm:225]
							var [Items.dm:225]
								turf [Items.dm:225]
									Z [Items.dm:225]
							for [Items.dm:225]
								 [Items.dm:225]
									in [Items.dm:225]
										 (Z) [Items.dm:225]
										 [Items.dm:225]
											- [Items.dm:225]
												 [Items.dm:225]
													range [Items.dm:225]
														 (2) [Items.dm:225]
														 (src) [Items.dm:225]
												 [Items.dm:225]
													range [Items.dm:225]
														 (1) [Items.dm:225]
														 (src) [Items.dm:225]
							 [Items.dm:225]
								missile [Items.dm:225]
									 [Items.dm:225]
										image [Items.dm:225]
											 [Items.dm:225]
												arglist [Items.dm:225]
													 [Items.dm:225]
														list [Items.dm:225]
															 ('Effects.dmi') [Items.dm:225]
															 [Items.dm:225]
																= [Items.dm:225]
																	 ("icon_state") [Items.dm:225]
																	 ("Glass Shards") [Items.dm:225]
															 [Items.dm:225]
																= [Items.dm:225]
																	 ("layer") [Items.dm:225]
																	 (5) [Items.dm:225]
									 (src) [Items.dm:225]
									 (Z) [Items.dm:225]
						= [Items.dm:226]
							 (src.density) [Items.dm:226]
							 (0) [Items.dm:226]
						= [Items.dm:227]
							 (src.icon_state) [Items.dm:227]
							 [Items.dm:227]
								text ("\[] Broken") [Items.dm:227]
									 [Items.dm:227]
										 (src.icon_state) [Items.dm:227]
		MouseDown [Items.dm:230]
			var [Items.dm:230]
				.arg [Items.dm:230]
					atom [Items.dm:230]
						Location [Items.dm:230]
			if [Items.dm:230]
				 [Items.dm:230]
					&& [Items.dm:230]
						 [Items.dm:230]
							istype [Items.dm:230]
								 (usr) [Items.dm:230]
								 (/mob/Player) [Items.dm:230]
						 [Items.dm:230]
							> [Items.dm:230]
								 [Items.dm:230]
									get_dist [Items.dm:230]
										 (src) [Items.dm:230]
										 (usr) [Items.dm:230]
								 (1) [Items.dm:230]
			 [Items.dm:231]
				var [Items.dm:231]
					mob [Items.dm:231]
						Player [Items.dm:231]
							X [Items.dm:231]
								 [Items.dm:231]
									= [Items.dm:231]
										 (usr) [Items.dm:231]
				= [Items.dm:232]
					 (X.Firing) [Items.dm:232]
					 (1) [Items.dm:232]
				= [Items.dm:233]
					 (X.Target) [Items.dm:233]
					 (src.loc) [Items.dm:233]
				.call (X.Shooting) [Items.dm:234]
					 (X.Target) [Items.dm:234]
	Items [Items.dm:237]
		= [Items.dm:238]
			 (icon) [Items.dm:238]
			 ('Items.dmi') [Items.dm:238]
		= [Items.dm:239]
			 (mouse_over_pointer) [Items.dm:239]
			 ("Target1") [Items.dm:239]
		= [Items.dm:240]
			 (Health) [Items.dm:240]
			 (50) [Items.dm:240]
		Weapons [Items.dm:241]
			var [Items.dm:242]
				Ammo [Items.dm:242]
					 [Items.dm:242]
						= [Items.dm:242]
							 (1) [Items.dm:242]
			var [Items.dm:243]
				AmmoMax [Items.dm:243]
					 [Items.dm:243]
						= [Items.dm:243]
							 (1) [Items.dm:243]
			var [Items.dm:244]
				Reload [Items.dm:244]
					 [Items.dm:244]
						= [Items.dm:244]
							 (50) [Items.dm:244]
			var [Items.dm:245]
				Accuracy [Items.dm:245]
					 [Items.dm:245]
						= [Items.dm:245]
							 (80) [Items.dm:245]
			var [Items.dm:246]
				Type [Items.dm:246]
					 [Items.dm:246]
						= [Items.dm:246]
							 (null) [Items.dm:246]
			= [Items.dm:247]
				 (Grab) [Items.dm:247]
				 (1) [Items.dm:247]
			Knife [Items.dm:248]
				= [Items.dm:249]
					 (name) [Items.dm:249]
					 ("Knife") [Items.dm:249]
				= [Items.dm:250]
					 (icon_state) [Items.dm:250]
					 ("Knife") [Items.dm:250]
				= [Items.dm:251]
					 (Type) [Items.dm:251]
					 ("Melee") [Items.dm:251]
				= [Items.dm:252]
					 (Value) [Items.dm:252]
					 (50) [Items.dm:252]
				= [Items.dm:253]
					 (Accuracy) [Items.dm:253]
					 (100) [Items.dm:253]
				= [Items.dm:254]
					 (desc) [Items.dm:254]
					 ("<B>Knife</B><BR>  Consider as a last resort only, although fast the knife doesnt do much damage and requires close proximity. <p><b>Alternate firing</b> will throw the knife dealing moderate damage at a range, but costing you the knife.</p>") [Items.dm:254]
			Chainsaw [Items.dm:255]
				= [Items.dm:256]
					 (name) [Items.dm:256]
					 ("Chainsaw") [Items.dm:256]
				= [Items.dm:257]
					 (icon_state) [Items.dm:257]
					 ("Chainsaw") [Items.dm:257]
				= [Items.dm:258]
					 (Type) [Items.dm:258]
					 ("Melee") [Items.dm:258]
				= [Items.dm:259]
					 (desc) [Items.dm:259]
					 ("<B>Chainsaw</B><BR>  The deadlist melee weapon, buckets of blood are bound to be spilt with this tool. <p><b>Alternate firing</b> swing slower dealing more damage.</p>") [Items.dm:259]
				= [Items.dm:260]
					 (Value) [Items.dm:260]
					 (475) [Items.dm:260]
				= [Items.dm:261]
					 (Accuracy) [Items.dm:261]
					 (100) [Items.dm:261]
			Chaingun [Items.dm:262]
				= [Items.dm:263]
					 (name) [Items.dm:263]
					 ("Chaingun") [Items.dm:263]
				= [Items.dm:264]
					 (icon_state) [Items.dm:264]
					 ("Chaingun") [Items.dm:264]
				= [Items.dm:265]
					 (Ammo) [Items.dm:265]
					 (50) [Items.dm:265]
				= [Items.dm:266]
					 (AmmoMax) [Items.dm:266]
					 (50) [Items.dm:266]
				= [Items.dm:267]
					 (Reload) [Items.dm:267]
					 (60) [Items.dm:267]
				= [Items.dm:268]
					 (Type) [Items.dm:268]
					 ("Ballastic") [Items.dm:268]
				= [Items.dm:269]
					 (desc) [Items.dm:269]
					 ("<B>Chaingun</B><BR> Fast spining lead death, this gun can reduce a single target to a pile of chunky meat in seconds, unfortinatly reloading takes a while. <p><b>Alternate firing</b> speeds up the rate of fire, but uses up bullets faster.</p>") [Items.dm:269]
				= [Items.dm:270]
					 (Value) [Items.dm:270]
					 (800) [Items.dm:270]
				= [Items.dm:271]
					 (Accuracy) [Items.dm:271]
					 (50) [Items.dm:271]
			DualScorpians [Items.dm:272]
				= [Items.dm:273]
					 (name) [Items.dm:273]
					 ("Dual Scorpians") [Items.dm:273]
				= [Items.dm:274]
					 (icon_state) [Items.dm:274]
					 ("Dual Scorpians") [Items.dm:274]
				= [Items.dm:275]
					 (Ammo) [Items.dm:275]
					 (16) [Items.dm:275]
				= [Items.dm:276]
					 (AmmoMax) [Items.dm:276]
					 (16) [Items.dm:276]
				= [Items.dm:277]
					 (Reload) [Items.dm:277]
					 (10) [Items.dm:277]
				= [Items.dm:278]
					 (Type) [Items.dm:278]
					 ("Ballastic") [Items.dm:278]
				= [Items.dm:279]
					 (desc) [Items.dm:279]
					 ("<B>Scorpians</B><BR> Twin scorpian revolvers, low damage but fast reload makes this gun well balanced for green hunters. <p><b>Alternate firing<b> none.</p>") [Items.dm:279]
				= [Items.dm:280]
					 (Value) [Items.dm:280]
					 (200) [Items.dm:280]
				= [Items.dm:281]
					 (Accuracy) [Items.dm:281]
					 (85) [Items.dm:281]
			Shotgun [Items.dm:282]
				= [Items.dm:283]
					 (name) [Items.dm:283]
					 ("Shotgun") [Items.dm:283]
				= [Items.dm:284]
					 (icon_state) [Items.dm:284]
					 ("Shotgun") [Items.dm:284]
				= [Items.dm:285]
					 (Ammo) [Items.dm:285]
					 (2) [Items.dm:285]
				= [Items.dm:286]
					 (AmmoMax) [Items.dm:286]
					 (2) [Items.dm:286]
				= [Items.dm:287]
					 (Reload) [Items.dm:287]
					 (15) [Items.dm:287]
				= [Items.dm:288]
					 (Type) [Items.dm:288]
					 ("Ballastic") [Items.dm:288]
				= [Items.dm:289]
					 (desc) [Items.dm:289]
					 ("<B>Shotgun</B><BR>  Old fashion double barrel carnage, the closer you are the more damage you`ll deal to your target. <p><b>Alternate firing</b> will blast both chambers at same time causing more damage and knocking a creature back, but takes more time to reload so gun can cool down.</p>") [Items.dm:289]
				= [Items.dm:290]
					 (Value) [Items.dm:290]
					 (300) [Items.dm:290]
			MK1Laser [Items.dm:291]
				= [Items.dm:292]
					 (name) [Items.dm:292]
					 ("Mk1 Laser") [Items.dm:292]
				= [Items.dm:293]
					 (icon_state) [Items.dm:293]
					 ("Mk1 Laser") [Items.dm:293]
				= [Items.dm:294]
					 (Ammo) [Items.dm:294]
					 (10) [Items.dm:294]
				= [Items.dm:295]
					 (AmmoMax) [Items.dm:295]
					 (10) [Items.dm:295]
				= [Items.dm:296]
					 (Reload) [Items.dm:296]
					 (30) [Items.dm:296]
				= [Items.dm:297]
					 (Type) [Items.dm:297]
					 ("Energy") [Items.dm:297]
				= [Items.dm:298]
					 (desc) [Items.dm:298]
					 ("<B>MK1 Laser</B><BR>  High tech and dangerous, this weapon ignores all armor and hits its target right where it hurts. <p><b>Alternate firing</b> none.</p>") [Items.dm:298]
				= [Items.dm:299]
					 (Value) [Items.dm:299]
					 (600) [Items.dm:299]
			MK2Laser [Items.dm:300]
				= [Items.dm:301]
					 (name) [Items.dm:301]
					 ("Mk2 Laser") [Items.dm:301]
				= [Items.dm:302]
					 (icon_state) [Items.dm:302]
					 ("Mk2 Laser") [Items.dm:302]
				= [Items.dm:303]
					 (Ammo) [Items.dm:303]
					 (2) [Items.dm:303]
				= [Items.dm:304]
					 (AmmoMax) [Items.dm:304]
					 (2) [Items.dm:304]
				= [Items.dm:305]
					 (Reload) [Items.dm:305]
					 (60) [Items.dm:305]
				= [Items.dm:306]
					 (Type) [Items.dm:306]
					 ("Energy") [Items.dm:306]
				= [Items.dm:307]
					 (desc) [Items.dm:307]
					 ("<B>MK2 Laser</B><BR>  A revolutionary weapon, this gun will shoot a slow moving energy ball which will explode when it hits its target or collides with something. If the energy ball is destroyed early the results are much more devistating, making this weapon a team player. <p><b>Alternate firing</b> fires a devestating ball of energy, this ball will disinegrate almost any organic matter it touches, however this attack perminately damages the gun only allowing 2 shots before the gun is usless.</p>") [Items.dm:307]
				= [Items.dm:308]
					 (Value) [Items.dm:308]
					 (1000) [Items.dm:308]
			FlameThrower [Items.dm:309]
				= [Items.dm:310]
					 (name) [Items.dm:310]
					 ("Flame Thrower") [Items.dm:310]
				= [Items.dm:311]
					 (icon_state) [Items.dm:311]
					 ("Flame Thrower") [Items.dm:311]
				= [Items.dm:312]
					 (Ammo) [Items.dm:312]
					 (3) [Items.dm:312]
				= [Items.dm:313]
					 (AmmoMax) [Items.dm:313]
					 (3) [Items.dm:313]
				= [Items.dm:314]
					 (Reload) [Items.dm:314]
					 (40) [Items.dm:314]
				= [Items.dm:315]
					 (Type) [Items.dm:315]
					 ("Riot") [Items.dm:315]
				= [Items.dm:316]
					 (desc) [Items.dm:316]
					 ("<B>Flame Thrower</B><BR> This gun is simple as it is deadly, it fires streams of fire over its target dealing massive damage, unfortunatly the stream is limited and the gun takes a bit of time to reload. <p><b>Alternate firing</b> will concetrate all ammo into a wave of fire sweeping all those in your path, this doesnt concetrate the stream on a target, but still effective sweeping a way for you to move.</p>") [Items.dm:316]
				= [Items.dm:317]
					 (Value) [Items.dm:317]
					 (1750) [Items.dm:317]
				= [Items.dm:318]
					 (Accuracy) [Items.dm:318]
					 (60) [Items.dm:318]
			ParticalLauncher [Items.dm:319]
				= [Items.dm:320]
					 (name) [Items.dm:320]
					 ("Partical Launcher") [Items.dm:320]
				= [Items.dm:321]
					 (icon_state) [Items.dm:321]
					 ("Partical Launcher") [Items.dm:321]
				= [Items.dm:322]
					 (Ammo) [Items.dm:322]
					 (4) [Items.dm:322]
				= [Items.dm:323]
					 (AmmoMax) [Items.dm:323]
					 (4) [Items.dm:323]
				= [Items.dm:324]
					 (Reload) [Items.dm:324]
					 (60) [Items.dm:324]
				= [Items.dm:325]
					 (Type) [Items.dm:325]
					 ("Riot") [Items.dm:325]
				= [Items.dm:326]
					 (desc) [Items.dm:326]
					 ("<B>Partical Launcher</B><BR>  New age riot gun, fired into the center of a mob of enemies this blast will explode damaging all in its radius. <p><b>Alternate firing</b> by setting the gun to overload, in a matter of seconds its core will melt down causing a high powered explosion damaging anything in its radius.</p>") [Items.dm:326]
				= [Items.dm:327]
					 (Value) [Items.dm:327]
					 (1950) [Items.dm:327]
				Del [Items.dm:328]
					var [Items.dm:329]
						.arg [Items.dm:329]
					if [Items.dm:329]
						 [Items.dm:329]
							! [Items.dm:329]
								 (src.Grab) [Items.dm:329]
					 [Items.dm:330]
						= [Items.dm:330]
							 (src.icon_state) [Items.dm:330]
							 [Items.dm:330]
								text ("\[] Overload") [Items.dm:330]
									 [Items.dm:330]
										 (src) [Items.dm:330]
						.call (src.Move) [Items.dm:331]
							 (src.Owner.loc) [Items.dm:331]
						spawn [Items.dm:332]
							 (50) [Items.dm:332]
						 [Items.dm:333]
							_block [Items.dm:333]
								var [Items.dm:333]
									I [Items.dm:333]
								for [Items.dm:333]
									 [Items.dm:333]
										= [Items.dm:333]
											 (I) [Items.dm:333]
											 (3) [Items.dm:333]
									 [Items.dm:333]
										> [Items.dm:333]
											 (I) [Items.dm:333]
											 (0) [Items.dm:333]
									 [Items.dm:333]
										.post-- (I) [Items.dm:333]
								 [Items.dm:334]
									_block [Items.dm:334]
										var [Items.dm:334]
											turf [Items.dm:334]
												Z [Items.dm:334]
										for [Items.dm:334]
											 [Items.dm:334]
												in [Items.dm:334]
													 (Z) [Items.dm:334]
													 [Items.dm:334]
														- [Items.dm:334]
															 [Items.dm:334]
																range [Items.dm:334]
																	 (4) [Items.dm:334]
																	 (src) [Items.dm:334]
															 [Items.dm:334]
																range [Items.dm:334]
																	 (3) [Items.dm:334]
																	 (src) [Items.dm:334]
										 [Items.dm:334]
											missile [Items.dm:334]
												 [Items.dm:334]
													image [Items.dm:334]
														 [Items.dm:334]
															arglist [Items.dm:334]
																 [Items.dm:334]
																	list [Items.dm:334]
																		 ('Effects.dmi') [Items.dm:334]
																		 [Items.dm:334]
																			= [Items.dm:334]
																				 ("icon_state") [Items.dm:334]
																				 ("ZapBlue") [Items.dm:334]
																		 [Items.dm:334]
																			= [Items.dm:334]
																				 ("layer") [Items.dm:334]
																				 (5) [Items.dm:334]
												 (src) [Items.dm:334]
												 (Z) [Items.dm:334]
									_block [Items.dm:335]
										var [Items.dm:335]
											atom [Items.dm:335]
												movable [Items.dm:335]
													X [Items.dm:335]
										for [Items.dm:335]
											 [Items.dm:335]
												in [Items.dm:335]
													 (X) [Items.dm:335]
													 [Items.dm:335]
														range [Items.dm:335]
															 (4) [Items.dm:335]
															 (src) [Items.dm:335]
										 [Items.dm:336]
											missile [Items.dm:336]
												 [Items.dm:336]
													image [Items.dm:336]
														 [Items.dm:336]
															arglist [Items.dm:336]
																 [Items.dm:336]
																	list [Items.dm:336]
																		 ('Effects.dmi') [Items.dm:336]
																		 [Items.dm:336]
																			= [Items.dm:336]
																				 ("icon_state") [Items.dm:336]
																				 ("Small Blast") [Items.dm:336]
																		 [Items.dm:336]
																			= [Items.dm:336]
																				 ("layer") [Items.dm:336]
																				 (4) [Items.dm:336]
																		 [Items.dm:336]
																			= [Items.dm:336]
																				 ("pixel_y") [Items.dm:336]
																				 [Items.dm:336]
																					rand [Items.dm:336]
																						 (-10) [Items.dm:336]
																						 (10) [Items.dm:336]
																		 [Items.dm:336]
																			= [Items.dm:336]
																				 ("pixel_x") [Items.dm:336]
																				 [Items.dm:336]
																					rand [Items.dm:336]
																						 (-10) [Items.dm:336]
																						 (10) [Items.dm:336]
												 (src.Target) [Items.dm:336]
												 (X) [Items.dm:336]
											.call (Damage) [Items.dm:337]
												 (src) [Items.dm:337]
												 (X) [Items.dm:337]
												 [Items.dm:337]
													rand [Items.dm:337]
														 (3) [Items.dm:337]
														 (5) [Items.dm:337]
												 ("Zap2") [Items.dm:337]
												 (0) [Items.dm:337]
											sleep [Items.dm:338]
												 (1) [Items.dm:338]
									sleep [Items.dm:339]
										 (1) [Items.dm:339]
							.call (..) [Items.dm:340]
					else [Items.dm:341]
						.call (..) [Items.dm:341]
			SniperRifle [Items.dm:342]
				= [Items.dm:343]
					 (name) [Items.dm:343]
					 ("Sniper Rifle") [Items.dm:343]
				= [Items.dm:344]
					 (icon_state) [Items.dm:344]
					 ("Sniper Rifle") [Items.dm:344]
				= [Items.dm:345]
					 (Ammo) [Items.dm:345]
					 (1) [Items.dm:345]
				= [Items.dm:346]
					 (AmmoMax) [Items.dm:346]
					 (1) [Items.dm:346]
				= [Items.dm:347]
					 (Reload) [Items.dm:347]
					 (50) [Items.dm:347]
				= [Items.dm:348]
					 (Type) [Items.dm:348]
					 ("Ballastic") [Items.dm:348]
				= [Items.dm:349]
					 (desc) [Items.dm:349]
					 ("<B>Sniper Rifle</B><BR>  Aim, fire. The sniper rifle is a potient weapon for skilled users, each shot is devestating, but has a chance to instantly kill normal or small sized enemies. Each gun has a single shot, and takes awhile to reload. <p><b>Alternate firing</b> by aiming alittle longer you can deal more damage and up your instant kill percentage.</p>") [Items.dm:349]
				= [Items.dm:350]
					 (Value) [Items.dm:350]
					 (1100) [Items.dm:350]
			RocketLauncher [Items.dm:351]
				= [Items.dm:352]
					 (name) [Items.dm:352]
					 ("Rocket Launcher") [Items.dm:352]
				= [Items.dm:353]
					 (icon_state) [Items.dm:353]
					 ("Rocket Launcher") [Items.dm:353]
				= [Items.dm:354]
					 (Ammo) [Items.dm:354]
					 (1) [Items.dm:354]
				= [Items.dm:355]
					 (AmmoMax) [Items.dm:355]
					 (1) [Items.dm:355]
				= [Items.dm:356]
					 (Reload) [Items.dm:356]
					 (50) [Items.dm:356]
				= [Items.dm:357]
					 (Counter) [Items.dm:357]
					 (6) [Items.dm:357]
				= [Items.dm:358]
					 (Type) [Items.dm:358]
					 ("Ballastic") [Items.dm:358]
				= [Items.dm:359]
					 (desc) [Items.dm:359]
					 ("<B>Rocket Launcher</B><BR>  This limited use weapon can fire 6 missiles, each capibile of dealing massive blast damage to all in its radius, once all the ammo is fired this weapon cannot be reloaded. <p><b>Alternate firing</b> Fires a single slower moving tracking missile that explodes after a few seconds.</p>") [Items.dm:359]
				= [Items.dm:360]
					 (Value) [Items.dm:360]
					 (1000) [Items.dm:360]
		Keys [Items.dm:362]
			= [Items.dm:363]
				 (Grab) [Items.dm:363]
				 (1) [Items.dm:363]
			= [Items.dm:364]
				 (Health) [Items.dm:364]
				 (500) [Items.dm:364]
			= [Items.dm:365]
				 (name) [Items.dm:365]
				 ("Key Cards") [Items.dm:365]
			= [Items.dm:366]
				 (icon_state) [Items.dm:366]
				 ("Key Card") [Items.dm:366]
			= [Items.dm:367]
				 (desc) [Items.dm:367]
				 ("<B>Key Card</B><BR>  Used for opening locked doors.") [Items.dm:367]
			Key1 [Items.dm:368]
				= [Items.dm:369]
					 (name) [Items.dm:369]
					 ("Sewage Access Card") [Items.dm:369]
				= [Items.dm:370]
					 (Counter) [Items.dm:370]
					 (2) [Items.dm:370]
			Key2 [Items.dm:371]
				= [Items.dm:372]
					 (name) [Items.dm:372]
					 ("Weapon Locker Card") [Items.dm:372]
				= [Items.dm:373]
					 (Counter) [Items.dm:373]
					 (11) [Items.dm:373]
		Items [Items.dm:375]
			= [Items.dm:376]
				 (Grab) [Items.dm:376]
				 (1) [Items.dm:376]
			HypoSpray [Items.dm:377]
				= [Items.dm:378]
					 (name) [Items.dm:378]
					 ("Hypo Spray") [Items.dm:378]
				= [Items.dm:379]
					 (icon_state) [Items.dm:379]
					 ("Hypo Spray") [Items.dm:379]
				= [Items.dm:380]
					 (desc) [Items.dm:380]
					 ("<B>Hypo Spray</B><BR>  This small vial is filled with a soup of fast acting healing chems. Once injected it will heal 25 of the targets health.") [Items.dm:380]
				= [Items.dm:381]
					 (Value) [Items.dm:381]
					 (300) [Items.dm:381]
			TurboSpray [Items.dm:382]
				= [Items.dm:383]
					 (name) [Items.dm:383]
					 ("Turbo Spray") [Items.dm:383]
				= [Items.dm:384]
					 (icon_state) [Items.dm:384]
					 ("Turbo Spray") [Items.dm:384]
				= [Items.dm:385]
					 (desc) [Items.dm:385]
					 ("<B>Turbo Spray</B><BR>  Hypo spray on acid, this little vial has an added ingredient that distributes the chems more accuratly promoting healing of 45 hit points.") [Items.dm:385]
				= [Items.dm:386]
					 (Value) [Items.dm:386]
					 (500) [Items.dm:386]
			ArmorPlate [Items.dm:387]
				= [Items.dm:388]
					 (name) [Items.dm:388]
					 ("Armor Plating") [Items.dm:388]
				= [Items.dm:389]
					 (icon_state) [Items.dm:389]
					 ("Armor Plating") [Items.dm:389]
				= [Items.dm:390]
					 (desc) [Items.dm:390]
					 ("<B>Armor Plating</B><BR>  This Armor plating will repair your targets armor to its max. Costly but life saving.") [Items.dm:390]
				= [Items.dm:391]
					 (Value) [Items.dm:391]
					 (750) [Items.dm:391]
			EliteArmorPlate [Items.dm:392]
				= [Items.dm:393]
					 (name) [Items.dm:393]
					 ("EliteArmor Plating") [Items.dm:393]
				= [Items.dm:394]
					 (icon_state) [Items.dm:394]
					 ("Armor Plating") [Items.dm:394]
				= [Items.dm:395]
					 (desc) [Items.dm:395]
					 ("<B>Elite Armor Plating</B><BR>  This Armor plating will repair your targets armor to its max, if your Armor max is less then 40 it will be raised to 40 upon using this.") [Items.dm:395]
				= [Items.dm:396]
					 (Value) [Items.dm:396]
					 (1550) [Items.dm:396]
			PCD [Items.dm:397]
				= [Items.dm:398]
					 (name) [Items.dm:398]
					 ("P-C-D") [Items.dm:398]
				= [Items.dm:399]
					 (icon_state) [Items.dm:399]
					 ("PCD") [Items.dm:399]
				= [Items.dm:400]
					 (Counter) [Items.dm:400]
					 (3) [Items.dm:400]
				= [Items.dm:401]
					 (desc) [Items.dm:401]
					 ("<B>P.C.D.</B><BR>  New imaging technology allows this personal cloaking device to hide its user for around 30 seconds in which they can move freely without worry, unfortunatly, it takes some time for the P-C-D to activate, also attacking or getting damaged will null the cloaking effect.") [Items.dm:401]
				= [Items.dm:402]
					 (Value) [Items.dm:402]
					 (450) [Items.dm:402]
			TripBomb [Items.dm:403]
				= [Items.dm:404]
					 (name) [Items.dm:404]
					 ("Trip Bomb") [Items.dm:404]
				= [Items.dm:405]
					 (icon_state) [Items.dm:405]
					 ("Trip Bomb") [Items.dm:405]
				= [Items.dm:406]
					 (desc) [Items.dm:406]
					 ("<B>Trip Bomb</B><BR>  A powerful explosive charge that can be mounted to walls and when the beam is crossed or time expires it will explode dealing good damage to all int its blast.") [Items.dm:406]
				= [Items.dm:407]
					 (Value) [Items.dm:407]
					 (400) [Items.dm:407]
		Del [Items.dm:410]
			var [Items.dm:411]
				.arg [Items.dm:411]
			step_rand [Items.dm:411]
				 (src) [Items.dm:411]
			.call (..) [Items.dm:412]
		Click [Items.dm:414]
			var [Items.dm:415]
				.arg [Items.dm:415]
			if [Items.dm:415]
				 [Items.dm:415]
					&& [Items.dm:415]
						 [Items.dm:415]
							istype [Items.dm:415]
								 (usr) [Items.dm:415]
								 (/mob/Player) [Items.dm:415]
						 [Items.dm:415]
							<= [Items.dm:415]
								 [Items.dm:415]
									get_dist [Items.dm:415]
										 (src) [Items.dm:415]
										 (usr) [Items.dm:415]
								 (1) [Items.dm:415]
			 [Items.dm:415]
				if [Items.dm:415]
					 (src.Grab) [Items.dm:415]
				 [Items.dm:416]
					.call (src.Move) [Items.dm:416]
						 (usr) [Items.dm:416]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/atom/movable) [Darkside.dme:0]
	.. (/atom/movable) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/atom/movable) [The Base.dmp:0]
	.. (/atom/movable) [The Base.dmp:0]
	.. (/atom/movable) [The Base.dmp:0]
var [Options.dm:4]
	list [Options.dm:5]
		NoWeapons [Options.dm:5]
			 [Options.dm:5]
				= [Options.dm:5]
					list [Options.dm:5]
		NoMonsters [Options.dm:6]
			 [Options.dm:6]
				= [Options.dm:6]
					list [Options.dm:6]
		WeaponsCost [Options.dm:8]
			 [Options.dm:8]
				= [Options.dm:8]
					list [Options.dm:8]
	PKMode [Options.dm:10]
		 [Options.dm:10]
			= [Options.dm:10]
				 (0) [Options.dm:10]
	AAAllowed [Options.dm:11]
		 [Options.dm:11]
			= [Options.dm:11]
				 (1) [Options.dm:11]
	Started [Options.dm:12]
		 [Options.dm:12]
			= [Options.dm:12]
				 (0) [Options.dm:12]
	Hardness [Options.dm:13]
		 [Options.dm:13]
			= [Options.dm:13]
				 (2) [Options.dm:13]
	MobMax [Options.dm:14]
		 [Options.dm:14]
			= [Options.dm:14]
				 (400) [Options.dm:14]
	GamePlay [Options.dm:15]
		 [Options.dm:15]
			= [Options.dm:15]
				 ("Story") [Options.dm:15]
	SCredit [Options.dm:16]
		 [Options.dm:16]
			= [Options.dm:16]
				 (500) [Options.dm:16]
var [Player and Weapons.dm:573]
	include [Player and Weapons.dm:573]
		 [Player and Weapons.dm:573]
			= [Player and Weapons.dm:573]
				 ("\n<STYLE TYPE=\"text/css\">\nspan{\n  cursor: pointer;\n}\n#menu{\n  position: absolute;\n  background-color: black;\n  border:1px solid blue;\n  font: normal 12px Verdana;\n  line-height: 12px;\n  margin: 2px 2px 2px 2px;\n  z-index: 100;\n  visibility: hidden;\n  width: 100%;\n  align: top;\n  cursor: default;\n}\nimg{\n  border: 1px solid white blue;\n}\na{\n  color: blue;\n}\n</STYLE>\n\n<SCRIPT TYPE=\"text/javascript\">\nvar it=0;\nfunction hide() {\n  var menu=document.getElementById(\"menu\");\n  menu.style.visibility=\"hidden\";\n  return false;\n}\n\nfunction show(e,what) {\n  var menu=document.getElementById(\"menu\");\n  menu.innerHTML=\"<font color=white>\"+what;\n  menu.style.visibility=\"visible\";\n  menu.style.top=e.style.top+document.body.scrollTop;\n  it=e;\n  return false;\n}\n\nfunction doit(e,what) {\n  var menu=document.getElementById(\"menu\");\n  if(menu.style.visibility==\"visible\") {\n    if(it==e) {hide();}\n    else {show(e,what);}\n  }\n  else {show(e,what);}\n}\n</SCRIPT>\n\n<DIV ID=menu VISIBILITY=hidden onClick=\"hide();\"></DIV>") [Player and Weapons.dm:626]
datum [Darkside.dme:0]
	.child_type (/image) [Darkside.dme:0]
	.child_type (/atom) [Darkside.dme:0]
	.child_type (/icon) [Darkside.dme:0]
	.child_type (/sound) [Darkside.dme:0]
	.child_type (/image) [The Base.dmp:0]
	.child_type (/image) [The Base.dmp:0]
	.child_type (/atom) [The Base.dmp:0]
	.child_type (/atom) [The Base.dmp:0]
image [Darkside.dme:0]
	= [Darkside.dme:0]
		 (parent_type) [Darkside.dme:0]
		 (/datum) [Darkside.dme:0]
	= [Darkside.dme:0]
		 (_dm_interface) [Darkside.dme:0]
		 (65) [Darkside.dme:0]
	.. (/datum) [Darkside.dme:0]
	= [The Base.dmp:0]
		 (parent_type) [The Base.dmp:0]
		 (/datum) [The Base.dmp:0]
	= [The Base.dmp:0]
		 (_dm_interface) [The Base.dmp:0]
		 (65) [The Base.dmp:0]
	.. (/datum) [The Base.dmp:0]
	.. (/datum) [The Base.dmp:0]
savefile [Darkside.dme:0]
list [Darkside.dme:0]
